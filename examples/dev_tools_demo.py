"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AnamorphX

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É:
- –ü–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- IDE –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
- –û—Ç–ª–∞–¥—á–∏–∫–∞
- –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.tools.syntax_highlighter import highlight_anamorph_code, AnamorphSyntaxHighlighter, THEMES
from src.tools.debugger import create_debugger, DebugState
from src.tools.profiler import start_profiling, stop_profiling, profile, profile_neural
from src.tools.ide_components import launch_ide
import time
import json


def demo_syntax_highlighting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    print("üé® === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–î–°–í–ï–¢–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ Anamorph
    test_code = '''
// –ü—Ä–∏–º–µ—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ —è–∑—ã–∫–µ Anamorph
network simple_mlp {
    layers: [784, 128, 64, 10]
    activation: "relu"
    optimizer: "adam"
}

neuron input_neuron {
    activation: "linear"
    size: 784
    input_shape: [28, 28, 1]
}

synapse hidden_connection {
    from: input_neuron
    to: hidden_layer
    weight: random_normal(0.0, 0.1)
    bias: zeros()
}

signal training_data {
    batch_size: 32
    data: load_mnist("train")
    preprocessing: normalize()
}

def train_network(epochs=100, lr=0.001):
    """–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    for epoch in range(epochs):
        total_loss = 0.0
        
        for batch in training_data:
            # –ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
            predictions = simple_mlp.forward(batch.inputs)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            loss = cross_entropy_loss(predictions, batch.targets)
            total_loss += loss
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
            gradients = simple_mlp.backward(loss)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
            simple_mlp.update_weights(gradients, lr)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        avg_loss = total_loss / len(training_data)
        print(f"Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö
        if (epoch + 1) % 10 == 0:
            accuracy = validate_model(simple_mlp)
            print(f"Validation Accuracy: {accuracy:.2f}%")

def validate_model(model):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    correct = 0
    total = 0
    
    for batch in validation_data:
        predictions = model.predict(batch.inputs)
        correct += sum(predictions.argmax(axis=1) == batch.targets)
        total += len(batch.targets)
    
    return (correct / total) * 100

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏
network = simple_mlp
train_network(epochs=50, lr=0.001)
'''
    
    print("\nüìÑ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:")
    print("-" * 50)
    print(test_code[:300] + "...\n")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    themes = ['light', 'dark', 'vs_code_dark']
    
    for theme_name in themes:
        print(f"\nüé≠ –¢–µ–º–∞: {theme_name}")
        print("-" * 30)
        
        # HTML –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        html_result = highlight_anamorph_code(test_code, theme=theme_name, format='html')
        html_filename = f"syntax_highlight_{theme_name}.html"
        
        with open(html_filename, 'w', encoding='utf-8') as f:
            # –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
            highlighter = AnamorphSyntaxHighlighter(THEMES[theme_name])
            css_styles = highlighter.generate_css()
            
            f.write(f"""
<!DOCTYPE html>
<html>
<head>
    <title>Anamorph Syntax Highlighting - {theme_name}</title>
    <style>
        body {{ background: {'#1E1E1E' if 'dark' in theme_name else '#FFFFFF'}; }}
        {css_styles}
    </style>
</head>
<body>
    <h1>üé® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Anamorph - {theme_name}</h1>
    {html_result}
</body>
</html>
            """)
        
        print(f"  ‚úÖ HTML —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {html_filename}")
        
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        json_result = highlight_anamorph_code(test_code, theme=theme_name, format='json')
        json_filename = f"syntax_tokens_{theme_name}.json"
        
        with open(json_filename, 'w', encoding='utf-8') as f:
            f.write(json_result)
        
        print(f"  ‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {json_filename}")
    
    # VS Code —Ç–µ–º–∞
    highlighter = AnamorphSyntaxHighlighter(THEMES['vs_code_dark'])
    vs_code_theme = highlighter.export_vs_code_theme()
    
    with open('anamorph_vscode_theme.json', 'w', encoding='utf-8') as f:
        json.dump(vs_code_theme, f, indent=2, ensure_ascii=False)
    
    print(f"\nüéØ VS Code —Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: anamorph_vscode_theme.json")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–∞–ø–∫—É .vscode/extensions")


def demo_debugger():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞"""
    print("\nüêõ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–¢–õ–ê–î–ß–ò–ö–ê ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug_code = '''
def factorial(n):
    print(f"–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ {n}")
    if n <= 1:
        return 1
    else:
        result = n * factorial(n - 1)
        print(f"–§–∞–∫—Ç–æ—Ä–∏–∞–ª {n} = {result}")
        return result

def main():
    numbers = [3, 5, 7]
    results = []
    
    for num in numbers:
        fact = factorial(num)
        results.append(fact)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {num}: {fact}")
    
    print(f"–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
    return results

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
main()
'''
    
    print("\nüìù –ö–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
    print("-" * 40)
    print(debug_code)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∞–¥—á–∏–∫–∞
    debugger = create_debugger()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞
    bp1 = debugger.add_line_breakpoint("debug_test.py", 3, condition="n > 1")
    bp2 = debugger.add_function_breakpoint("factorial")
    bp3 = debugger.add_line_breakpoint("debug_test.py", 15)
    
    print(f"\nüéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞:")
    for bp in debugger.list_breakpoints():
        print(f"  ‚Ä¢ {bp['type']} –≤ {bp.get('file_path', '—Ñ—É–Ω–∫—Ü–∏—è')}:{bp.get('line', bp.get('function_name'))}")
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    debugger.add_watch("n")
    debugger.add_watch("result")
    debugger.add_watch("numbers")
    
    print(f"\nüëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(debugger.watched_variables)}")
    
    # –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ (–≤ —Å–∏–º—É–ª—è—Ü–∏–∏)
    print(f"\n‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏...")
    debugger.start_debugging(debug_code, "debug_test.py")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    time.sleep(2)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    session_data = debugger.export_debug_session()
    
    with open('debug_session.json', 'w', encoding='utf-8') as f:
        json.dump(session_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìä –°–µ—Å—Å–∏—è –æ—Ç–ª–∞–¥–∫–∏:")
    print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏—è: {len(session_data['event_history'])}")
    print(f"  ‚Ä¢ –ö–∞–¥—Ä—ã —Å—Ç–µ–∫–∞: {len(session_data['call_stack'])}")
    print(f"  ‚Ä¢ –¢–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞: {len(session_data['breakpoints'])}")
    print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: debug_session.json")
    
    debugger.stop()


@profile()
def fibonacci_test(n):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if n <= 1:
        return n
    return fibonacci_test(n-1) + fibonacci_test(n-2)


@profile()
def matrix_operations():
    """–ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import random
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    size = 100
    matrix_a = [[random.random() for _ in range(size)] for _ in range(size)]
    matrix_b = [[random.random() for _ in range(size)] for _ in range(size)]
    
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    result = [[0 for _ in range(size)] for _ in range(size)]
    
    for i in range(size):
        for j in range(size):
            for k in range(size):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    
    return result


@profile_neural("activation", "test_neuron")
def neural_computation(inputs):
    """–ù–µ–π—Ä–æ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
    import math
    
    # –≠–º—É–ª—è—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    weights = [0.5, -0.3, 0.8, 0.2, -0.1]
    bias = 0.1
    
    # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    weighted_sum = sum(w * x for w, x in zip(weights, inputs)) + bias
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è (sigmoid)  
    activation = 1 / (1 + math.exp(-weighted_sum))
    
    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    time.sleep(0.001)
    
    return activation


@profile_neural("forward_pass", "neural_network")
def neural_network_forward(network_inputs):
    """–ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    layer1 = [neural_computation(network_inputs) for _ in range(10)]
    layer2 = [neural_computation(layer1) for _ in range(5)]
    output = neural_computation(layer2)
    return output


def demo_profiler():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
    print("\nüìä === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–§–ê–ô–õ–ï–†–ê ===")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üéØ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    start_profiling("demo_session")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    print("  üî¢ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏...")
    for i in range(1, 15):
        result = fibonacci_test(i)
    
    print("  üìä –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    matrix_operations()
    
    print("  üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è...")
    for i in range(50):
        inputs = [0.1 * j for j in range(5)]
        neural_network_forward(inputs)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    print("‚è±Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    report = stop_profiling("demo_session")
    
    if report:
        print(f"\nüìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {report['summary']['total_execution_time']:.3f}s")
        print(f"  ‚Ä¢ –í—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π: {report['summary']['total_function_calls']}")
        print(f"  ‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {report['summary']['total_neural_operations']}")
        print(f"  ‚Ä¢ –ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å: {report['summary']['peak_memory_usage']:.1f}MB")
        
        print(f"\nüî• –¢–æ–ø-5 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        for i, func in enumerate(report['top_functions'][:5], 1):
            print(f"  {i}. {func['name']}: {func['total_time']:.3f}s ({func['percentage']:.1f}%)")
        
        print(f"\nüß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        for i, neural in enumerate(report['neural_performance'][:3], 1):
            print(f"  {i}. {neural['operation']}: {neural['avg_time']*1000:.2f}ms")
        
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in report['performance_analysis']['recommendations']:
            print(f"  ‚Ä¢ {rec}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        with open('performance_report_demo.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # HTML –æ—Ç—á–µ—Ç
        from src.tools.profiler import _global_profiler
        analyzer = _global_profiler.active_sessions["demo_session"]
        analyzer.export_report("performance_report_demo.html", "html")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  ‚úÖ performance_report_demo.json")
        print(f"  ‚úÖ performance_report_demo.html")


def demo_ide():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è IDE"""
    print("\nüñ•Ô∏è === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø IDE ===")
    print("üöÄ –ó–∞–ø—É—Å–∫ AnamorphX IDE...")
    print("   (–ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ IDE –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–µ–º–æ)")
    
    try:
        # –ó–∞–ø—É—Å–∫ IDE (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        launch_ide()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ IDE: {e}")
        print("   (–í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ GUI)")


def create_summary_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–ï–¢–ê ===")
    
    summary = {
        "title": "AnamorphX Development Tools Demo Report",
        "timestamp": time.time(),
        "tools_demonstrated": [
            {
                "name": "Syntax Highlighter",
                "description": "–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ Anamorph",
                "features": [
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4 —Ç–µ–º (light, dark, vs_code_light, vs_code_dark)",
                    "–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML –∏ JSON",
                    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VS Code —Ç–µ–º—ã",
                    "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
                ],
                "files_created": [
                    "syntax_highlight_*.html",
                    "syntax_tokens_*.json", 
                    "anamorph_vscode_theme.json"
                ]
            },
            {
                "name": "Debugger",
                "description": "–û—Ç–ª–∞–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞ –∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏",
                "features": [
                    "–¢–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞ (–ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º)",
                    "–ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
                    "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤",
                    "–≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ –æ—Ç–ª–∞–¥–∫–∏"
                ],
                "files_created": ["debug_session.json"]
            },
            {
                "name": "Performance Profiler", 
                "description": "–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                "features": [
                    "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π",
                    "–ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                    "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏",
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                    "HTML –∏ JSON –æ—Ç—á–µ—Ç—ã"
                ],
                "files_created": [
                    "performance_report_demo.json",
                    "performance_report_demo.html"
                ]
            },
            {
                "name": "IDE Components",
                "description": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "features": [
                    "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π",
                    "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
                    "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª",
                    "–ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏",
                    "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ç–µ–º—ã"
                ],
                "files_created": []
            }
        ],
        "statistics": {
            "total_files_created": 0,
            "total_lines_of_code": 0,
            "supported_languages": ["Python", "JavaScript", "HTML", "JSON"],
            "ide_features": 15,
            "themes_supported": 4
        },
        "next_steps": [
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω—É—é IDE",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–æ–≤",
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        ]
    }
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    created_files = []
    for tool in summary["tools_demonstrated"]:
        created_files.extend(tool["files_created"])
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = [f for f in created_files if os.path.exists(f) or '*' in f]
    summary["statistics"]["total_files_created"] = len(existing_files)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    with open('dev_tools_demo_report.json', 'w', encoding='utf-8') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print(f"  ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(summary['tools_demonstrated'])}")
    print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {summary['statistics']['total_files_created']}")
    print(f"  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤: {len(summary['statistics']['supported_languages'])}")
    print(f"  ‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: dev_tools_demo_report.json")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –†–ê–ó–†–ê–ë–û–¢–ö–ò ANAMORPHX")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    demo_syntax_highlighting()
    demo_debugger()  
    demo_profiler()
    
    # IDE –¥–µ–º–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ide_demo = input("\nüñ•Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ IDE? (y/N): ").lower().strip()
    if ide_demo == 'y':
        demo_ide()
    else:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –¥–µ–º–æ IDE")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    create_summary_report()
    
    print("\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    
    # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    demo_files = [
        "syntax_highlight_light.html",
        "syntax_highlight_dark.html", 
        "syntax_highlight_vs_code_dark.html",
        "syntax_tokens_light.json",
        "syntax_tokens_dark.json",
        "syntax_tokens_vs_code_dark.json",
        "anamorph_vscode_theme.json",
        "debug_session.json",
        "performance_report_demo.json",
        "performance_report_demo.html",
        "dev_tools_demo_report.json"
    ]
    
    for filename in demo_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"  ‚úÖ {filename} ({size} bytes)")
        else:
            print(f"  ‚ùå {filename} (–Ω–µ —Å–æ–∑–¥–∞–Ω)")
    
    print(f"\nüéâ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AnamorphX –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö HTML —Ñ–∞–π–ª–∞—Ö")


if __name__ == "__main__":
    main() 