    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ML"""
        # –ì–ª–∞–≤–Ω—ã–π PanedWindow
        self.main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫)
        self.left_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.left_frame, weight=1)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å ML)
        self.center_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.center_frame, weight=4)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã + ML)
        self.right_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.right_frame, weight=2)
        
        self.create_file_explorer()
        self.create_ml_enhanced_editor()
        self.create_integrated_tools_panel()
    
    def create_file_explorer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        explorer_label = ttk.Label(self.left_frame, text="üìÅ Project Explorer", font=("Arial", 10, "bold"))
        explorer_label.pack(anchor="w", padx=5, pady=2)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.file_tree = ttk.Treeview(self.left_frame)
        self.file_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        self.populate_file_tree()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.file_tree.bind("<Double-1>", self.on_file_double_click)
    
    def populate_file_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = self.file_tree.insert("", "end", text="üìÅ AnamorphX ML Project", open=True, values=("folder",))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.file_tree.insert(project_root, "end", text="üìÑ main.anamorph", values=("file",))
        self.file_tree.insert(project_root, "end", text="üìÑ neural_classifier.anamorph", values=("file",))
        self.file_tree.insert(project_root, "end", text="üìÑ deep_network.anamorph", values=("file",))
    
    def create_ml_enhanced_editor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        editor_frame = ttk.Frame(self.center_frame)
        editor_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML —Å—Ç–∞—Ç—É—Å–æ–º
        editor_header = ttk.Frame(editor_frame)
        editor_header.pack(fill=tk.X, pady=(0, 2))
        
        self.file_label = ttk.Label(editor_header, text="üìÑ Untitled.anamorph", font=("Arial", 10, "bold"))
        self.file_label.pack(side=tk.LEFT)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.modified_label = ttk.Label(editor_header, text="", foreground="red")
        self.modified_label.pack(side=tk.LEFT, padx=5)
        
        # ML —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∞–π–ª–∞
        self.ml_file_status = ttk.Label(editor_header, text="ü§ñ ML: Ready", font=("Arial", 9), foreground="green")
        self.ml_file_status.pack(side=tk.RIGHT, padx=5)
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
        text_frame = tk.Frame(editor_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Å ML –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.line_numbers = Text(text_frame, width=6, padx=3, takefocus=0,
                                border=0, state="disabled", wrap="none",
                                font=("Consolas", 11), bg="#f0f0f0", fg="#666666")
        self.line_numbers.pack(side=tk.LEFT, fill=tk.Y)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å ML
        self.text_editor = Text(text_frame, wrap=tk.NONE, undo=True, 
                               font=("Consolas", 11), bg="white", fg="black",
                               insertbackground="black", selectbackground="#316AC5")
        self.text_editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.sync_scroll)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_editor.config(yscrollcommand=v_scrollbar.set)
        self.line_numbers.config(yscrollcommand=v_scrollbar.set)
        
        h_scrollbar = ttk.Scrollbar(editor_frame, orient=tk.HORIZONTAL, command=self.text_editor.xview)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        self.text_editor.config(xscrollcommand=h_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Å ML
        self.setup_ml_text_tags()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å ML
        self.setup_ml_editor_events()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.update_line_numbers()
    
    def setup_ml_text_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å ML"""
        # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ AnamorphX
        self.text_editor.tag_configure("keyword", foreground="#0000FF", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("string", foreground="#008000")
        self.text_editor.tag_configure("comment", foreground="#808080", font=("Consolas", 11, "italic"))
        self.text_editor.tag_configure("number", foreground="#FF0000")
        self.text_editor.tag_configure("function", foreground="#800080", font=("Consolas", 11, "bold"))
        
        # AnamorphX —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ–≥–∏
        self.text_editor.tag_configure("neuron", foreground="#FF8000", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("network", foreground="#000080", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("activation", foreground="#008080", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("layer", foreground="#4B0082", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("optimizer", foreground="#DC143C", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("loss", foreground="#B22222", font=("Consolas", 11, "bold"))
        
        # ML –∞–Ω–∞–ª–∏–∑ —Ç–µ–≥–∏
        self.text_editor.tag_configure("ml_error", background="#FFCCCB", underline=True)
        self.text_editor.tag_configure("ml_warning", background="#FFE4B5", underline=True)
        self.text_editor.tag_configure("ml_optimization", background="#E0FFE0", underline=True)
        self.text_editor.tag_configure("ml_suggestion", background="#E6E6FA", underline=True)
        self.text_editor.tag_configure("ml_neural", background="#F0F8FF", underline=True)
        
        # –û—Ç–ª–∞–¥–∫–∞
        self.text_editor.tag_configure("current_line", background="#E6F3FF")
        self.text_editor.tag_configure("breakpoint", background="#FF6B6B", foreground="white")
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Å ML –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.line_numbers.tag_configure("breakpoint", background="#FF6B6B", foreground="white")
        self.line_numbers.tag_configure("current", background="#E6F3FF")
        self.line_numbers.tag_configure("ml_issue", background="#FFE4B5")
        self.line_numbers.tag_configure("ml_suggestion", background="#E6E6FA")
    
    def setup_ml_editor_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.text_editor.bind("<KeyRelease>", self.on_ml_text_change)
        self.text_editor.bind("<Button-1>", self.on_ml_editor_click)
        self.text_editor.bind("<ButtonRelease-1>", self.on_ml_editor_click)
        
        # ML —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.text_editor.bind("<Control-space>", self.trigger_ml_autocomplete)
        self.text_editor.bind("<Control-m>", lambda e: self.run_full_ml_analysis())
        
        # –°–æ–±—ã—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.line_numbers.bind("<Button-1>", self.on_line_number_click)
        self.line_numbers.bind("<Button-3>", self.on_line_number_right_click)
    
    def create_integrated_tools_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å ML"""
        self.right_notebook = ttk.Notebook(self.right_frame)
        self.right_notebook.pack(fill=tk.BOTH, expand=True)
        
        # ML –∞–Ω–∞–ª–∏–∑ (–æ—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
        self.create_ml_analysis_panel()
        
        # –ù–µ–π—Ä–æ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.create_neural_visualization_panel()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è
        self.create_training_monitoring_panel()
        
        # –ö–æ–Ω—Å–æ–ª—å —Å ML
        self.create_ml_console_panel()
    
    def create_ml_analysis_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ ML –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(analysis_frame, text="ü§ñ ML Analysis")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        header_frame = ttk.Frame(analysis_frame)
        header_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Label(header_frame, text="Real-time Code Analysis", font=("Arial", 10, "bold")).pack(side=tk.LEFT)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
        self.auto_analysis_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(header_frame, text="Auto", variable=self.auto_analysis_var, 
                       command=self.toggle_auto_analysis).pack(side=tk.RIGHT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(analysis_frame)
        control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(control_frame, text="üîç Analyze Now", command=self.run_full_ml_analysis).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="‚ú® Apply Fixes", command=self.apply_ml_fixes).pack(side=tk.LEFT, padx=2)
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.ml_analysis_tree = ttk.Treeview(analysis_frame, 
                                           columns=("type", "severity", "confidence", "suggestion"), 
                                           show="tree headings")
        self.ml_analysis_tree.heading("#0", text="Line")
        self.ml_analysis_tree.heading("type", text="Type")
        self.ml_analysis_tree.heading("severity", text="Severity")
        self.ml_analysis_tree.heading("confidence", text="Confidence")
        self.ml_analysis_tree.heading("suggestion", text="Suggestion")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.ml_analysis_tree.column("#0", width=50)
        self.ml_analysis_tree.column("type", width=80)
        self.ml_analysis_tree.column("severity", width=60)
        self.ml_analysis_tree.column("confidence", width=70)
        self.ml_analysis_tree.column("suggestion", width=200)
        
        self.ml_analysis_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        stats_frame = ttk.LabelFrame(analysis_frame, text="Analysis Statistics")
        stats_frame.pack(fill=tk.X, padx=5, pady=2)
        
        self.analysis_stats_label = ttk.Label(stats_frame, text="No analysis performed yet", font=("Arial", 9))
        self.analysis_stats_label.pack(padx=5, pady=2)
    
    def create_neural_visualization_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        neural_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(neural_frame, text="üß† Neural Viz")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        viz_control_frame = ttk.Frame(neural_frame)
        viz_control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(viz_control_frame, text="üéØ Show Architecture", command=self.show_network_architecture).pack(side=tk.LEFT, padx=2)
        ttk.Button(viz_control_frame, text="üîÑ Refresh", command=self.refresh_neural_viz).pack(side=tk.LEFT, padx=2)
        
        # Canvas –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.neural_canvas = Canvas(neural_frame, bg="white", height=300)
        self.neural_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.neural_viz_active = True
        self.root.after(1000, self.initialize_neural_visualization)
    
    def create_training_monitoring_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
        training_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(training_frame, text="üìà Training")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–µ–º
        training_control_frame = ttk.Frame(training_frame)
        training_control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(training_control_frame, text="‚ñ∂Ô∏è Start Training", command=self.start_ml_training).pack(side=tk.LEFT, padx=2)
        ttk.Button(training_control_frame, text="‚èπÔ∏è Stop", command=self.stop_ml_training).pack(side=tk.LEFT, padx=2)
        
        # Canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        self.training_canvas = Canvas(training_frame, bg="white", height=250)
        self.training_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        params_frame = ttk.LabelFrame(training_frame, text="Training Parameters")
        params_frame.pack(fill=tk.X, padx=5, pady=2)
        
        # Learning Rate
        lr_frame = ttk.Frame(params_frame)
        lr_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(lr_frame, text="Learning Rate:").pack(side=tk.LEFT)
        self.lr_var = tk.StringVar(value="0.001")
        ttk.Entry(lr_frame, textvariable=self.lr_var, width=10).pack(side=tk.RIGHT)
        
        # Batch Size
        batch_frame = ttk.Frame(params_frame)
        batch_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(batch_frame, text="Batch Size:").pack(side=tk.LEFT)
        self.batch_var = tk.StringVar(value="32")
        ttk.Entry(batch_frame, textvariable=self.batch_var, width=10).pack(side=tk.RIGHT)
        
        # Epochs
        epochs_frame = ttk.Frame(params_frame)
        epochs_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(epochs_frame, text="Epochs:").pack(side=tk.LEFT)
        self.epochs_var = tk.StringVar(value="100")
        ttk.Entry(epochs_frame, textvariable=self.epochs_var, width=10).pack(side=tk.RIGHT)
        
        # –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
        self.training_status_label = ttk.Label(training_frame, text="Training Status: Ready", font=("Arial", 9))
        self.training_status_label.pack(pady=2)
        
        self.training_active = False
    
    def create_ml_console_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ —Å ML –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        console_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(console_frame, text="üíª ML Console")
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏
        self.console_output = Text(console_frame, height=15, state="disabled", 
                                  font=("Consolas", 9), bg="black", fg="white")
        self.console_output.pack(fill=tk.BOTH, expand=True, padx=5, pady=(5, 2))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        input_frame = ttk.Frame(console_frame)
        input_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        ttk.Label(input_frame, text="ML>>>").pack(side=tk.LEFT)
        
        self.console_input = ttk.Entry(input_frame, font=("Consolas", 9))
        self.console_input.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        self.console_input.bind("<Return>", self.execute_ml_console_command)
        
        ttk.Button(input_frame, text="Execute", command=self.execute_ml_console_command).pack(side=tk.LEFT, padx=2)
        ttk.Button(input_frame, text="Clear", command=self.clear_console).pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_to_console("ü§ñ AnamorphX ML IDE - Unified Edition")
        self.log_to_console("üí° ML integration is fully active")
        self.log_to_console("üîç Real-time analysis enabled")
        self.log_to_console("Type \"help\" for ML commands")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å ML –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=2)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(self.status_bar, text="Ready")
        self.status_label.pack(side=tk.LEFT)
        
        # ML —Å—Ç–∞—Ç—É—Å
        self.ml_status_detail = ttk.Label(self.status_bar, text="ü§ñ ML: Analyzing...", foreground="blue")
        self.ml_status_detail.pack(side=tk.LEFT, padx=10)
        
        # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
        self.cursor_label = ttk.Label(self.status_bar, text="Line: 1, Col: 1")
        self.cursor_label.pack(side=tk.RIGHT, padx=10)
        
        # ML –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.ml_perf_label = ttk.Label(self.status_bar, text="‚ö° ML: 0ms", foreground="green")
        self.ml_perf_label.pack(side=tk.RIGHT, padx=10)
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —Å ML"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind("<Control-s>", lambda e: self.save_file())
        self.root.bind("<Control-o>", lambda e: self.open_file())
        self.root.bind("<Control-n>", lambda e: self.new_file())
        self.root.bind("<F5>", lambda e: self.run_code())
        
        # ML —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind("<Control-m>", lambda e: self.run_full_ml_analysis())
        self.root.bind("<Shift-F5>", lambda e: self.run_with_ml_analysis())
        self.root.bind("<Control-space>", lambda e: self.trigger_ml_autocomplete(e)) 