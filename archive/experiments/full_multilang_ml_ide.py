#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è AnamorphX IDE —Å ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π IDE + –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å + TensorFlow/ML
"""

import tkinter as tk
from tkinter import ttk, Text, Canvas, messagebox, filedialog
import time
import threading
import random
import json
import os
from typing import Dict, List, Any, Optional
from i18n_system import _, set_language, get_language, get_available_languages
from ml_integration import integrate_ml_features, MLIntegrationPanel

class FullMultilingualMLIDE:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è IDE —Å ML"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AnamorphX IDE - Full ML Edition")
        self.root.geometry("1400x900")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_debugging = False
        self.is_running = False
        self.is_profiling = False
        self.current_line = 1
        self.breakpoints = set()
        self.variables = {}
        self.profiler_data = {}
        self.call_stack = []
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        self.ui_elements = {}
        
        self.setup_ui()
        self.load_sample_code()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.create_menu()
        self.create_toolbar()
        self.create_main_interface()
        self.create_status_bar()
    
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        self.menubar = tk.Menu(self.root)
        self.root.config(menu=self.menubar)
        
        # –§–∞–π–ª
        self.file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_file"), menu=self.file_menu)
        self.file_menu.add_command(label=_("file_new"), command=self.new_file)
        self.file_menu.add_command(label=_("file_open"), command=self.open_file)
        self.file_menu.add_command(label=_("file_save"), command=self.save_file)
        self.file_menu.add_command(label=_("file_save_as"), command=self.save_file_as)
        self.file_menu.add_separator()
        self.file_menu.add_command(label=_("file_exit"), command=self.root.quit)
        
        # –ü—Ä–∞–≤–∫–∞
        self.edit_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_edit"), menu=self.edit_menu)
        self.edit_menu.add_command(label=_("edit_undo"), command=self.undo)
        self.edit_menu.add_command(label=_("edit_redo"), command=self.redo)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=_("edit_cut"), command=self.cut)
        self.edit_menu.add_command(label=_("edit_copy"), command=self.copy)
        self.edit_menu.add_command(label=_("edit_paste"), command=self.paste)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=_("edit_find"), command=self.find)
        self.edit_menu.add_command(label=_("edit_replace"), command=self.replace)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.run_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_run"), menu=self.run_menu)
        self.run_menu.add_command(label=_("run_execute"), command=self.run_code)
        self.run_menu.add_command(label=_("run_debug"), command=self.debug_code)
        self.run_menu.add_command(label=_("run_profile"), command=self.profile_code)
        self.run_menu.add_separator()
        self.run_menu.add_command(label=_("run_stop"), command=self.stop_execution)
        
        # –û—Ç–ª–∞–¥–∫–∞
        self.debug_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_debug"), menu=self.debug_menu)
        self.debug_menu.add_command(label=_("debug_step"), command=self.debug_step)
        self.debug_menu.add_command(label=_("debug_step_into"), command=self.debug_step_into)
        self.debug_menu.add_command(label=_("debug_step_out"), command=self.debug_step_out)
        self.debug_menu.add_command(label=_("debug_continue"), command=self.debug_continue)
        self.debug_menu.add_separator()
        self.debug_menu.add_command(label=_("debug_breakpoint"), command=self.toggle_breakpoint)
        self.debug_menu.add_command(label=_("debug_clear_breakpoints"), command=self.clear_breakpoints)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.tools_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_tools"), menu=self.tools_menu)
        self.tools_menu.add_command(label="ML Analysis", command=self.run_ml_analysis)
        self.tools_menu.add_command(label="Neural Visualization", command=self.show_neural_viz)
        self.tools_menu.add_separator()
        self.tools_menu.add_command(label=_("panel_variables"), command=self.show_variables)
        self.tools_menu.add_command(label=_("panel_profiler"), command=self.show_profiler)
        
        # –Ø–∑—ã–∫
        self.language_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_language"), menu=self.language_menu)
        for lang_code, lang_name in get_available_languages().items():
            self.language_menu.add_command(
                label=lang_name,
                command=lambda code=lang_code: self.change_language(code)
            )
        
        # –°–ø—Ä–∞–≤–∫–∞
        self.help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_help"), menu=self.help_menu)
        self.help_menu.add_command(label="About", command=self.show_about)
        self.help_menu.add_command(label="ML Features", command=self.show_ml_help)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(side=tk.TOP, fill=tk.X, padx=5, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.btn_run = ttk.Button(self.toolbar, text=_("btn_run"), command=self.run_code)
        self.btn_run.pack(side=tk.LEFT, padx=2)
        
        self.btn_debug = ttk.Button(self.toolbar, text=_("btn_debug"), command=self.debug_code)
        self.btn_debug.pack(side=tk.LEFT, padx=2)
        
        self.btn_profile = ttk.Button(self.toolbar, text=_("btn_profile"), command=self.profile_code)
        self.btn_profile.pack(side=tk.LEFT, padx=2)
        
        self.btn_stop = ttk.Button(self.toolbar, text=_("btn_stop"), command=self.stop_execution)
        self.btn_stop.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
        self.btn_step = ttk.Button(self.toolbar, text=_("btn_step"), command=self.debug_step)
        self.btn_step.pack(side=tk.LEFT, padx=2)
        
        self.btn_step_into = ttk.Button(self.toolbar, text=_("btn_step_into"), command=self.debug_step_into)
        self.btn_step_into.pack(side=tk.LEFT, padx=2)
        
        self.btn_step_out = ttk.Button(self.toolbar, text=_("btn_step_out"), command=self.debug_step_out)
        self.btn_step_out.pack(side=tk.LEFT, padx=2)
        
        self.btn_continue = ttk.Button(self.toolbar, text=_("btn_continue"), command=self.debug_continue)
        self.btn_continue.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # ML –∫–Ω–æ–ø–∫–∏
        self.btn_ml_analyze = ttk.Button(self.toolbar, text="ü§ñ Analyze", command=self.run_ml_analysis)
        self.btn_ml_analyze.pack(side=tk.LEFT, padx=2)
        
        self.btn_neural_viz = ttk.Button(self.toolbar, text="üß† Neural", command=self.show_neural_viz)
        self.btn_neural_viz.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        ttk.Label(self.toolbar, text=_("menu_language") + ":").pack(side=tk.LEFT, padx=2)
        
        self.language_var = tk.StringVar(value=get_language())
        self.language_combo = ttk.Combobox(
            self.toolbar,
            textvariable=self.language_var,
            values=list(get_available_languages().keys()),
            state="readonly",
            width=5
        )
        self.language_combo.pack(side=tk.LEFT, padx=2)
        self.language_combo.bind('<<ComboboxSelected>>', self.on_language_change)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.ui_elements['toolbar_buttons'] = [
            self.btn_run, self.btn_debug, self.btn_profile, self.btn_stop,
            self.btn_step, self.btn_step_into, self.btn_step_out, self.btn_continue
        ]
    
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π PanedWindow
        self.main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ä–µ–¥–∞–∫—Ç–æ—Ä)
        self.left_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.left_frame, weight=3)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
        self.right_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.right_frame, weight=1)
        
        self.create_editor()
        self.create_tools_panel()
    
    def create_editor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
        editor_frame = ttk.Frame(self.left_frame)
        editor_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
        text_frame = tk.Frame(editor_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        self.line_numbers = Text(text_frame, width=4, padx=3, takefocus=0,
                                border=0, state='disabled', wrap='none',
                                font=("Consolas", 11))
        self.line_numbers.pack(side=tk.LEFT, fill=tk.Y)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
        self.text_editor = Text(text_frame, wrap=tk.NONE, undo=True, 
                               font=("Consolas", 11))
        self.text_editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.sync_scroll)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_editor.config(yscrollcommand=v_scrollbar.set)
        self.line_numbers.config(yscrollcommand=v_scrollbar.set)
        
        h_scrollbar = ttk.Scrollbar(editor_frame, orient=tk.HORIZONTAL, command=self.text_editor.xview)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        self.text_editor.config(xscrollcommand=h_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤
        self.setup_text_tags()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.text_editor.bind('<KeyRelease>', self.on_text_change)
        self.text_editor.bind('<Button-1>', self.on_editor_click)
        self.text_editor.bind('<ButtonRelease-1>', self.on_editor_click)
        self.line_numbers.bind('<Button-1>', self.on_line_number_click)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.update_line_numbers()
    
    def sync_scroll(self, *args):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        self.text_editor.yview(*args)
        self.line_numbers.yview(*args)
    
    def setup_text_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.text_editor.tag_configure("keyword", foreground="blue", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("string", foreground="green")
        self.text_editor.tag_configure("comment", foreground="gray", font=("Consolas", 11, "italic"))
        self.text_editor.tag_configure("number", foreground="red")
        self.text_editor.tag_configure("function", foreground="purple", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("neuron", foreground="orange", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("network", foreground="darkblue", font=("Consolas", 11, "bold"))
        
        # –û—Ç–ª–∞–¥–∫–∞
        self.text_editor.tag_configure("current_line", background="lightblue")
        self.text_editor.tag_configure("breakpoint", background="red", foreground="white")
        
        # ML –∞–Ω–∞–ª–∏–∑
        self.text_editor.tag_configure("ml_suggestion", background="lightyellow")
        self.text_editor.tag_configure("ml_warning", background="lightcoral")
        
        self.line_numbers.tag_configure("breakpoint", background="red", foreground="white")
        self.line_numbers.tag_configure("current", background="lightblue")
    
    def create_tools_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.right_notebook = ttk.Notebook(self.right_frame)
        self.right_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.create_variables_panel()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
        self.create_call_stack_panel()
        
        # –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
        self.create_profiler_panel()
        
        # –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏
        self.create_debug_console()
        
        # ML –ø–∞–Ω–µ–ª—å
        self.create_ml_panel()
    
    def create_variables_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        self.var_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(self.var_frame, text=_("panel_variables"))
        
        # –î–µ—Ä–µ–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.var_tree = ttk.Treeview(self.var_frame, columns=("value", "type"), show="tree headings")
        self.var_tree.heading("#0", text=_("col_name"))
        self.var_tree.heading("value", text=_("col_value"))
        self.var_tree.heading("type", text=_("col_type"))
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞
        var_scrollbar = ttk.Scrollbar(self.var_frame, orient=tk.VERTICAL, command=self.var_tree.yview)
        self.var_tree.config(yscrollcommand=var_scrollbar.set)
        
        self.var_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        var_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        var_buttons = ttk.Frame(self.var_frame)
        var_buttons.pack(fill=tk.X, pady=2)
        
        self.btn_refresh_vars = ttk.Button(var_buttons, text=_("btn_refresh"), command=self.refresh_variables)
        self.btn_refresh_vars.pack(side=tk.LEFT, padx=2)
        
        self.btn_add_watch = ttk.Button(var_buttons, text=_("btn_add"), command=self.add_watch)
        self.btn_add_watch.pack(side=tk.LEFT, padx=2)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        self.ui_elements['var_buttons'] = [self.btn_refresh_vars, self.btn_add_watch]
    
    def create_call_stack_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤"""
        self.stack_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(self.stack_frame, text=_("panel_call_stack"))
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–µ–∫–∞
        stack_list_frame = ttk.Frame(self.stack_frame)
        stack_list_frame.pack(fill=tk.BOTH, expand=True)
        
        self.stack_listbox = tk.Listbox(stack_list_frame)
        stack_scrollbar = ttk.Scrollbar(stack_list_frame, orient=tk.VERTICAL, command=self.stack_listbox.yview)
        self.stack_listbox.config(yscrollcommand=stack_scrollbar.set)
        
        self.stack_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        stack_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–æ–º
        stack_buttons = ttk.Frame(self.stack_frame)
        stack_buttons.pack(fill=tk.X, pady=2)
        
        ttk.Button(stack_buttons, text="Go to", command=self.goto_stack_frame).pack(side=tk.LEFT, padx=2)
        ttk.Button(stack_buttons, text="Clear", command=self.clear_stack).pack(side=tk.LEFT, padx=2)
    
    def create_profiler_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
        self.profiler_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(self.profiler_frame, text=_("panel_profiler"))
        
        # Canvas –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
        self.profiler_canvas = Canvas(self.profiler_frame, bg="white", height=200)
        self.profiler_canvas.pack(fill=tk.BOTH, expand=True)
        
        # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        prof_list_frame = ttk.Frame(self.profiler_frame)
        prof_list_frame.pack(fill=tk.X, pady=2)
        
        self.prof_label = ttk.Label(prof_list_frame, text=_("col_function") + ":")
        self.prof_label.pack(anchor=tk.W)
        
        prof_listbox_frame = ttk.Frame(prof_list_frame)
        prof_listbox_frame.pack(fill=tk.X)
        
        self.prof_listbox = tk.Listbox(prof_listbox_frame, height=6)
        prof_list_scrollbar = ttk.Scrollbar(prof_listbox_frame, orient=tk.VERTICAL, command=self.prof_listbox.yview)
        self.prof_listbox.config(yscrollcommand=prof_list_scrollbar.set)
        
        self.prof_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        prof_list_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
        prof_buttons = ttk.Frame(self.profiler_frame)
        prof_buttons.pack(fill=tk.X, pady=2)
        
        ttk.Button(prof_buttons, text="Export", command=self.export_profile).pack(side=tk.LEFT, padx=2)
        ttk.Button(prof_buttons, text="Clear", command=self.clear_profile).pack(side=tk.LEFT, padx=2)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        self.ui_elements['profiler_label'] = self.prof_label
    
    def create_debug_console(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏"""
        self.console_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(self.console_frame, text=_("panel_console"))
        
        # –í—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏
        console_output_frame = ttk.Frame(self.console_frame)
        console_output_frame.pack(fill=tk.BOTH, expand=True)
        
        self.console_output = Text(console_output_frame, height=15, state='disabled', font=("Consolas", 10))
        console_scrollbar = ttk.Scrollbar(console_output_frame, orient=tk.VERTICAL, command=self.console_output.yview)
        self.console_output.config(yscrollcommand=console_scrollbar.set)
        
        self.console_output.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        console_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥
        input_frame = ttk.Frame(self.console_frame)
        input_frame.pack(fill=tk.X, pady=2)
        
        ttk.Label(input_frame, text=">>> ").pack(side=tk.LEFT)
        self.console_input = ttk.Entry(input_frame)
        self.console_input.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.console_input.bind('<Return>', self.execute_console_command)
        
        self.btn_execute_cmd = ttk.Button(input_frame, text=_("btn_execute"), command=self.execute_console_command)
        self.btn_execute_cmd.pack(side=tk.RIGHT)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        self.ui_elements['console_button'] = self.btn_execute_cmd
    
    def create_ml_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ ML –ø–∞–Ω–µ–ª–∏"""
        try:
            self.ml_panel = integrate_ml_features(self)
            if self.ml_panel:
                self.log_to_console("ü§ñ ML features integrated successfully")
        except Exception as e:
            self.log_to_console(f"‚ö†Ô∏è ML integration error: {e}")
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ ML –ø–∞–Ω–µ–ª–∏
            ml_frame = ttk.Frame(self.right_notebook)
            self.right_notebook.add(ml_frame, text="ü§ñ ML")
            
            ttk.Label(ml_frame, text="ML features not available\nInstall TensorFlow for full functionality").pack(expand=True)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.status_label = ttk.Label(self.status_bar, text=_("status_ready"))
        self.status_label.pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.status_bar, variable=self.progress_var, mode='indeterminate')
        
        # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
        self.line_col_label = ttk.Label(self.status_bar, text=_("cursor_position", line=1, col=1))
        self.line_col_label.pack(side=tk.RIGHT, padx=5)
        
        # –Ø–∑—ã–∫
        self.lang_status_label = ttk.Label(self.status_bar, text=f"Lang: {get_available_languages()[get_language()]}")
        self.lang_status_label.pack(side=tk.RIGHT, padx=5)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        self.ui_elements['status_labels'] = [self.status_label, self.line_col_label, self.lang_status_label]
    
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏... 