#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (i18n) –¥–ª—è AnamorphX IDE
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
"""

import json
import os
from typing import Dict, Any

class I18nManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.current_language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        self.translations = {}
        self.load_translations()
    
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        # –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        self.translations["ru"] = {
            # –ú–µ–Ω—é
            "menu_file": "–§–∞–π–ª",
            "menu_edit": "–ü—Ä–∞–≤–∫–∞", 
            "menu_run": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "menu_debug": "–û—Ç–ª–∞–¥–∫–∞",
            "menu_tools": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "menu_help": "–°–ø—Ä–∞–≤–∫–∞",
            "menu_language": "–Ø–∑—ã–∫",
            
            # –§–∞–π–ª
            "file_new": "–ù–æ–≤—ã–π",
            "file_open": "–û—Ç–∫—Ä—ã—Ç—å",
            "file_save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            "file_save_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
            "file_exit": "–í—ã—Ö–æ–¥",
            
            # –ü—Ä–∞–≤–∫–∞
            "edit_undo": "–û—Ç–º–µ–Ω–∏—Ç—å",
            "edit_redo": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
            "edit_cut": "–í—ã—Ä–µ–∑–∞—Ç—å",
            "edit_copy": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            "edit_paste": "–í—Å—Ç–∞–≤–∏—Ç—å",
            "edit_find": "–ù–∞–π—Ç–∏",
            "edit_replace": "–ó–∞–º–µ–Ω–∏—Ç—å",
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            "run_execute": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "run_debug": "–û—Ç–ª–∞–¥–∫–∞",
            "run_profile": "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å",
            "run_stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            
            # –û—Ç–ª–∞–¥–∫–∞
            "debug_step": "–®–∞–≥",
            "debug_step_into": "–®–∞–≥ –≤",
            "debug_step_out": "–®–∞–≥ –∏–∑",
            "debug_continue": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            "debug_breakpoint": "–¢–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞",
            "debug_clear_breakpoints": "–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞",
            
            # –ü–∞–Ω–µ–ª–∏
            "panel_variables": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
            "panel_call_stack": "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤",
            "panel_profiler": "–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä",
            "panel_console": "–ö–æ–Ω—Å–æ–ª—å",
            "panel_output": "–í—ã–≤–æ–¥",
            
            # –ö–Ω–æ–ø–∫–∏
            "btn_run": "‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "btn_debug": "üêõ –û—Ç–ª–∞–¥–∫–∞",
            "btn_profile": "üìä –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å",
            "btn_stop": "‚èπ –°—Ç–æ–ø",
            "btn_step": "‚ñ∂ –®–∞–≥",
            "btn_step_into": "‚Ü≥ –®–∞–≥ –≤",
            "btn_step_out": "‚Ü∞ –®–∞–≥ –∏–∑",
            "btn_continue": "‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            "btn_refresh": "–û–±–Ω–æ–≤–∏—Ç—å",
            "btn_add": "–î–æ–±–∞–≤–∏—Ç—å",
            "btn_execute": "–í—ã–ø–æ–ª–Ω–∏—Ç—å",
            
            # –°—Ç–∞—Ç—É—Å—ã
            "status_ready": "–ì–æ—Ç–æ–≤",
            "status_running": "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
            "status_debugging": "–û—Ç–ª–∞–¥–∫–∞...",
            "status_profiling": "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...",
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            "msg_execution_started": "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...",
            "msg_debug_started": "üêõ –ù–∞—á–∞–ª–æ –æ—Ç–ª–∞–¥–∫–∏...",
            "msg_profile_started": "üìä –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...",
            "msg_execution_completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
            "msg_breakpoint_set": "–¢–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ",
            "msg_breakpoint_removed": "–¢–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ",
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            "col_name": "–ò–º—è",
            "col_value": "–ó–Ω–∞—á–µ–Ω–∏–µ", 
            "col_type": "–¢–∏–ø",
            "col_function": "–§—É–Ω–∫—Ü–∏—è",
            "col_time": "–í—Ä–µ–º—è",
            "col_calls": "–í—ã–∑–æ–≤—ã",
            
            # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
            "cursor_position": "–°—Ç—Ä–æ–∫–∞: {line}, –°—Ç–æ–ª–±–µ—Ü: {col}",
            
            # –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Å–æ–ª–∏
            "console_help": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            "console_vars": "vars - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
            "console_break": "break - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞",
            "console_print": "print <var> - –ø–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
            "console_help_cmd": "help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
            "console_unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:",
            "console_var_not_found": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{var}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            
            # –Ø–∑—ã–∫–∏
            "lang_russian": "–†—É—Å—Å–∫–∏–π",
            "lang_english": "English"
        }
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        self.translations["en"] = {
            # Menu
            "menu_file": "File",
            "menu_edit": "Edit",
            "menu_run": "Run", 
            "menu_debug": "Debug",
            "menu_tools": "Tools",
            "menu_help": "Help",
            "menu_language": "Language",
            
            # File
            "file_new": "New",
            "file_open": "Open",
            "file_save": "Save",
            "file_save_as": "Save As...",
            "file_exit": "Exit",
            
            # Edit
            "edit_undo": "Undo",
            "edit_redo": "Redo",
            "edit_cut": "Cut",
            "edit_copy": "Copy",
            "edit_paste": "Paste",
            "edit_find": "Find",
            "edit_replace": "Replace",
            
            # Run
            "run_execute": "Execute",
            "run_debug": "Debug",
            "run_profile": "Profile",
            "run_stop": "Stop",
            
            # Debug
            "debug_step": "Step",
            "debug_step_into": "Step Into",
            "debug_step_out": "Step Out",
            "debug_continue": "Continue",
            "debug_breakpoint": "Breakpoint",
            "debug_clear_breakpoints": "Clear Breakpoints",
            
            # Panels
            "panel_variables": "Variables",
            "panel_call_stack": "Call Stack",
            "panel_profiler": "Profiler",
            "panel_console": "Console",
            "panel_output": "Output",
            
            # Buttons
            "btn_run": "‚ñ∂ Run",
            "btn_debug": "üêõ Debug",
            "btn_profile": "üìä Profile",
            "btn_stop": "‚èπ Stop",
            "btn_step": "‚ñ∂ Step",
            "btn_step_into": "‚Ü≥ Step Into",
            "btn_step_out": "‚Ü∞ Step Out",
            "btn_continue": "‚è≠ Continue",
            "btn_refresh": "Refresh",
            "btn_add": "Add",
            "btn_execute": "Execute",
            
            # Status
            "status_ready": "Ready",
            "status_running": "Running...",
            "status_debugging": "Debugging...",
            "status_profiling": "Profiling...",
            
            # Messages
            "msg_execution_started": "üöÄ Starting program execution...",
            "msg_debug_started": "üêõ Starting debug session...",
            "msg_profile_started": "üìä Starting profiling...",
            "msg_execution_completed": "‚úÖ Execution completed successfully!",
            "msg_breakpoint_set": "Breakpoint set at line",
            "msg_breakpoint_removed": "Breakpoint removed at line",
            
            # Column headers
            "col_name": "Name",
            "col_value": "Value",
            "col_type": "Type", 
            "col_function": "Function",
            "col_time": "Time",
            "col_calls": "Calls",
            
            # Cursor position
            "cursor_position": "Line: {line}, Column: {col}",
            
            # Console commands
            "console_help": "Available commands:",
            "console_vars": "vars - show all variables",
            "console_break": "break - show breakpoints",
            "console_print": "print <var> - show variable value",
            "console_help_cmd": "help - show this help",
            "console_unknown": "Unknown command:",
            "console_var_not_found": "Variable '{var}' not found",
            
            # Languages
            "lang_russian": "–†—É—Å—Å–∫–∏–π",
            "lang_english": "English"
        }
    
    def set_language(self, language_code: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
        if language_code in self.translations:
            self.current_language = language_code
            return True
        return False
    
    def get_language(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
        return self.current_language
    
    def t(self, key: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ (translate)"""
        translation = self.translations.get(self.current_language, {}).get(key, key)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if kwargs:
            try:
                translation = translation.format(**kwargs)
            except:
                pass
        
        return translation
    
    def get_available_languages(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        return {
            "ru": self.t("lang_russian"),
            "en": self.t("lang_english")
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
i18n = I18nManager()

def _(key: str, **kwargs) -> str:
    """–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return i18n.t(key, **kwargs)

def set_language(lang: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    return i18n.set_language(lang)

def get_language() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
    return i18n.get_language()

def get_available_languages() -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    return i18n.get_available_languages()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ===")
    
    # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print(f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {get_language()}")
    print(f"–ú–µ–Ω—é '–§–∞–π–ª': {_('menu_file')}")
    print(f"–ö–Ω–æ–ø–∫–∞ '–ó–∞–ø—É—Å—Ç–∏—Ç—å': {_('btn_run')}")
    print(f"–ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: {_('cursor_position', line=10, col=5)}")
    
    print("\n--- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ---")
    set_language("en")
    print(f"Current language: {get_language()}")
    print(f"Menu 'File': {_('menu_file')}")
    print(f"Button 'Run': {_('btn_run')}")
    print(f"Cursor position: {_('cursor_position', line=10, col=5)}")
    
    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {get_available_languages()}") 