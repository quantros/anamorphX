#!/usr/bin/env python3
"""
AnamorphX IDE - Integrated Interpreter Edition
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è IDE —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º AnamorphX
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç complete_ml_ide.py + demo_working_interpreter.py + src/interpreter/
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Text, Canvas, Scrollbar
import os
import sys
import time
import threading
import random
import re
import json
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
HAS_FULL_ML = False
try:
    import torch
    import torch.nn as nn
    import torch.optim as optim
    from sklearn.feature_extraction.text import TfidfVectorizer
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    HAS_FULL_ML = True
    print("‚úÖ Full ML libraries loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è ML libraries not available: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è ML
    class torch:
        class nn:
            class Module: pass
            class LSTM: pass
            class Linear: pass
        @staticmethod
        def tensor(*args): return None
    
    class TfidfVectorizer:
        def __init__(self, **kwargs): pass
    
    class np:
        @staticmethod
        def random(): return [0.1, 0.2, 0.3]
        @staticmethod
        def array(data): return data

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
INTERPRETER_READY = False
interpreter_components = {}

try:
    from interpreter.execution_engine import ExecutionEngine
    interpreter_components["ExecutionEngine"] = ExecutionEngine
    print("‚úÖ Execution Engine imported")
except Exception as e:
    print(f"‚ö†Ô∏è Execution Engine: {e}")

try:
    from interpreter.ast_interpreter import ASTInterpreter
    interpreter_components["ASTInterpreter"] = ASTInterpreter
    print("‚úÖ AST Interpreter imported")
except Exception as e:
    print(f"‚ö†Ô∏è AST Interpreter: {e}")

try:
    from interpreter.type_system import TypeSystem
    interpreter_components["TypeSystem"] = TypeSystem
    print("‚úÖ Type System imported")
except Exception as e:
    print(f"‚ö†Ô∏è Type System: {e}")

try:
    from interpreter.error_handler import ErrorHandler
    interpreter_components["ErrorHandler"] = ErrorHandler
    print("‚úÖ Error Handler imported")
except Exception as e:
    print(f"‚ö†Ô∏è Error Handler: {e}")

try:
    from interpreter.enhanced_memory_manager import EnhancedMemoryManager
    interpreter_components["MemoryManager"] = EnhancedMemoryManager
    print("‚úÖ Memory Manager imported")
except Exception as e:
    print(f"‚ö†Ô∏è Memory Manager: {e}")

try:
    from interpreter.commands import CommandRegistry
    interpreter_components["Commands"] = CommandRegistry
    print("‚úÖ Commands imported")
except Exception as e:
    print(f"‚ö†Ô∏è Commands: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
INTERPRETER_READY = len(interpreter_components) >= 3
print(f"ü§ñ Interpreter status: {'‚úÖ READY' if INTERPRETER_READY else '‚ö†Ô∏è PARTIAL'} ({len(interpreter_components)}/6 components)")

class AnamorphXInterpreter:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä AnamorphX"""
    
    def __init__(self):
        self.is_ready = INTERPRETER_READY
        self.components = interpreter_components.copy()
        self.current_program = ""
        self.execution_state = "idle"  # idle, running, error
        self.variables = {}
        self.output_buffer = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.initialize_components()
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        try:
            if "TypeSystem" in self.components:
                self.type_system = self.components["TypeSystem"]()
                print("üéØ Type System initialized")
            
            if "ErrorHandler" in self.components:
                self.error_handler = self.components["ErrorHandler"]()
                print("üõ°Ô∏è Error Handler initialized")
            
            if "MemoryManager" in self.components:
                self.memory_manager = self.components["MemoryManager"]()
                print("üíæ Memory Manager initialized")
            
            if "ExecutionEngine" in self.components:
                self.execution_engine = self.components["ExecutionEngine"]()
                print("‚ö° Execution Engine initialized")
            
            if "ASTInterpreter" in self.components:
                self.ast_interpreter = self.components["ASTInterpreter"]()
                print("üå≥ AST Interpreter initialized")
            
            if "Commands" in self.components:
                self.command_registry = self.components["Commands"]()
                print("üìã Command Registry initialized")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Component initialization error: {e}")
            self.is_ready = False
    
    def execute_code(self, code_text):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ AnamorphX"""
        if not self.is_ready:
            return self.simulate_execution(code_text)
        
        try:
            self.current_program = code_text
            self.execution_state = "running"
            self.output_buffer = []
            
            # –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if hasattr(self, 'ast_interpreter'):
                result = self.ast_interpreter.interpret(code_text)
                self.execution_state = "completed"
                return {
                    "success": True,
                    "result": result,
                    "output": self.output_buffer,
                    "variables": self.get_variables(),
                    "execution_time": 0.1
                }
            else:
                return self.simulate_execution(code_text)
                
        except Exception as e:
            self.execution_state = "error"
            error_msg = f"Execution error: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "traceback": traceback.format_exc(),
                "output": self.output_buffer
            }
    
    def simulate_execution(self, code_text):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        lines = code_text.strip().split('\n')
        output = []
        variables = {}
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line or line.startswith('//'):
                continue
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if 'synap' in line and '=' in line:
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                parts = line.split('=')
                if len(parts) == 2:
                    var_name = parts[0].replace('synap', '').strip()
                    var_value = parts[1].strip()
                    variables[var_name] = var_value
                    output.append(f"‚úÖ Line {i}: Created variable {var_name} = {var_value}")
            
            elif 'print' in line:
                # –í—ã–≤–æ–¥
                output.append(f"üìÑ Line {i}: Print statement executed")
            
            elif 'network' in line:
                # –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å
                output.append(f"üß† Line {i}: Neural network definition")
            
            elif 'function' in line:
                # –§—É–Ω–∫—Ü–∏—è
                output.append(f"‚öôÔ∏è Line {i}: Function definition")
            
            else:
                output.append(f"‚ö° Line {i}: Statement executed")
        
        return {
            "success": True,
            "result": "Program executed successfully",
            "output": output,
            "variables": variables,
            "execution_time": len(lines) * 0.05,
            "simulated": True
        }
    
    def get_variables(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if hasattr(self, 'memory_manager'):
            try:
                return self.memory_manager.get_all_variables()
            except:
                pass
        return self.variables
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        return {
            "ready": self.is_ready,
            "state": self.execution_state,
            "components": len(self.components),
            "has_real_interpreter": INTERPRETER_READY
        }

class IntegratedMLIDE:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è IDE —Å ML –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º"""
    
    def __init__(self):
        print("üöÄ Starting AnamorphX IDE - Integrated Interpreter Edition")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        self.interpreter = AnamorphXInterpreter()
        print(f"ü§ñ Interpreter status: {self.interpreter.get_status()}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("AnamorphX IDE - Integrated Interpreter Edition")
        self.root.geometry("1400x900")
        self.root.configure(bg='#2b2b2b')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_file = None
        self.is_modified = False
        self.execution_thread = None
        
        # ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) - –ü–ï–†–ï–î setup_ui
        self.setup_basic_ml()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.setup_ui()
        
        print("‚úÖ IDE initialized successfully")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ú–µ–Ω—é
        self.create_menu()
        
        # –¢—É–ª–±–∞—Ä
        self.create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_main_interface()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
    
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # File menu
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="New", command=self.new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="Open", command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="Save", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="Save As", command=self.save_file_as)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        
        # Run menu
        run_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Run", menu=run_menu)
        run_menu.add_command(label="Run Code", command=self.run_code, accelerator="F5")
        run_menu.add_command(label="Debug", command=self.debug_code, accelerator="F9")
        run_menu.add_command(label="Stop", command=self.stop_execution, accelerator="Ctrl+C")
        
        # Tools menu
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Tools", menu=tools_menu)
        tools_menu.add_command(label="ML Analysis", command=self.run_ml_analysis)
        tools_menu.add_command(label="Variables", command=self.show_variables)
        tools_menu.add_command(label="Interpreter Status", command=self.show_interpreter_status)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–ª–±–∞—Ä–∞"""
        toolbar = ttk.Frame(self.root)
        toolbar.pack(side=tk.TOP, fill=tk.X, padx=2, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
        ttk.Button(toolbar, text="üìÑ New", command=self.new_file).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìÇ Open", command=self.open_file).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üíæ Save", command=self.save_file).pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ttk.Button(toolbar, text="‚ñ∂Ô∏è Run", command=self.run_code).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üêõ Debug", command=self.debug_code).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="‚èπÔ∏è Stop", command=self.stop_execution).pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # ML –∫–Ω–æ–ø–∫–∏
        ttk.Button(toolbar, text="ü§ñ ML Analysis", command=self.run_ml_analysis).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìä Variables", command=self.show_variables).pack(side=tk.LEFT, padx=2)
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        status = self.interpreter.get_status()
        status_text = "‚úÖ READY" if status["ready"] else "‚ö†Ô∏è PARTIAL"
        self.interpreter_status_label = ttk.Label(toolbar, text=f"Interpreter: {status_text}")
        self.interpreter_status_label.pack(side=tk.RIGHT, padx=10)
    
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
        left_frame = ttk.Frame(main_paned, width=250)
        main_paned.add(left_frame, weight=1)
        self.create_file_explorer(left_frame)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        center_paned = ttk.PanedWindow(main_paned, orient=tk.VERTICAL)
        main_paned.add(center_paned, weight=3)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä
        editor_frame = ttk.Frame(center_paned)
        center_paned.add(editor_frame, weight=2)
        self.create_editor(editor_frame)
        
        # –ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞
        console_frame = ttk.Frame(center_paned)
        center_paned.add(console_frame, weight=1)
        self.create_console(console_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        right_frame = ttk.Frame(main_paned, width=300)
        main_paned.add(right_frame, weight=1)
        self.create_tools_panel(right_frame)
    
    def create_file_explorer(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        ttk.Label(parent, text="üìÅ Project Explorer").pack(pady=5)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.file_tree = ttk.Treeview(parent)
        self.file_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        self.populate_file_tree()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.file_tree.bind("<Double-1>", self.on_file_double_click)
    
    def create_editor(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
        ttk.Label(parent, text="üìù AnamorphX Editor").pack(pady=5)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
        editor_container = ttk.Frame(parent)
        editor_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        self.line_numbers = Text(editor_container, width=4, padx=3, takefocus=0,
                                border=0, state='disabled', wrap='none',
                                bg='#3c3c3c', fg='#858585', font=('Consolas', 10))
        self.line_numbers.pack(side=tk.LEFT, fill=tk.Y)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.editor = Text(editor_container, wrap='none', undo=True,
                          bg='#2b2b2b', fg='#f8f8f2', insertbackground='white',
                          font=('Consolas', 11), selectbackground='#44475a')
        self.editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(editor_container, orient=tk.VERTICAL, command=self.sync_scroll)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.editor.config(yscrollcommand=v_scrollbar.set)
        
        # –°–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        self.editor.bind('<KeyRelease>', self.on_text_change)
        self.editor.bind('<Button-1>', self.on_text_change)
        self.editor.bind('<MouseWheel>', self.sync_scroll)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞
        self.load_sample_code()
    
    def create_console(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∞"""
        ttk.Label(parent, text="üíª Output Console").pack(pady=5)
        
        # –ö–æ–Ω—Å–æ–ª—å
        self.console = Text(parent, height=10, bg='#1e1e1e', fg='#00ff00',
                           font=('Consolas', 10), state='disabled')
        self.console.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_scroll = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.console.yview)
        console_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.console.config(yscrollcommand=console_scroll.set)
    
    def create_tools_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        notebook = ttk.Notebook(parent)
        notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        vars_frame = ttk.Frame(notebook)
        notebook.add(vars_frame, text="üìä Variables")
        self.create_variables_panel(vars_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞
        ml_frame = ttk.Frame(notebook)
        notebook.add(ml_frame, text="ü§ñ ML Analysis")
        self.create_ml_panel(ml_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ttk.Frame(notebook)
        notebook.add(status_frame, text="‚öôÔ∏è Status")
        self.create_status_panel(status_frame)
    
    def create_variables_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        ttk.Label(parent, text="Program Variables").pack(pady=5)
        
        # –î–µ—Ä–µ–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.vars_tree = ttk.Treeview(parent, columns=('Value', 'Type'), show='tree headings')
        self.vars_tree.heading('#0', text='Variable')
        self.vars_tree.heading('Value', text='Value')
        self.vars_tree.heading('Type', text='Type')
        self.vars_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def create_ml_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ ML –ø–∞–Ω–µ–ª–∏"""
        ttk.Label(parent, text="ML Analysis Results").pack(pady=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ML –∞–Ω–∞–ª–∏–∑–∞
        self.ml_results = Text(parent, height=15, bg='#2b2b2b', fg='#f8f8f2',
                              font=('Consolas', 9), state='disabled')
        self.ml_results.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def create_status_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        ttk.Label(parent, text="System Status").pack(pady=5)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.status_text = Text(parent, height=15, bg='#2b2b2b', fg='#f8f8f2',
                               font=('Consolas', 9), state='disabled')
        self.status_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.update_status_panel()
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        self.status_label = ttk.Label(self.status_bar, text="Ready")
        self.status_label.pack(side=tk.LEFT, padx=5)
        
        self.cursor_label = ttk.Label(self.status_bar, text="Line: 1, Col: 1")
        self.cursor_label.pack(side=tk.RIGHT, padx=5)
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.new_file())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<F5>', lambda e: self.run_code())
        self.root.bind('<F9>', lambda e: self.debug_code())
        self.root.bind('<Control-c>', lambda e: self.stop_execution())
    
    def setup_basic_ml(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ ML"""
        self.ml_enabled = HAS_FULL_ML
        if self.ml_enabled:
            print("ü§ñ ML integration enabled")
        else:
            print("‚ö†Ô∏è ML integration disabled (libraries not available)")
    
    # –ú–µ—Ç–æ–¥—ã —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    def new_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if self.ask_save_changes():
            self.editor.delete(1.0, tk.END)
            self.current_file = None
            self.is_modified = False
            self.update_title()
            self.log_to_console("üìÑ New file created")
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞"""
        if self.ask_save_changes():
            file_path = filedialog.askopenfilename(
                title="Open AnamorphX File",
                filetypes=[("AnamorphX files", "*.anamorph"), ("All files", "*.*")]
            )
            if file_path:
                self.load_file(file_path)
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if self.current_file:
            self.save_to_file(self.current_file)
        else:
            self.save_file_as()
    
    def save_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫"""
        file_path = filedialog.asksaveasfilename(
            title="Save AnamorphX File",
            defaultextension=".anamorph",
            filetypes=[("AnamorphX files", "*.anamorph"), ("All files", "*.*")]
        )
        if file_path:
            self.save_to_file(file_path)
    
    def load_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.editor.delete(1.0, tk.END)
            self.editor.insert(1.0, content)
            self.current_file = file_path
            self.is_modified = False
            self.update_title()
            self.update_line_numbers()
            self.log_to_console(f"üìÇ Loaded: {os.path.basename(file_path)}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load file: {e}")
    
    def save_to_file(self, file_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            content = self.editor.get(1.0, tk.END + '-1c')
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.current_file = file_path
            self.is_modified = False
            self.update_title()
            self.log_to_console(f"üíæ Saved: {os.path.basename(file_path)}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save file: {e}")
    
    def ask_save_changes(self):
        """–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.is_modified:
            result = messagebox.askyesnocancel("Save Changes", "Do you want to save changes?")
            if result is True:
                self.save_file()
                return True
            elif result is False:
                return True
            else:
                return False
        return True
    
    # –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    def run_code(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–¥–∞"""
        code = self.editor.get(1.0, tk.END + '-1c')
        if not code.strip():
            self.log_to_console("‚ö†Ô∏è No code to execute")
            return
        
        self.log_to_console("üöÄ Starting execution...")
        self.status_label.config(text="Running...")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.execution_thread = threading.Thread(target=self.execute_code_thread, args=(code,))
        self.execution_thread.daemon = True
        self.execution_thread.start()
    
    def execute_code_thread(self, code):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            start_time = time.time()
            result = self.interpreter.execute_code(code)
            execution_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.handle_execution_result, result, execution_time)
            
        except Exception as e:
            error_msg = f"Execution error: {str(e)}"
            self.root.after(0, self.handle_execution_error, error_msg)
    
    def handle_execution_result(self, result, execution_time):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if result["success"]:
            self.log_to_console(f"‚úÖ Execution completed in {execution_time:.3f}s")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if "output" in result and result["output"]:
                for line in result["output"]:
                    self.log_to_console(line)
            
            if "result" in result:
                self.log_to_console(f"üìÑ Result: {result['result']}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if "variables" in result:
                self.update_variables_display(result["variables"])
            
            # –û—Ç–º–µ—Ç–∫–∞ –æ —Å–∏–º—É–ª—è—Ü–∏–∏
            if result.get("simulated", False):
                self.log_to_console("‚ÑπÔ∏è Note: Execution was simulated")
        else:
            self.log_to_console(f"‚ùå Execution failed: {result.get('error', 'Unknown error')}")
            if "traceback" in result:
                self.log_to_console("üìã Traceback:")
                for line in result["traceback"].split('\n'):
                    if line.strip():
                        self.log_to_console(f"  {line}")
        
        self.status_label.config(text="Ready")
    
    def handle_execution_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.log_to_console(f"‚ùå {error_msg}")
        self.status_label.config(text="Error")
    
    def debug_code(self):
        """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞"""
        self.log_to_console("üêõ Debug mode not implemented yet")
    
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if self.execution_thread and self.execution_thread.is_alive():
            self.log_to_console("‚èπÔ∏è Stopping execution...")
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
        else:
            self.log_to_console("‚ÑπÔ∏è No execution to stop")
    
    # ML –º–µ—Ç–æ–¥—ã
    def run_ml_analysis(self):
        """–ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞"""
        code = self.editor.get(1.0, tk.END + '-1c')
        if not code.strip():
            self.log_to_console("‚ö†Ô∏è No code to analyze")
            return
        
        self.log_to_console("ü§ñ Running ML analysis...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
        analysis_results = self.analyze_code_simple(code)
        self.display_ml_results(analysis_results)
    
    def analyze_code_simple(self, code):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
        results = []
        lines = code.split('\n')
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line:
                continue
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if 'synap' in line and '=' in line:
                results.append(f"Line {i}: Variable declaration detected")
            elif 'network' in line:
                results.append(f"Line {i}: Neural network definition detected")
            elif 'function' in line:
                results.append(f"Line {i}: Function definition detected")
            elif 'print' in line:
                results.append(f"Line {i}: Output statement detected")
        
        return results
    
    def display_ml_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ML –∞–Ω–∞–ª–∏–∑–∞"""
        self.ml_results.config(state='normal')
        self.ml_results.delete(1.0, tk.END)
        
        if results:
            for result in results:
                self.ml_results.insert(tk.END, f"üîç {result}\n")
        else:
            self.ml_results.insert(tk.END, "No analysis results available.\n")
        
        self.ml_results.config(state='disabled')
        self.log_to_console(f"ü§ñ ML analysis completed: {len(results)} findings")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def show_variables(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        variables = self.interpreter.get_variables()
        self.update_variables_display(variables)
        self.log_to_console(f"üìä Variables updated: {len(variables)} items")
    
    def show_interpreter_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        status = self.interpreter.get_status()
        self.log_to_console("‚öôÔ∏è Interpreter Status:")
        self.log_to_console(f"  Ready: {status['ready']}")
        self.log_to_console(f"  State: {status['state']}")
        self.log_to_console(f"  Components: {status['components']}/6")
        self.log_to_console(f"  Real Interpreter: {status['has_real_interpreter']}")
    
    def update_variables_display(self, variables):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.vars_tree.get_children():
            self.vars_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for name, value in variables.items():
            var_type = type(value).__name__
            self.vars_tree.insert('', 'end', text=name, values=(str(value), var_type))
    
    def update_status_panel(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        status_info = [
            "üöÄ AnamorphX IDE - Integrated Interpreter Edition",
            "",
            "üìä System Status:",
            f"  Interpreter Ready: {self.interpreter.is_ready}",
            f"  Components Loaded: {len(self.interpreter.components)}/6",
            f"  ML Integration: {self.ml_enabled}",
            "",
            "üîß Available Components:",
        ]
        
        for name, component in self.interpreter.components.items():
            status_info.append(f"  ‚úÖ {name}")
        
        missing_components = set(["ExecutionEngine", "ASTInterpreter", "TypeSystem", 
                                "ErrorHandler", "MemoryManager", "Commands"]) - set(self.interpreter.components.keys())
        
        for name in missing_components:
            status_info.append(f"  ‚ùå {name}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        self.status_text.config(state='normal')
        self.status_text.delete(1.0, tk.END)
        self.status_text.insert(1.0, '\n'.join(status_info))
        self.status_text.config(state='disabled')
    
    def populate_file_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
        examples = [
            "example1.anamorph",
            "neural_network.anamorph", 
            "simple_program.anamorph",
            "ml_training.anamorph"
        ]
        
        for example in examples:
            self.file_tree.insert('', 'end', text=example, values=(example,))
    
    def on_file_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É"""
        selection = self.file_tree.selection()
        if selection:
            item = self.file_tree.item(selection[0])
            filename = item['text']
            self.log_to_console(f"üìÇ Selected: {filename}")
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    
    def load_sample_code(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞"""
        sample_code = '''// AnamorphX Neural Network Example
network SimpleClassifier {
    neuron InputLayer {
        activation: linear
        weights: [0.5, 0.3, 0.2]
        bias: 0.1
    }
    
    neuron HiddenLayer {
        activation: relu
        weights: random_normal(0, 0.1)
        dropout: 0.2
    }
    
    neuron OutputLayer {
        activation: softmax
        weights: random_normal(0, 0.05)
    }
    
    optimizer: adam
    learning_rate: 0.001
    loss: crossentropy
}

function main() {
    synap x = 42
    synap y = 3.14
    synap result = x + y
    
    print("Hello from AnamorphX!")
    print("Result:", result)
    
    // Train the network
    network.train()
}
'''
        self.editor.insert(1.0, sample_code)
        self.update_line_numbers()
    
    def on_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        self.is_modified = True
        self.update_title()
        self.update_line_numbers()
        self.update_cursor_position()
    
    def update_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        title = "AnamorphX IDE - Integrated Interpreter Edition"
        if self.current_file:
            title += f" - {os.path.basename(self.current_file)}"
        if self.is_modified:
            title += " *"
        self.root.title(title)
    
    def update_line_numbers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""
        content = self.editor.get(1.0, tk.END)
        lines = content.split('\n')
        line_numbers = '\n'.join(str(i) for i in range(1, len(lines)))
        
        self.line_numbers.config(state='normal')
        self.line_numbers.delete(1.0, tk.END)
        self.line_numbers.insert(1.0, line_numbers)
        self.line_numbers.config(state='disabled')
    
    def update_cursor_position(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        cursor_pos = self.editor.index(tk.INSERT)
        line, col = cursor_pos.split('.')
        self.cursor_label.config(text=f"Line: {line}, Col: {int(col)+1}")
    
    def sync_scroll(self, *args):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        self.line_numbers.yview_moveto(args[0])
    
    def log_to_console(self, message):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        self.console.config(state='normal')
        timestamp = time.strftime("%H:%M:%S")
        self.console.insert(tk.END, f"[{timestamp}] {message}\n")
        self.console.see(tk.END)
        self.console.config(state='disabled')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ IDE"""
        self.log_to_console("üöÄ AnamorphX IDE started successfully!")
        self.log_to_console(f"ü§ñ Interpreter status: {'‚úÖ READY' if self.interpreter.is_ready else '‚ö†Ô∏è PARTIAL'}")
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Starting AnamorphX IDE - Integrated Interpreter Edition")
    print("=" * 60)
    
    try:
        ide = IntegratedMLIDE()
        ide.run()
    except Exception as e:
        print(f"‚ùå Failed to start IDE: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main() 