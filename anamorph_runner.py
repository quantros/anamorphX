#!/usr/bin/env python3
"""
üß† AnamorphX Neural Code Runner
–†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—É—Å–∫ AnamorphX —Ñ–∞–π–ª–æ–≤ —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º
"""

import sys
import os
import time
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, 'src')
sys.path.insert(0, '.')

def run_anamorph_file(filename):
    """–†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ AnamorphX"""
    print(f"üß† AnamorphX Neural Runner")
    print(f"üöÄ Running: {filename}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return False
    
    # –ß—Ç–µ–Ω–∏–µ –∫–æ–¥–∞
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        print(f"üìù –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(source_code)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìè –°—Ç—Ä–æ–∫: {len(source_code.splitlines())}")
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    start_time = time.time()
    
    try:
        # 1. –ü–ê–†–°–ò–ù–ì
        print("üîç 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥–∞...")
        from parser.parser import AnamorphParser
        
        parser = AnamorphParser(debug=True)
        ast = parser.parse(source_code, filename)
        
        parse_time = time.time() - start_time
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {parse_time:.3f}—Å")
        print(f"üìä AST —É–∑–ª–æ–≤: {len(ast.body) if hasattr(ast, 'body') and ast.body else 0}")
        print()
        
        # 2. –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø  
        print("‚ö° 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞...")
        from interpreter.ast_interpreter import ASTInterpreter
        
        interpreter = ASTInterpreter()
        result = interpreter.interpret(ast)
        
        exec_time = time.time() - start_time - parse_time
        total_time = time.time() - start_time
        
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {exec_time:.3f}—Å")
        print()
        
        # 3. –†–ï–ó–£–õ–¨–¢–ê–¢–´
        print("üìã 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}—Å")
        print(f"üîç –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_time:.3f}—Å")
        print(f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time:.3f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        if hasattr(interpreter, 'get_execution_summary'):
            summary = interpreter.get_execution_summary()
            print(f"üìä –£–∑–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {summary.get('nodes_executed', 0)}")
            print(f"üß† –ù–µ–π—Ä–æ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(interpreter.state.neurons)}")
            print(f"üîó –°–∏–Ω–∞–ø—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(interpreter.state.synapses)}")
            print(f"üî¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(interpreter.state.variables)}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if hasattr(interpreter, 'state') and interpreter.state.variables:
            print("\nüî¢ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            for name, value in list(interpreter.state.variables.items())[:10]:
                print(f"  {name} = {value}")
            if len(interpreter.state.variables) > 10:
                print(f"  ... –∏ –µ—â–µ {len(interpreter.state.variables) - 10}")
        
        # –ù–µ–π—Ä–æ–Ω—ã
        if hasattr(interpreter, 'state') and interpreter.state.neurons:
            print(f"\nüß† –ù–µ–π—Ä–æ–Ω—ã ({len(interpreter.state.neurons)}):")
            for name, neuron in list(interpreter.state.neurons.items())[:5]:
                print(f"  {name}: {neuron}")
            if len(interpreter.state.neurons) > 5:
                print(f"  ... –∏ –µ—â–µ {len(interpreter.state.neurons) - 5}")
        
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return True
        
    except Exception as e:
        error_time = time.time() - start_time
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –∑–∞ {error_time:.3f}—Å:")
        print(f"üí• {type(e).__name__}: {e}")
        
        if "Import" in str(e) or "module" in str(e).lower():
            print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ")
            print("  - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        
        if "--debug" in sys.argv:
            print("\nüìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
            traceback.print_exc()
        
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 anamorph_runner.py <file.anamorph> [--debug]")
        print()
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ Project/:")
        try:
            files = [f for f in os.listdir('Project/') if f.endswith('.anamorph')]
            for f in sorted(files):
                size = os.path.getsize(f'Project/{f}')
                print(f"  üìÑ {f} ({size:,} –±–∞–π—Ç)")
        except FileNotFoundError:
            print("  ‚ùå –ü–∞–ø–∫–∞ Project/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print()
        print("üí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 anamorph_runner.py Project/web_server.anamorph")
        print("  python3 anamorph_runner.py Project/config.anamorph --debug")
        return 1
    
    filename = sys.argv[1]
    success = run_anamorph_file(filename)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 