#!/usr/bin/env python3
"""
üß† Simple AnamorphX Runner
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import sys
import os
import time
import re

def count_anamorph_constructs(code):
    """–ü–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π AnamorphX –≤ –∫–æ–¥–µ"""
    constructs = {
        'neurons': len(re.findall(r'\bneuro\s+', code, re.IGNORECASE)),
        'synapses': len(re.findall(r'\bsynap\s+', code, re.IGNORECASE)),
        'pulses': len(re.findall(r'\bpulse\s+', code, re.IGNORECASE)),
        'networks': len(re.findall(r'network\s*\{', code, re.IGNORECASE)),
        'variables': len(re.findall(r'\w+\s*=', code)),
        'functions': len(re.findall(r'function\s+\w+', code, re.IGNORECASE)),
        'classes': len(re.findall(r'class\s+\w+', code, re.IGNORECASE)),
        'config_blocks': len(re.findall(r'\w+\s*:\s*\{', code)),
    }
    return constructs

def analyze_neural_network(code):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –≤ –∫–æ–¥–µ"""
    network_info = {
        'layers': [],
        'activations': [],
        'connections': []
    }
    
    # –ü–æ–∏—Å–∫ —Å–ª–æ–µ–≤ –∏ –Ω–µ–π—Ä–æ–Ω–æ–≤
    neuron_matches = re.findall(r'neuro\s+"([^"]+)"\s*\{([^}]+)\}', code, re.IGNORECASE)
    for name, config in neuron_matches:
        layer_info = {'name': name}
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if 'units:' in config:
            units_match = re.search(r'units:\s*(\d+)', config)
            if units_match:
                layer_info['units'] = int(units_match.group(1))
        
        if 'activation:' in config:
            activation_match = re.search(r'activation:\s*"([^"]+)"', config)
            if activation_match:
                layer_info['activation'] = activation_match.group(1)
                network_info['activations'].append(activation_match.group(1))
        
        network_info['layers'].append(layer_info)
    
    # –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π
    synapse_matches = re.findall(r'synap\s+"([^"]+)"\s*->\s*"([^"]+)"', code, re.IGNORECASE)
    for source, target in synapse_matches:
        network_info['connections'].append({'from': source, 'to': target})
    
    return network_info

def simulate_execution(code, filename):
    """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ AnamorphX"""
    print(f"üß† AnamorphX Simple Runner")
    print(f"üöÄ Simulating: {filename}")
    print("=" * 60)
    
    start_time = time.time()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    constructs = count_anamorph_constructs(code)
    network = analyze_neural_network(code)
    
    print("üîç 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:")
    print(f"  üìÑ –†–∞–∑–º–µ—Ä: {len(code):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  üìè –°—Ç—Ä–æ–∫: {len(code.splitlines()):,}")
    print(f"  üß† –ù–µ–π—Ä–æ–Ω–æ–≤: {constructs['neurons']}")
    print(f"  üîó –°–∏–Ω–∞–ø—Å–æ–≤: {constructs['synapses']}")
    print(f"  ‚ö° –ò–º–ø—É–ª—å—Å–æ–≤: {constructs['pulses']}")
    print(f"  üåê –°–µ—Ç–µ–π: {constructs['networks']}")
    print(f"  üî¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {constructs['variables']}")
    print()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("‚öôÔ∏è  2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    time.sleep(0.1)
    
    if network['layers']:
        print(f"  üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        total_units = 0
        for layer in network['layers']:
            units = layer.get('units', 1)
            activation = layer.get('activation', 'linear')
            total_units += units
            print(f"    - {layer['name']}: {units} –Ω–µ–π—Ä–æ–Ω–æ–≤, {activation}")
        
        print(f"  üìä –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_units:,}")
    
    if network['connections']:
        print(f"  üîó –°–≤—è–∑–∏ —Å–µ—Ç–∏:")
        for conn in network['connections'][:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
            print(f"    - {conn['from']} ‚Üí {conn['to']}")
        if len(network['connections']) > 5:
            print(f"    ... –∏ –µ—â–µ {len(network['connections']) - 5}")
    
    print()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("‚ö° 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π:")
    operations = 0
    
    lines = code.splitlines()
    for i, line in enumerate(lines, 1):
        line = line.strip()
        if not line or line.startswith('#') or line.startswith('//'):
            continue
        
        operations += 1
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        if operations % 50 == 0:
            progress = (i / len(lines)) * 100
            print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({operations} –æ–ø–µ—Ä–∞—Ü–∏–π)")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        if operations % 100 == 0:
            time.sleep(0.01)
    
    exec_time = time.time() - start_time
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
    print()
    
    print("üìã 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"  üîÑ –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {operations/exec_time:.0f}")
    
    if network['layers']:
        print(f"  üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
        print(f"  üìä –°–ª–æ–µ–≤: {len(network['layers'])}")
        print(f"  üîó –°–≤—è–∑–µ–π: {len(network['connections'])}")
        
        if network['activations']:
            unique_activations = list(set(network['activations']))
            print(f"  ‚ö° –§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {', '.join(unique_activations)}")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    if 'web_server' in filename.lower():
        print()
        print("üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ:")
        
        if 'port' in code.lower():
            port_match = re.search(r'port[:\s]*(\d+)', code, re.IGNORECASE)
            if port_match:
                print(f"  üîå –ü–æ—Ä—Ç: {port_match.group(1)}")
        
        if 'localhost' in code.lower() or '127.0.0.1' in code:
            print(f"  üè† –•–æ—Å—Ç: localhost")
        
        if 'api' in code.lower():
            print(f"  üì° API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        if 'security' in code.lower():
            print(f"  üîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞")
        
        print(f"  üì∫ –°—Ç–∞—Ç—É—Å: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    print()
    print(f"‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 simple_runner.py <file.anamorph>")
        print()
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ Project/:")
        try:
            files = [f for f in os.listdir('Project/') if f.endswith('.anamorph')]
            for f in sorted(files):
                size = os.path.getsize(f'Project/{f}')
                print(f"  üìÑ {f} ({size:,} –±–∞–π—Ç)")
        except FileNotFoundError:
            print("  ‚ùå –ü–∞–ø–∫–∞ Project/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print()
        print("üí° –ü—Ä–∏–º–µ—Ä: python3 simple_runner.py Project/web_server.anamorph")
        return 1
    
    filename = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return 1
    
    # –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            code = f.read()
        
        success = simulate_execution(code, filename)
        return 0 if success else 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 