#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–º–∞–Ω–¥ AnamorphX
"""

import os
import re
from pathlib import Path

def fix_imports_in_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
    print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        backup_path = str(file_path) + '.backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        original_content = content
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ExecutionContext
        content = re.sub(
            r'from \.commands import (.+), ExecutionContext',
            r'from .commands import \1\nfrom .runtime import ExecutionContext',
            content
        )
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ ExecutionContext
        content = re.sub(
            r'from \.commands import ExecutionContext',
            r'from .runtime import ExecutionContext',
            content
        )
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ commands.py
        if 'from .commands import' in content and 'NeuralEntity' not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç NeuralEntity –∏ SynapseConnection –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'StructuralCommand' in content:
                content = re.sub(
                    r'from \.commands import StructuralCommand',
                    r'from .commands import StructuralCommand, NeuralEntity, SynapseConnection',
                    content
                )
        
        # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
        command_type_imports = {
            'StructuralCommand': 'StructuralCommand, CommandResult, CommandError, NeuralEntity, SynapseConnection',
            'FlowControlCommand': 'FlowControlCommand, CommandResult, CommandError',
            'SecurityCommand': 'SecurityCommand, CommandResult, CommandError',
            'DataManagementCommand': 'DataManagementCommand, CommandResult, CommandError',
            'NetworkCommand': 'CloudNetworkCommand, CommandResult, CommandError',
            'MonitoringCommand': 'Command, CommandResult, CommandError',
            'MLOperationsCommand': 'MachineLearningCommand, CommandResult, CommandError',
            'SystemCommand': 'Command, CommandResult, CommandError',
            'UtilityCommand': 'Command, CommandResult, CommandError',
            'DebuggingCommand': 'Command, CommandResult, CommandError',
            'ExportCommand': 'Command, CommandResult, CommandError'
        }
        
        for base_class, full_import in command_type_imports.items():
            if base_class in content:
                pattern = rf'from \.commands import [^,\n]*{base_class}[^,\n]*'
                replacement = f'from .commands import {full_import}'
                content = re.sub(pattern, replacement, content)
        
        # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if 'NetworkCommand' in content:
            content = content.replace('NetworkCommand', 'CloudNetworkCommand')
        
        if 'MLOperationsCommand' in content:
            content = content.replace('MLOperationsCommand', 'MachineLearningCommand')
        
        # 6. –î–æ–±–∞–≤–ª—è–µ–º try-except –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'from .commands import' in content and 'try:' not in content[:500]:
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
            import_match = re.search(r'from \.commands import ([^\n]+)', content)
            if import_match:
                import_line = import_match.group(0)
                
                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ try-except –±–ª–æ–∫
                try_except_block = f"""# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    {import_line}
except ImportError as e:
    print(f"Warning: Could not import commands: {{e}}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class CommandResult:
        def __init__(self, success=True, message="", data=None, error=None):
            self.success = success
            self.message = message
            self.data = data
            self.error = error
    
    class CommandError(Exception):
        def __init__(self, code="", message=""):
            self.code = code
            self.message = message
    
    class Command:
        def __init__(self, name="", description="", parameters=None):
            self.name = name
            self.description = description
            self.parameters = parameters or {{}}
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∫–æ–º–∞–Ω–¥
    StructuralCommand = Command
    FlowControlCommand = Command
    SecurityCommand = Command
    DataManagementCommand = Command
    CloudNetworkCommand = Command
    MachineLearningCommand = Command
    
    class NeuralEntity:
        def __init__(self, name="", entity_type="", **kwargs):
            self.name = name
            self.entity_type = entity_type
    
    class SynapseConnection:
        def __init__(self, source="", target="", weight=1.0, **kwargs):
            self.source = source
            self.target = target
            self.weight = weight

try:
    from .runtime import ExecutionContext
except ImportError:
    class ExecutionContext:
        def __init__(self):
            self.neural_entities = {{}}
            self.synapses = {{}}
            self.variables = {{}}"""
                
                content = content.replace(import_line, try_except_block)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {file_path}")
            return True
        else:
            print(f"  ‚ÑπÔ∏è –ò–º–ø–æ—Ä—Ç—ã —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ {file_path}")
            # –£–¥–∞–ª—è–µ–º backup –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
            os.remove(backup_path)
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–º–∞–Ω–¥ AnamorphX")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥
    commands_dir = Path("src/interpreter")
    command_files = list(commands_dir.glob("*_commands.py"))
    
    if not command_files:
        print("‚ùå –§–∞–π–ª—ã –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(command_files)} —Ñ–∞–π–ª–æ–≤ –∫–æ–º–∞–Ω–¥:")
    for file_path in command_files:
        print(f"  - {file_path}")
    
    print("\n–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    fixed_count = 0
    for file_path in command_files:
        if fix_imports_in_file(file_path):
            fixed_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(command_files)}")
    print(f"  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(command_files) - fixed_count}")
    
    if fixed_count > 0:
        print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup")
    else:
        print(f"\n‚ÑπÔ∏è –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É–∂–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏")

if __name__ == "__main__":
    main() 