"""
–í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ AnamorphX —Å IDE

–ú–æ–¥—É–ª—å –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import tkinter as tk
from tkinter import ttk, Canvas
import time
import math
import random
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥
try:
    from src.interpreter.commands import CommandResult, ExecutionContext
    from src.interpreter.structural_commands import STRUCTURAL_COMMANDS
    from src.interpreter.flow_control_commands import FLOW_CONTROL_COMMANDS
    from src.interpreter.all_commands_registry import get_command_registry
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    class CommandResult:
        def __init__(self, success=True, message="", data=None):
            self.success = success
            self.message = message
            self.data = data or {}
    
    class ExecutionContext:
        def __init__(self):
            self.neural_entities = {}
            self.synapses = {}
    
    STRUCTURAL_COMMANDS = []
    FLOW_CONTROL_COMMANDS = []
    
    def get_command_registry():
        return None


class VisualizationType(Enum):
    """–¢–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    NEURAL_NETWORK = "neural_network"
    FLOW_DIAGRAM = "flow_diagram"
    COMMAND_TRACE = "command_trace"
    PERFORMANCE_GRAPH = "performance_graph"
    SECURITY_STATUS = "security_status"


@dataclass
class VisualNode:
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    id: str
    name: str
    x: float
    y: float
    radius: float = 20
    color: str = "#4CAF50"
    activation_level: float = 0.0
    node_type: str = "neuron"
    connections: List[str] = field(default_factory=list)
    last_pulse_time: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class VisualConnection:
    """–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
    id: str
    source_id: str
    target_id: str
    weight: float = 1.0
    color: str = "#2196F3"
    thickness: float = 2.0
    animated: bool = False
    last_signal_time: float = 0.0
    signal_strength: float = 0.0


@dataclass
class CommandVisualization:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    command_name: str
    timestamp: float
    visual_effects: List[str] = field(default_factory=list)
    affected_nodes: List[str] = field(default_factory=list)
    animation_duration: float = 1.0
    status: str = "pending"  # pending, running, completed, failed


class VisualCommandIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, ide_instance=None):
        self.ide = ide_instance
        self.canvas = None
        self.visual_nodes: Dict[str, VisualNode] = {}
        self.visual_connections: Dict[str, VisualConnection] = {}
        self.command_visualizations: List[CommandVisualization] = []
        self.animation_queue: List[Dict] = []
        self.is_animating = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.canvas_width = 800
        self.canvas_height = 600
        self.node_spacing = 100
        self.animation_speed = 50  # –º—Å –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'neuron': '#4CAF50',
            'synapse': '#2196F3',
            'pulse': '#FF9800',
            'error': '#F44336',
            'success': '#8BC34A',
            'warning': '#FFC107',
            'inactive': '#9E9E9E'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.setup_command_hooks()
    
    def setup_command_hooks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—É–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        self.command_hooks = {
            'neuro': self.visualize_neuro_command,
            'synap': self.visualize_synap_command,
            'pulse': self.visualize_pulse_command,
            'bind': self.visualize_bind_command,
            'cluster': self.visualize_cluster_command,
            'expand': self.visualize_expand_command,
            'contract': self.visualize_contract_command,
            'morph': self.visualize_morph_command,
            'evolve': self.visualize_evolve_command,
            'prune': self.visualize_prune_command,
            'forge': self.visualize_forge_command,
            'drift': self.visualize_drift_command,
            'echo': self.visualize_echo_command,
            'reflect': self.visualize_reflect_command,
            'absorb': self.visualize_absorb_command,
            'diffuse': self.visualize_diffuse_command,
            'merge': self.visualize_merge_command,
            'split': self.visualize_split_command,
            'loop': self.visualize_loop_command,
            'halt': self.visualize_halt_command
        }
    
    def set_canvas(self, canvas: Canvas):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ canvas –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.canvas = canvas
        self.canvas_width = canvas.winfo_reqwidth() or 800
        self.canvas_height = canvas.winfo_reqheight() or 600
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π canvas
        self.canvas.bind("<Button-1>", self.on_canvas_click)
        self.canvas.bind("<Button-3>", self.on_canvas_right_click)
        self.canvas.bind("<Motion>", self.on_canvas_motion)
    
    def execute_command_with_visualization(self, command_name: str, context: ExecutionContext, **kwargs) -> CommandResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã
        viz = CommandVisualization(
            command_name=command_name,
            timestamp=time.time(),
            status="running"
        )
        self.command_visualizations.append(viz)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            registry = get_command_registry()
            if registry:
                command = registry.get_command(command_name)
                if command:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    result = command.execute(context, **kwargs)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if command_name in self.command_hooks:
                        self.command_hooks[command_name](result, context, **kwargs)
                    
                    viz.status = "completed" if result.success else "failed"
                    return result
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = CommandResult(success=False, message=f"Command {command_name} not found")
            viz.status = "failed"
            return result
            
        except Exception as e:
            viz.status = "failed"
            return CommandResult(success=False, message=f"Error executing {command_name}: {str(e)}")
    
    def visualize_neuro_command(self, result: CommandResult, context: ExecutionContext, **kwargs):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã neuro"""
        if not result.success or not self.canvas:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        name = kwargs.get('name', f'neuron_{len(self.visual_nodes)}')
        node_type = kwargs.get('neuron_type', 'basic')
        activation = kwargs.get('activation', 'relu')
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª
        x, y = self.get_next_node_position()
        
        visual_node = VisualNode(
            id=name,
            name=name,
            x=x,
            y=y,
            radius=25,
            color=self.colors['neuron'],
            node_type=node_type,
            metadata={
                'activation': activation,
                'created_at': time.time()
            }
        )
        
        self.visual_nodes[name] = visual_node
        
        # –†–∏—Å—É–µ–º —É–∑–µ–ª –Ω–∞ canvas
        self.draw_node(visual_node)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.animate_node_creation(visual_node)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if self.ide:
            self.ide.log_to_console(f"üß† Visual: Created neuron '{name}' at ({x:.0f}, {y:.0f})")
    
    def visualize_synap_command(self, result: CommandResult, context: ExecutionContext, **kwargs):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã synap"""
        if not result.success or not self.canvas:
            return
        
        source = kwargs.get('source')
        target = kwargs.get('target')
        weight = kwargs.get('weight', 1.0)
        
        if source in self.visual_nodes and target in self.visual_nodes:
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
            connection_id = f"{source}->{target}"
            
            visual_connection = VisualConnection(
                id=connection_id,
                source_id=source,
                target_id=target,
                weight=weight,
                color=self.colors['synapse'],
                thickness=max(1, abs(weight) * 3)
            )
            
            self.visual_connections[connection_id] = visual_connection
            
            # –†–∏—Å—É–µ–º —Å–≤—è–∑—å
            self.draw_connection(visual_connection)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏
            self.animate_connection_creation(visual_connection)
            
            if self.ide:
                self.ide.log_to_console(f"üîó Visual: Created synapse {source} -> {target} (weight: {weight})")
    
    def visualize_pulse_command(self, result: CommandResult, context: ExecutionContext, **kwargs):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã pulse"""
        if not result.success or not self.canvas:
            return
        
        target = kwargs.get('target', 'broadcast')
        intensity = kwargs.get('intensity', 1.0)
        
        if target == 'broadcast':
            # –ü—É–ª—å—Å –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º
            for node in self.visual_nodes.values():
                self.animate_node_pulse(node, intensity)
        elif target in self.visual_nodes:
            # –ü—É–ª—å—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É–∑–ª—É
            node = self.visual_nodes[target]
            self.animate_node_pulse(node, intensity)
            
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ —Å–≤—è–∑—è–º
            for conn in self.visual_connections.values():
                if conn.source_id == target:
                    self.animate_signal_flow(conn, intensity)
        
        if self.ide:
            self.ide.log_to_console(f"‚ö° Visual: Pulse sent to {target} (intensity: {intensity})")
    
    def visualize_prune_command(self, result: CommandResult, context: ExecutionContext, **kwargs):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã prune"""
        if not result.success or not self.canvas:
            return
        
        target = kwargs.get('target', 'all')
        threshold = kwargs.get('inactivity_threshold', 3600.0)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É–∑–ª—ã
        current_time = time.time()
        pruned_nodes = []
        
        for node_id, node in list(self.visual_nodes.items()):
            if current_time - node.last_pulse_time > threshold:
                # –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                self.animate_node_removal(node)
                pruned_nodes.append(node_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connections_to_remove = []
                for conn_id, conn in self.visual_connections.items():
                    if conn.source_id == node_id or conn.target_id == node_id:
                        connections_to_remove.append(conn_id)
                
                for conn_id in connections_to_remove:
                    del self.visual_connections[conn_id]
                
                # –£–¥–∞–ª—è–µ–º —É–∑–µ–ª
                del self.visual_nodes[node_id]
        
        if self.ide and pruned_nodes:
            self.ide.log_to_console(f"‚úÇÔ∏è Visual: Pruned {len(pruned_nodes)} inactive nodes")
    
    def visualize_evolve_command(self, result: CommandResult, context: ExecutionContext, **kwargs):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã evolve"""
        if not result.success or not self.canvas:
            return
        
        node_name = kwargs.get('node_name')
        evolution_type = kwargs.get('evolution_type', 'adaptive')
        
        if node_name in self.visual_nodes:
            node = self.visual_nodes[node_name]
            
            # –ò–∑–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —É–∑–ª–∞
            if evolution_type == 'adaptive':
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
                node.radius = min(node.radius * 1.2, 40)
                node.color = '#8BC34A'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            elif evolution_type == 'mutation':
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                colors = ['#FF9800', '#9C27B0', '#00BCD4', '#CDDC39']
                node.color = random.choice(colors)
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —É–∑–µ–ª
            self.draw_node(node)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
            self.animate_node_evolution(node)
            
            if self.ide:
                self.ide.log_to_console(f"üß¨ Visual: Node '{node_name}' evolved ({evolution_type})")
    
    def get_next_node_position(self) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞"""
        if not self.visual_nodes:
            return self.canvas_width // 2, self.canvas_height // 2
        
        # –†–∞–∑–º–µ—â–∞–µ–º —É–∑–ª—ã –ø–æ —Å–ø–∏—Ä–∞–ª–∏
        count = len(self.visual_nodes)
        angle = count * 0.5
        radius = 50 + count * 10
        
        center_x = self.canvas_width // 2
        center_y = self.canvas_height // 2
        
        x = center_x + radius * math.cos(angle)
        y = center_y + radius * math.sin(angle)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ canvas
        x = max(30, min(x, self.canvas_width - 30))
        y = max(30, min(y, self.canvas_height - 30))
        
        return x, y
    
    def draw_node(self, node: VisualNode):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞ –Ω–∞ canvas"""
        if not self.canvas:
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∑–ª–∞
        self.canvas.delete(f"node_{node.id}")
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥
        x1, y1 = node.x - node.radius, node.y - node.radius
        x2, y2 = node.x + node.radius, node.y + node.radius
        
        self.canvas.create_oval(
            x1, y1, x2, y2,
            fill=node.color,
            outline='#333333',
            width=2,
            tags=f"node_{node.id}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.canvas.create_text(
            node.x, node.y,
            text=node.name[:8],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            fill='white',
            font=('Arial', 8, 'bold'),
            tags=f"node_{node.id}"
        )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if node.activation_level > 0:
            glow_radius = node.radius + 5
            alpha = int(node.activation_level * 255)
            glow_color = f"#{alpha:02x}{alpha:02x}00"  # –ñ–µ–ª—Ç–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
            
            self.canvas.create_oval(
                node.x - glow_radius, node.y - glow_radius,
                node.x + glow_radius, node.y + glow_radius,
                outline=glow_color,
                width=3,
                tags=f"node_{node.id}"
            )
    
    def draw_connection(self, connection: VisualConnection):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ –Ω–∞ canvas"""
        if not self.canvas:
            return
        
        source = self.visual_nodes.get(connection.source_id)
        target = self.visual_nodes.get(connection.target_id)
        
        if not source or not target:
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤—è–∑–∏
        self.canvas.delete(f"conn_{connection.id}")
        
        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
        self.canvas.create_line(
            source.x, source.y,
            target.x, target.y,
            fill=connection.color,
            width=connection.thickness,
            arrow=tk.LAST,
            arrowshape=(10, 12, 3),
            tags=f"conn_{connection.id}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å —Å–≤—è–∑–∏
        mid_x = (source.x + target.x) / 2
        mid_y = (source.y + target.y) / 2
        
        self.canvas.create_text(
            mid_x, mid_y - 10,
            text=f"{connection.weight:.1f}",
            fill=connection.color,
            font=('Arial', 7),
            tags=f"conn_{connection.id}"
        )
    
    def animate_node_creation(self, node: VisualNode):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞"""
        if not self.canvas:
            return
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
        original_radius = node.radius
        node.radius = 5
        
        def expand_animation(step=0):
            if step < 10:
                node.radius = 5 + (original_radius - 5) * (step / 10)
                self.draw_node(node)
                self.canvas.after(50, lambda: expand_animation(step + 1))
            else:
                node.radius = original_radius
                self.draw_node(node)
        
        expand_animation()
    
    def animate_node_pulse(self, node: VisualNode, intensity: float):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞ —É–∑–ª–∞"""
        if not self.canvas:
            return
        
        node.activation_level = intensity
        node.last_pulse_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞
        def pulse_animation(step=0):
            if step < 20:
                pulse_intensity = intensity * (1 - step / 20)
                node.activation_level = pulse_intensity
                self.draw_node(node)
                self.canvas.after(50, lambda: pulse_animation(step + 1))
            else:
                node.activation_level = 0
                self.draw_node(node)
        
        pulse_animation()
    
    def animate_signal_flow(self, connection: VisualConnection, intensity: float):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–≤—è–∑–∏"""
        if not self.canvas:
            return
        
        source = self.visual_nodes.get(connection.source_id)
        target = self.visual_nodes.get(connection.target_id)
        
        if not source or not target:
            return
        
        connection.signal_strength = intensity
        connection.last_signal_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂—É—â—É—é—Å—è —Ç–æ—á–∫—É
        def signal_animation(step=0):
            if step <= 20:
                progress = step / 20
                x = source.x + (target.x - source.x) * progress
                y = source.y + (target.y - source.y) * progress
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–æ—á–∫—É
                self.canvas.delete("signal_dot")
                
                # –†–∏—Å—É–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
                self.canvas.create_oval(
                    x - 5, y - 5, x + 5, y + 5,
                    fill=self.colors['pulse'],
                    outline='white',
                    width=2,
                    tags="signal_dot"
                )
                
                self.canvas.after(30, lambda: signal_animation(step + 1))
            else:
                # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª
                self.canvas.delete("signal_dot")
                self.animate_node_pulse(target, intensity * connection.weight)
        
        signal_animation()
    
    def animate_node_removal(self, node: VisualNode):
        """–ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞"""
        if not self.canvas:
            return
        
        # –≠—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        original_radius = node.radius
        
        def shrink_animation(step=0):
            if step < 10:
                node.radius = original_radius * (1 - step / 10)
                node.color = self.colors['inactive']
                self.draw_node(node)
                self.canvas.after(50, lambda: shrink_animation(step + 1))
            else:
                self.canvas.delete(f"node_{node.id}")
        
        shrink_animation()
    
    def animate_node_evolution(self, node: VisualNode):
        """–ê–Ω–∏–º–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —É–∑–ª–∞"""
        if not self.canvas:
            return
        
        # –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        def glow_animation(step=0):
            if step < 15:
                glow_intensity = math.sin(step * 0.4) * 0.5 + 0.5
                node.activation_level = glow_intensity
                self.draw_node(node)
                self.canvas.after(100, lambda: glow_animation(step + 1))
            else:
                node.activation_level = 0
                self.draw_node(node)
        
        glow_animation()
    
    def on_canvas_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas"""
        x, y = event.x, event.y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —É–∑–ª–∞–º
        for node in self.visual_nodes.values():
            distance = math.sqrt((x - node.x)**2 + (y - node.y)**2)
            if distance <= node.radius:
                self.on_node_click(node, event)
                return
        
        # –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
        self.create_node_at_position(x, y)
    
    def on_canvas_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ canvas"""
        x, y = event.x, event.y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —É–∑–ª–∞–º
        for node in self.visual_nodes.values():
            distance = math.sqrt((x - node.x)**2 + (y - node.y)**2)
            if distance <= node.radius:
                self.show_node_context_menu(node, event)
                return
    
    def on_canvas_motion(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–æ canvas"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É —É–∑–ª–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        pass
    
    def on_node_click(self, node: VisualNode, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É"""
        if self.ide:
            self.ide.log_to_console(f"üéØ Clicked on node: {node.name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–µ
            info = f"Node: {node.name}\nType: {node.node_type}\nActivation: {node.activation_level:.2f}"
            if node.metadata:
                info += f"\nMetadata: {node.metadata}"
            
            # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            self.ide.log_to_console(f"‚ÑπÔ∏è {info}")
    
    def show_node_context_menu(self, node: VisualNode, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —É–∑–ª–∞"""
        menu = tk.Menu(self.canvas, tearoff=0)
        menu.add_command(label=f"Pulse {node.name}", 
                        command=lambda: self.animate_node_pulse(node, 1.0))
        menu.add_command(label=f"Evolve {node.name}", 
                        command=lambda: self.animate_node_evolution(node))
        menu.add_command(label=f"Remove {node.name}", 
                        command=lambda: self.remove_node(node))
        menu.add_separator()
        menu.add_command(label="Node Info", 
                        command=lambda: self.show_node_info(node))
        
        try:
            menu.tk_popup(event.x_root, event.y_root)
        finally:
            menu.grab_release()
    
    def create_node_at_position(self, x: float, y: float):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        node_id = f"node_{len(self.visual_nodes)}"
        
        visual_node = VisualNode(
            id=node_id,
            name=node_id,
            x=x,
            y=y,
            radius=20,
            color=self.colors['neuron']
        )
        
        self.visual_nodes[node_id] = visual_node
        self.draw_node(visual_node)
        self.animate_node_creation(visual_node)
        
        if self.ide:
            self.ide.log_to_console(f"üß† Created node {node_id} at ({x:.0f}, {y:.0f})")
    
    def remove_node(self, node: VisualNode):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞"""
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connections_to_remove = []
        for conn_id, conn in self.visual_connections.items():
            if conn.source_id == node.id or conn.target_id == node.id:
                connections_to_remove.append(conn_id)
        
        for conn_id in connections_to_remove:
            self.canvas.delete(f"conn_{conn_id}")
            del self.visual_connections[conn_id]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞
        self.animate_node_removal(node)
        del self.visual_nodes[node.id]
        
        if self.ide:
            self.ide.log_to_console(f"üóëÔ∏è Removed node {node.name}")
    
    def show_node_info(self, node: VisualNode):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–∑–ª–µ"""
        if not self.ide:
            return
        
        info_window = tk.Toplevel(self.ide.root)
        info_window.title(f"Node Info: {node.name}")
        info_window.geometry("400x300")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        text_widget = tk.Text(info_window, wrap=tk.WORD, padx=10, pady=10)
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        info_text = f"""Node Information:
        
Name: {node.name}
ID: {node.id}
Type: {node.node_type}
Position: ({node.x:.1f}, {node.y:.1f})
Radius: {node.radius}
Color: {node.color}
Activation Level: {node.activation_level:.3f}
Last Pulse: {time.ctime(node.last_pulse_time) if node.last_pulse_time > 0 else 'Never'}

Connections: {len(node.connections)}
{chr(10).join(f"  - {conn}" for conn in node.connections)}

Metadata:
{chr(10).join(f"  {k}: {v}" for k, v in node.metadata.items())}
"""
        
        text_widget.insert(tk.END, info_text)
        text_widget.config(state=tk.DISABLED)
    
    def clear_visualization(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if self.canvas:
            self.canvas.delete("all")
        
        self.visual_nodes.clear()
        self.visual_connections.clear()
        self.command_visualizations.clear()
        
        if self.ide:
            self.ide.log_to_console("üßπ Visualization cleared")
    
    def export_visualization(self, filename: str = "neural_network.png"):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        if not self.canvas:
            return False
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç canvas –≤ PostScript, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            ps_file = filename.replace('.png', '.ps')
            self.canvas.postscript(file=ps_file)
            
            if self.ide:
                self.ide.log_to_console(f"üì∏ Visualization exported to {ps_file}")
            
            return True
        except Exception as e:
            if self.ide:
                self.ide.log_to_console(f"‚ùå Export failed: {str(e)}")
            return False
    
    def get_visualization_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'nodes_count': len(self.visual_nodes),
            'connections_count': len(self.visual_connections),
            'commands_executed': len(self.command_visualizations),
            'active_nodes': sum(1 for node in self.visual_nodes.values() 
                              if node.activation_level > 0),
            'total_connections': sum(len(node.connections) 
                                   for node in self.visual_nodes.values()),
            'canvas_size': (self.canvas_width, self.canvas_height)
        }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å IDE
def integrate_with_ide(ide_instance, canvas_widget):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —Å IDE"""
    integrator = VisualCommandIntegrator(ide_instance)
    integrator.set_canvas(canvas_widget)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∫ IDE
    ide_instance.command_visualizer = integrator
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ IDE
    ide_instance.visualize_command = integrator.execute_command_with_visualization
    ide_instance.clear_neural_visualization = integrator.clear_visualization
    ide_instance.export_neural_visualization = integrator.export_visualization
    ide_instance.get_neural_stats = integrator.get_visualization_stats
    
    return integrator


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def visualize_bind_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ bind"""
    pass

def visualize_cluster_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ cluster"""
    pass

def visualize_expand_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ expand"""
    pass

def visualize_contract_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ contract"""
    pass

def visualize_morph_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ morph"""
    pass

def visualize_forge_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ forge"""
    pass

def visualize_drift_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ drift"""
    pass

def visualize_echo_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ echo"""
    pass

def visualize_reflect_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ reflect"""
    pass

def visualize_absorb_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ absorb"""
    pass

def visualize_diffuse_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ diffuse"""
    pass

def visualize_merge_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ merge"""
    pass

def visualize_split_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ split"""
    pass

def visualize_loop_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ loop"""
    pass

def visualize_halt_command(self, result, context, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ halt"""
    pass


# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–ª–∞—Å—Å—É
VisualCommandIntegrator.visualize_bind_command = visualize_bind_command
VisualCommandIntegrator.visualize_cluster_command = visualize_cluster_command
VisualCommandIntegrator.visualize_expand_command = visualize_expand_command
VisualCommandIntegrator.visualize_contract_command = visualize_contract_command
VisualCommandIntegrator.visualize_morph_command = visualize_morph_command
VisualCommandIntegrator.visualize_forge_command = visualize_forge_command
VisualCommandIntegrator.visualize_drift_command = visualize_drift_command
VisualCommandIntegrator.visualize_echo_command = visualize_echo_command
VisualCommandIntegrator.visualize_reflect_command = visualize_reflect_command
VisualCommandIntegrator.visualize_absorb_command = visualize_absorb_command
VisualCommandIntegrator.visualize_diffuse_command = visualize_diffuse_command
VisualCommandIntegrator.visualize_merge_command = visualize_merge_command
VisualCommandIntegrator.visualize_split_command = visualize_split_command
VisualCommandIntegrator.visualize_loop_command = visualize_loop_command
VisualCommandIntegrator.visualize_halt_command = visualize_halt_command 