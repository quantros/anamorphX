#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß† AnamorphX Neural Web Server Simulator (UTF-8 Fixed)
–†–µ–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ AnamorphX –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
"""

import sys
import os
import time
import re
import json
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import socketserver

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

class NeuralWebServer:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, anamorph_file="Project/web_server.anamorph"):
        self.anamorph_file = anamorph_file
        self.config = {}
        self.neural_network = {}
        self.api_endpoints = {}
        self.security_rules = {}
        self.running = False
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ AnamorphX –∫–æ–¥–∞
        self._load_anamorph_config()
    
    def _load_anamorph_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ AnamorphX —Ñ–∞–π–ª–∞"""
        try:
            with open(self.anamorph_file, 'r', encoding='utf-8') as f:
                code = f.read()
            
            print(f"üß† –ó–∞–≥—Ä—É–∂–µ–Ω AnamorphX —Ñ–∞–π–ª: {self.anamorph_file}")
            print(f"üìÑ –†–∞–∑–º–µ—Ä: {len(code):,} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self._extract_server_config(code)
            self._extract_neural_network(code)
            self._extract_api_endpoints(code)
            self._extract_security_config(code)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AnamorphX: {e}")
            self._set_default_config()
    
    def _extract_server_config(self, code):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.config = {
            'host': 'localhost',
            'port': 8080,
            'debug': True,
            'neural_processing': True
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞
        port_match = re.search(r'port[:\s]*(\d+)', code, re.IGNORECASE)
        if port_match:
            self.config['port'] = int(port_match.group(1))
        
        # –ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–∞
        if 'localhost' in code.lower():
            self.config['host'] = 'localhost'
        elif '0.0.0.0' in code:
            self.config['host'] = '0.0.0.0'
    
    def _extract_neural_network(self, code):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        self.neural_network = {
            'layers': [],
            'connections': [],
            'activations': []
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–π—Ä–æ–Ω–æ–≤
        neuron_patterns = [
            r'neuro\s+"([^"]+)"\s*\{([^}]+)\}',
            r'neuron\s+"([^"]+)"\s*\{([^}]+)\}',
            r'layer\s+"([^"]+)"\s*\{([^}]+)\}'
        ]
        
        for pattern in neuron_patterns:
            matches = re.findall(pattern, code, re.IGNORECASE | re.DOTALL)
            for name, config in matches:
                layer = {'name': name}
                
                # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                units_match = re.search(r'units[:\s]*(\d+)', config)
                if units_match:
                    layer['units'] = int(units_match.group(1))
                
                activation_match = re.search(r'activation[:\s]*["\']([^"\']+)["\']', config)
                if activation_match:
                    layer['activation'] = activation_match.group(1)
                    self.neural_network['activations'].append(activation_match.group(1))
                
                self.neural_network['layers'].append(layer)
        
        # –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π
        synapse_patterns = [
            r'synap\s+"([^"]+)"\s*->\s*"([^"]+)"',
            r'connect\s+"([^"]+)"\s*->\s*"([^"]+)"',
            r'(\w+)\s*->\s*(\w+)'
        ]
        
        for pattern in synapse_patterns:
            matches = re.findall(pattern, code, re.IGNORECASE)
            for source, target in matches:
                self.neural_network['connections'].append({
                    'from': source,
                    'to': target
                })
    
    def _extract_api_endpoints(self, code):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        self.api_endpoints = {
            '/': 'index',
            '/api': 'api_info', 
            '/health': 'health_check',
            '/neural': 'neural_status',
            '/admin': 'admin_panel'
        }
        
        # –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_matches = re.findall(r'route[:\s]*["\']([^"\']+)["\']', code, re.IGNORECASE)
        for route in route_matches:
            if route not in self.api_endpoints:
                self.api_endpoints[route] = 'custom_handler'
    
    def _extract_security_config(self, code):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.security_rules = {
            'auth_required': 'auth' in code.lower(),
            'rate_limiting': 'throttle' in code.lower() or 'rate' in code.lower(),
            'encryption': 'encrypt' in code.lower() or 'ssl' in code.lower(),
            'audit_log': 'audit' in code.lower() or 'log' in code.lower()
        }
    
    def _set_default_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.config = {'host': 'localhost', 'port': 8080}
        self.neural_network = {'layers': [], 'connections': []}
        self.api_endpoints = {'/': 'index', '/health': 'health'}
        self.security_rules = {}

class NeuralRequestHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, server_instance, *args, **kwargs):
        self.server_instance = server_instance
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"üåê GET {path} –æ—Ç {self.client_address[0]}")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        if path in self.server_instance.api_endpoints:
            handler_name = self.server_instance.api_endpoints[path]
            response = self._handle_route(handler_name, path)
        else:
            response = self._handle_404()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        self._send_response(response)
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        print(f"üåê POST {path} –æ—Ç {self.client_address[0]}")
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length) if content_length > 0 else b''
        
        response = self._handle_post(path, post_data)
        self._send_response(response)
    
    def _handle_route(self, handler_name, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if handler_name == 'index':
            return self._handle_index()
        elif handler_name == 'api_info':
            return self._handle_api_info()
        elif handler_name == 'health_check':
            return self._handle_health()
        elif handler_name == 'neural_status':
            return self._handle_neural_status()
        elif handler_name == 'admin_panel':
            return self._handle_admin()
        else:
            return self._handle_custom(path)
    
    def _handle_index(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        network = self.server_instance.neural_network
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß† AnamorphX Neural Web Server</title>
    <style>
        body {{ font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
               min-height: 100vh; color: #333; }}
        .container {{ background: rgba(255,255,255,0.95); padding: 40px; border-radius: 20px; 
                     box-shadow: 0 20px 40px rgba(0,0,0,0.1); backdrop-filter: blur(10px); }}
        h1 {{ color: #4CAF50; text-align: center; font-size: 2.5em; margin-bottom: 10px; }}
        .neural {{ color: #4CAF50; text-align: center; font-size: 1.2em; margin-bottom: 30px; }}
        .grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }}
        .card {{ background: white; padding: 20px; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); }}
        .endpoint {{ background: linear-gradient(45deg, #e8f5e8, #f0f8f0); 
                    padding: 12px; margin: 8px 0; border-radius: 8px; 
                    border-left: 4px solid #4CAF50; }}
        .endpoint a {{ text-decoration: none; color: #2E7D32; font-weight: 500; }}
        .endpoint a:hover {{ color: #1B5E20; }}
        .stat {{ display: inline-block; background: #e3f2fd; padding: 8px 15px; 
                margin: 5px; border-radius: 20px; font-weight: bold; }}
        .security-ok {{ color: #4CAF50; }}
        .security-no {{ color: #f44336; }}
        .footer {{ text-align: center; margin-top: 30px; opacity: 0.7; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üß† AnamorphX Neural Web Server</h1>
        <p class="neural">–ù–µ–π—Ä–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
        
        <div class="grid">
            <div class="card">
                <h2>üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
                {self._format_endpoints()}
            </div>
            
            <div class="card">
                <h2>üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å:</h2>
                <div class="stat">–°–ª–æ—ë–≤: {len(network['layers'])}</div>
                <div class="stat">–°–≤—è–∑–µ–π: {len(network['connections'])}</div>
                {self._format_neural_details()}
            </div>
            
            <div class="card">
                <h2>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</h2>
                {self._format_security_info()}
            </div>
            
            <div class="card">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h2>
                <div class="stat">–§–∞–π–ª: {os.path.basename(self.server_instance.anamorph_file)}</div>
                <div class="stat">–ü–æ—Ä—Ç: {self.server_instance.config['port']}</div>
                <div class="stat">–ó–∞–ø—É—â–µ–Ω: {time.strftime('%H:%M:%S')}</div>
            </div>
        </div>
        
        <div class="footer">
            <p>üöÄ Powered by AnamorphX Neural Engine | 
            <a href="/api">API Docs</a> | 
            <a href="/health">Health Check</a></p>
        </div>
    </div>
</body>
</html>"""
        return {'status': 200, 'content': html, 'content_type': 'text/html'}
    
    def _handle_api_info(self):
        """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        api_info = {
            'server': 'AnamorphX Neural Web Server',
            'version': '1.0.0',
            'status': 'active',
            'neural_processing': True,
            'endpoints': list(self.server_instance.api_endpoints.keys()),
            'neural_network': {
                'layers': len(self.server_instance.neural_network['layers']),
                'connections': len(self.server_instance.neural_network['connections']),
                'activations': self.server_instance.neural_network['activations']
            },
            'security': self.server_instance.security_rules,
            'config': {
                'host': self.server_instance.config['host'],
                'port': self.server_instance.config['port']
            },
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'uptime': time.time()
        }
        return {'status': 200, 'content': json.dumps(api_info, indent=2, ensure_ascii=False), 'content_type': 'application/json'}
    
    def _handle_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        health = {
            'status': 'healthy',
            'neural_network': 'active',
            'layers_loaded': len(self.server_instance.neural_network['layers']),
            'connections_active': len(self.server_instance.neural_network['connections']),
            'uptime_seconds': int(time.time()),
            'memory': 'optimal',
            'connections': 'stable',
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        return {'status': 200, 'content': json.dumps(health, indent=2, ensure_ascii=False), 'content_type': 'application/json'}
    
    def _handle_neural_status(self):
        """–°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        neural_data = dict(self.server_instance.neural_network)
        neural_data['total_parameters'] = sum(layer.get('units', 0) for layer in neural_data['layers'])
        neural_data['unique_activations'] = list(set(neural_data['activations']))
        
        return {
            'status': 200,
            'content': json.dumps(neural_data, indent=2, ensure_ascii=False),
            'content_type': 'application/json'
        }
    
    def _handle_admin(self):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        network = self.server_instance.neural_network
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å AnamorphX</title>
    <style>
        body {{ font-family: 'SF Mono', Monaco, monospace; margin: 40px; background: #1a1a1a; color: #00ff00; }}
        .panel {{ background: #000; padding: 30px; border-radius: 10px; border: 1px solid #00ff00; }}
        .status {{ margin: 10px 0; }}
        .ok {{ color: #00ff00; }}
        .warning {{ color: #ffaa00; }}
        .error {{ color: #ff0000; }}
    </style>
</head>
<body>
    <div class="panel">
        <h1>üîß AnamorphX Neural Server Admin</h1>
        <div class="status ok">üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å: –ê–ö–¢–ò–í–ù–ê</div>
        <div class="status ok">üìä –°–ª–æ—ë–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(network['layers'])}</div>
        <div class="status ok">üîó –°–≤—è–∑–µ–π –∞–∫—Ç–∏–≤–Ω–æ: {len(network['connections'])}</div>
        <div class="status ok">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–ö–õ–Æ–ß–ï–ù–ê</div>
        <div class="status ok">üíæ –ü–∞–º—è—Ç—å: –û–ü–¢–ò–ú–ê–õ–¨–ù–ê</div>
        <div class="status ok">üåê –°–µ—Ç—å: –°–¢–ê–ë–ò–õ–¨–ù–ê</div>
        <hr>
        <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.strftime('%H:%M:%S')}</p>
        <p>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.server_instance.anamorph_file}</p>
    </div>
</body>
</html>"""
        return {'status': 200, 'content': html, 'content_type': 'text/html'}
    
    def _handle_custom(self, path):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        return {
            'status': 200,
            'content': f'<h1>üß† Neural Route: {path}</h1><p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é AnamorphX</p>',
            'content_type': 'text/html'
        }
    
    def _handle_post(self, path, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'status': 200,
            'content': json.dumps({'received': len(data), 'path': path, 'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')}, ensure_ascii=False),
            'content_type': 'application/json'
        }
    
    def _handle_404(self):
        """404 –æ—à–∏–±–∫–∞"""
        return {
            'status': 404,
            'content': '<h1>404 - –ù–µ–π—Ä–æ–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><p>üß† –î–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏</p>',
            'content_type': 'text/html'
        }
    
    def _format_endpoints(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        html = ""
        for endpoint in self.server_instance.api_endpoints.keys():
            html += f'<div class="endpoint">üì° <a href="{endpoint}">{endpoint}</a></div>'
        return html
    
    def _format_neural_details(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        network = self.server_instance.neural_network
        if not network['layers']:
            return "<p>–ù–µ–π—Ä–æ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>"
        
        html = "<div style='margin-top: 15px;'>"
        for i, layer in enumerate(network['layers'][:3]):
            units = layer.get('units', 'N/A')
            activation = layer.get('activation', 'linear')
            html += f"<div style='margin: 5px 0;'>‚Ä¢ <strong>{layer['name']}</strong>: {units} –Ω–µ–π—Ä–æ–Ω–æ–≤, {activation}</div>"
        
        if len(network['layers']) > 3:
            html += f"<div style='margin: 5px 0;'>... –∏ –µ—â—ë {len(network['layers']) - 3} —Å–ª–æ—ë–≤</div>"
        
        html += "</div>"
        return html
    
    def _format_security_info(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security = self.server_instance.security_rules
        html = ""
        
        security_names = {
            'auth_required': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            'rate_limiting': '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤', 
            'encryption': '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
            'audit_log': '–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞'
        }
        
        for rule, enabled in security.items():
            name = security_names.get(rule, rule)
            status = "‚úÖ" if enabled else "‚ùå"
            css_class = "security-ok" if enabled else "security-no"
            html += f"<div class='{css_class}'>{status} {name}</div>"
        
        return html
    
    def _send_response(self, response):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å UTF-8"""
        self.send_response(response['status'])
        self.send_header('Content-type', response['content_type'] + '; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        self.end_headers()
        
        content = response['content']
        if isinstance(content, str):
            content = content.encode('utf-8')
        
        self.wfile.write(content)
    
    def log_message(self, format, *args):
        """–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        pass

def create_handler(server_instance):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    def handler(*args, **kwargs):
        NeuralRequestHandler(server_instance, *args, **kwargs)
    return handler

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    if len(sys.argv) > 1:
        anamorph_file = sys.argv[1]
    else:
        anamorph_file = "Project/web_server.anamorph"
    
    print("üß† AnamorphX Neural Web Server (UTF-8)")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    neural_server = NeuralWebServer(anamorph_file)
    
    host = neural_server.config['host']
    port = neural_server.config['port']
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üì° –•–æ—Å—Ç: {host}")
    print(f"üîå –ü–æ—Ä—Ç: {port}")
    print(f"üß† –ù–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤: {len(neural_server.neural_network['layers'])}")
    print(f"üîó –°–≤—è–∑–µ–π: {len(neural_server.neural_network['connections'])}")
    print(f"üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(neural_server.api_endpoints)}")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        handler = create_handler(neural_server)
        httpd = HTTPServer((host, port), handler)
        
        neural_server.running = True
        
        print(f"")
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
        print(f"üåê URL: http://{host}:{port}")
        print(f"üì° API: http://{host}:{port}/api")
        print(f"üíö Health: http://{host}:{port}/health")
        print(f"üß† Neural: http://{host}:{port}/neural")
        print(f"üîß Admin: http://{host}:{port}/admin")
        print(f"")
        print(f"üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        httpd.serve_forever()
        
    except KeyboardInterrupt:
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        neural_server.running = False
        httpd.shutdown()
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 