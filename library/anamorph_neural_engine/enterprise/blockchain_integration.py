"""
‚õìÔ∏è Blockchain Integration –¥–ª—è AnamorphX Enterprise
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç—è–º–∏ –¥–ª—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ ML
"""

import hashlib
import json
import time
import asyncio
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from enum import Enum
import logging
import uuid

class BlockchainNetwork(Enum):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–∏"""
    ETHEREUM = "ethereum"
    POLYGON = "polygon"
    BSC = "bsc"
    AVALANCHE = "avalanche"
    CUSTOM = "custom"

@dataclass
class ModelContract:
    """–ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥–µ–ª–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
    contract_id: str
    model_hash: str
    owner_address: str
    creation_time: float
    model_metadata: Dict[str, Any]
    access_price: float = 0.0
    usage_count: int = 0
    network: BlockchainNetwork = BlockchainNetwork.ETHEREUM

@dataclass
class TrainingRecord:
    """–ó–∞–ø–∏—Å—å –æ–± –æ–±—É—á–µ–Ω–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
    record_id: str
    model_contract_id: str
    trainer_address: str
    training_data_hash: str
    accuracy_achieved: float
    training_time: float
    reward_earned: float
    timestamp: float

class BlockchainModelRegistry:
    """–†–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
    
    def __init__(self, network: BlockchainNetwork = BlockchainNetwork.ETHEREUM):
        self.network = network
        self.contracts: Dict[str, ModelContract] = {}
        self.training_records: List[TrainingRecord] = []
        self.logger = logging.getLogger(__name__)
        
        print(f"‚õìÔ∏è Blockchain Model Registry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üåê –°–µ—Ç—å: {network.value}")
    
    async def register_model(self, model_data: bytes, metadata: Dict[str, Any],
                           owner_address: str, access_price: float = 0.0) -> str:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ –º–æ–¥–µ–ª–∏
        model_hash = hashlib.sha256(model_data).hexdigest()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract_id = f"contract_{uuid.uuid4().hex[:16]}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract = ModelContract(
            contract_id=contract_id,
            model_hash=model_hash,
            owner_address=owner_address,
            creation_time=time.time(),
            model_metadata=metadata,
            access_price=access_price,
            network=self.network
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        self.contracts[contract_id] = contract
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
        await self._write_to_blockchain(contract)
        
        self.logger.info(f"üìù –ú–æ–¥–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {contract_id}")
        return contract_id
    
    async def _write_to_blockchain(self, data: Any):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
        self.logger.debug(f"‚õìÔ∏è –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {self.network.value}")
    
    async def verify_model_integrity(self, contract_id: str, model_data: bytes) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if contract_id not in self.contracts:
            return False
        
        contract = self.contracts[contract_id]
        current_hash = hashlib.sha256(model_data).hexdigest()
        
        return current_hash == contract.model_hash
    
    async def purchase_model_access(self, contract_id: str, buyer_address: str) -> Dict[str, Any]:
        """–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏"""
        if contract_id not in self.contracts:
            return {'success': False, 'error': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        contract = self.contracts[contract_id]
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payment_success = await self._process_payment(
            buyer_address, contract.owner_address, contract.access_price
        )
        
        if payment_success:
            contract.usage_count += 1
            
            return {
                'success': True,
                'access_token': f"access_{uuid.uuid4().hex[:16]}",
                'contract_id': contract_id,
                'valid_until': time.time() + 86400  # 24 —á–∞—Å–∞
            }
        else:
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'}
    
    async def _process_payment(self, from_address: str, to_address: str, amount: float) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        await asyncio.sleep(0.2)
        return amount >= 0  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    def get_model_contract(self, contract_id: str) -> Optional[ModelContract]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–¥–µ–ª–∏"""
        return self.contracts.get(contract_id)
    
    def search_models(self, query: Dict[str, Any]) -> List[ModelContract]:
        """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        results = []
        
        for contract in self.contracts.values():
            matches = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if 'task_type' in query:
                if contract.model_metadata.get('task_type') != query['task_type']:
                    matches = False
            
            if 'min_accuracy' in query:
                if contract.model_metadata.get('accuracy', 0) < query['min_accuracy']:
                    matches = False
            
            if 'max_price' in query:
                if contract.access_price > query['max_price']:
                    matches = False
            
            if matches:
                results.append(contract)
        
        return results

class DecentralizedTraining:
    """–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    
    def __init__(self, registry: BlockchainModelRegistry):
        self.registry = registry
        self.training_nodes: Dict[str, Dict[str, Any]] = {}
        self.active_training_tasks: Dict[str, Dict[str, Any]] = {}
        self.logger = logging.getLogger(__name__)
    
    async def register_training_node(self, node_address: str, 
                                   capabilities: Dict[str, Any]) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∑–ª–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        self.training_nodes[node_address] = {
            'capabilities': capabilities,
            'reputation': 100,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
            'completed_tasks': 0,
            'registration_time': time.time()
        }
        
        self.logger.info(f"üñ•Ô∏è –£–∑–µ–ª –æ–±—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {node_address}")
        return True
    
    async def submit_training_task(self, contract_id: str, training_config: Dict[str, Any],
                                 reward_amount: float) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
        task_id = f"task_{uuid.uuid4().hex[:16]}"
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–∑–ª–æ–≤
        suitable_nodes = self._find_suitable_nodes(training_config)
        
        if not suitable_nodes:
            raise ValueError("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        
        # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —É–∑–ª–∞
        selected_node = max(suitable_nodes, key=lambda n: self.training_nodes[n]['reputation'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task = {
            'task_id': task_id,
            'contract_id': contract_id,
            'assigned_node': selected_node,
            'training_config': training_config,
            'reward_amount': reward_amount,
            'status': 'pending',
            'created_at': time.time()
        }
        
        self.active_training_tasks[task_id] = task
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∑–ª–∞
        await self._notify_training_node(selected_node, task)
        
        self.logger.info(f"üìã –ó–∞–¥–∞—á–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        return task_id
    
    def _find_suitable_nodes(self, requirements: Dict[str, Any]) -> List[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–∑–ª–æ–≤"""
        suitable = []
        
        for node_address, node_info in self.training_nodes.items():
            capabilities = node_info['capabilities']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            if requirements.get('min_gpu_memory', 0) <= capabilities.get('gpu_memory_gb', 0):
                if requirements.get('min_cpu_cores', 0) <= capabilities.get('cpu_cores', 0):
                    if node_info['reputation'] >= requirements.get('min_reputation', 50):
                        suitable.append(node_address)
        
        return suitable
    
    async def _notify_training_node(self, node_address: str, task: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∑–ª–∞ –æ –∑–∞–¥–∞—á–µ"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∑–ª—É
        self.logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–∑–ª—É {node_address}")
    
    async def complete_training_task(self, task_id: str, results: Dict[str, Any],
                                   trainer_address: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è"""
        if task_id not in self.active_training_tasks:
            return False
        
        task = self.active_training_tasks[task_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self._validate_training_results(results):
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏
            record = TrainingRecord(
                record_id=f"record_{uuid.uuid4().hex[:16]}",
                model_contract_id=task['contract_id'],
                trainer_address=trainer_address,
                training_data_hash=results.get('data_hash', ''),
                accuracy_achieved=results.get('accuracy', 0.0),
                training_time=results.get('training_time', 0.0),
                reward_earned=task['reward_amount'],
                timestamp=time.time()
            )
            
            self.registry.training_records.append(record)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É–∑–ª–∞
            if trainer_address in self.training_nodes:
                self.training_nodes[trainer_address]['reputation'] += 10
                self.training_nodes[trainer_address]['completed_tasks'] += 1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            task['status'] = 'completed'
            task['completed_at'] = time.time()
            task['results'] = results
            
            # –í—ã–ø–ª–∞—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã
            await self._distribute_reward(trainer_address, task['reward_amount'])
            
            self.logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}")
            return True
        else:
            task['status'] = 'failed'
            self.logger.warning(f"‚ùå –ó–∞–¥–∞—á–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {task_id}")
            return False
    
    def _validate_training_results(self, results: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        required_fields = ['accuracy', 'training_time', 'model_hash']
        
        for field in required_fields:
            if field not in results:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        if not (0 <= results['accuracy'] <= 1):
            return False
        
        if results['training_time'] <= 0:
            return False
        
        return True
    
    async def _distribute_reward(self, recipient_address: str, amount: float):
        """–í—ã–ø–ª–∞—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        self.logger.info(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ {amount} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {recipient_address}")

class NFTModelMarketplace:
    """NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, registry: BlockchainModelRegistry):
        self.registry = registry
        self.nft_tokens: Dict[str, Dict[str, Any]] = {}
        self.marketplace_listings: Dict[str, Dict[str, Any]] = {}
        self.logger = logging.getLogger(__name__)
    
    async def mint_model_nft(self, contract_id: str, owner_address: str,
                           nft_metadata: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ NFT –¥–ª—è –º–æ–¥–µ–ª–∏"""
        if contract_id not in self.registry.contracts:
            raise ValueError("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        nft_id = f"nft_{uuid.uuid4().hex[:16]}"
        
        nft_token = {
            'nft_id': nft_id,
            'contract_id': contract_id,
            'owner_address': owner_address,
            'metadata': nft_metadata,
            'minted_at': time.time(),
            'transfer_history': []
        }
        
        self.nft_tokens[nft_id] = nft_token
        
        # –°–∏–º—É–ª—è—Ü–∏—è –º–∏–Ω—Ç–∏–Ω–≥–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        await self.registry._write_to_blockchain(nft_token)
        
        self.logger.info(f"üé® NFT –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω: {nft_id}")
        return nft_id
    
    async def list_nft_for_sale(self, nft_id: str, price: float,
                              seller_address: str) -> bool:
        """–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        if nft_id not in self.nft_tokens:
            return False
        
        nft = self.nft_tokens[nft_id]
        
        if nft['owner_address'] != seller_address:
            return False
        
        listing_id = f"listing_{uuid.uuid4().hex[:16]}"
        
        self.marketplace_listings[listing_id] = {
            'listing_id': listing_id,
            'nft_id': nft_id,
            'seller_address': seller_address,
            'price': price,
            'listed_at': time.time(),
            'status': 'active'
        }
        
        self.logger.info(f"üè∑Ô∏è NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {nft_id} –∑–∞ {price}")
        return True
    
    async def purchase_nft(self, listing_id: str, buyer_address: str) -> Dict[str, Any]:
        """–ü–æ–∫—É–ø–∫–∞ NFT"""
        if listing_id not in self.marketplace_listings:
            return {'success': False, 'error': '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        listing = self.marketplace_listings[listing_id]
        
        if listing['status'] != 'active':
            return {'success': False, 'error': '–õ–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        
        nft_id = listing['nft_id']
        nft = self.nft_tokens[nft_id]
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payment_success = await self.registry._process_payment(
            buyer_address, listing['seller_address'], listing['price']
        )
        
        if payment_success:
            # –ü–µ—Ä–µ–≤–æ–¥ ownership
            nft['owner_address'] = buyer_address
            nft['transfer_history'].append({
                'from': listing['seller_address'],
                'to': buyer_address,
                'price': listing['price'],
                'timestamp': time.time()
            })
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ—Ç–∞
            listing['status'] = 'sold'
            listing['sold_at'] = time.time()
            listing['buyer_address'] = buyer_address
            
            self.logger.info(f"üíé NFT –ø—Ä–æ–¥–∞–Ω: {nft_id}")
            
            return {
                'success': True,
                'nft_id': nft_id,
                'transaction_hash': f"tx_{uuid.uuid4().hex[:16]}"
            }
        else:
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'}
    
    def get_marketplace_listings(self, filters: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ"""
        listings = []
        
        for listing in self.marketplace_listings.values():
            if listing['status'] != 'active':
                continue
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if filters:
                if 'max_price' in filters and listing['price'] > filters['max_price']:
                    continue
                if 'min_price' in filters and listing['price'] < filters['min_price']:
                    continue
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NFT
            nft = self.nft_tokens[listing['nft_id']]
            contract = self.registry.contracts[nft['contract_id']]
            
            listing_info = listing.copy()
            listing_info['nft_metadata'] = nft['metadata']
            listing_info['model_metadata'] = contract.model_metadata
            
            listings.append(listing_info)
        
        return listings

class BlockchainIntegration:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º"""
    
    def __init__(self, network: BlockchainNetwork = BlockchainNetwork.ETHEREUM):
        self.network = network
        self.registry = BlockchainModelRegistry(network)
        self.training = DecentralizedTraining(self.registry)
        self.marketplace = NFTModelMarketplace(self.registry)
        self.logger = logging.getLogger(__name__)
        
        print(f"‚õìÔ∏è Blockchain Integration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üåê –°–µ—Ç—å: {network.value}")
    
    async def deploy_model_to_blockchain(self, model_data: bytes, 
                                       metadata: Dict[str, Any],
                                       owner_address: str) -> Dict[str, str]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract_id = await self.registry.register_model(
            model_data, metadata, owner_address
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ NFT
        nft_id = await self.marketplace.mint_model_nft(
            contract_id, owner_address, {
                'name': metadata.get('name', 'Unnamed Model'),
                'description': metadata.get('description', ''),
                'image': metadata.get('image_url', ''),
                'attributes': metadata.get('attributes', [])
            }
        )
        
        return {
            'contract_id': contract_id,
            'nft_id': nft_id
        }
    
    async def start_decentralized_training(self, model_config: Dict[str, Any],
                                         reward_pool: float) -> str:
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        contract_id = await self.registry.register_model(
            b"initial_model_data", model_config, "training_coordinator"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
        task_id = await self.training.submit_training_task(
            contract_id, model_config, reward_pool
        )
        
        return task_id
    
    def get_blockchain_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞"""
        return {
            'network': self.network.value,
            'total_contracts': len(self.registry.contracts),
            'total_nfts': len(self.marketplace.nft_tokens),
            'active_listings': len([l for l in self.marketplace.marketplace_listings.values() 
                                  if l['status'] == 'active']),
            'training_nodes': len(self.training.training_nodes),
            'completed_training_tasks': len([t for t in self.training.active_training_tasks.values()
                                           if t['status'] == 'completed']),
            'total_training_records': len(self.registry.training_records)
        } 