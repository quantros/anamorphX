"""
üß† Model Manager - Enterprise Edition
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
"""

import torch
import torch.nn as nn
import logging
import json
import time
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

class ModelManager:
    """
    üß† Enterprise Model Manager
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–æ–¥–µ–ª–µ–π
    """
    
    def __init__(self, models_dir: str = 'models'):
        self.models_dir = Path(models_dir)
        self.models_dir.mkdir(exist_ok=True)
        self.logger = logging.getLogger(__name__)
        
        # Loaded models registry
        self.loaded_models = {}
        self.model_metadata = {}
    
    def load_model(self, model_path: str, model_name: str = None) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            model_name = model_name or Path(model_path).stem
            
            checkpoint = torch.load(model_path, map_location='cpu')
            self.loaded_models[model_name] = checkpoint
            
            # Store metadata
            self.model_metadata[model_name] = {
                'path': model_path,
                'loaded_at': datetime.now().isoformat(),
                'size_mb': Path(model_path).stat().st_size / 1024 / 1024
            }
            
            self.logger.info(f"Model loaded: {model_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to load model {model_path}: {e}")
            return False
    
    def get_model(self, model_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        return self.loaded_models.get(model_name)
    
    def list_models(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return list(self.loaded_models.keys())
    
    def unload_model(self, model_name: str) -> bool:
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        if model_name in self.loaded_models:
            del self.loaded_models[model_name]
            del self.model_metadata[model_name]
            self.logger.info(f"Model unloaded: {model_name}")
            return True
        return False 