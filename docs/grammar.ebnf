(* AnamorphX Language Grammar - Extended EBNF *)
(* Neural Programming Language with ML Integration *)

program         ::= statement*

statement       ::= network_decl
                  | neuron_decl
                  | action_stmt
                  | control_flow
                  | loop_stmt
                  | func_decl
                  | func_call
                  | comment

(* Neural Network Declarations *)
network_decl    ::= "network" IDENTIFIER "{" network_body "}"

network_body    ::= (neuron_decl | network_param)*

neuron_decl     ::= "neuron" IDENTIFIER "{" neuron_body "}"

neuron_body     ::= neuron_param*

network_param   ::= param_name ":" param_value

neuron_param    ::= param_name ":" param_value

param_name      ::= "optimizer" | "learning_rate" | "loss" | "batch_size" | "epochs"
                  | "activation" | "units" | "filters" | "kernel_size" | "padding"
                  | "pool_size" | "stride" | "dropout"

param_value     ::= STRING | NUMBER | IDENTIFIER

(* Traditional Programming Constructs *)
action_stmt     ::= COMMAND [arguments] newline

arguments       ::= "[" arg_list "]"

arg_list        ::= arg ("," arg)*

arg             ::= IDENTIFIER ":" value

value           ::= STRING
                  | NUMBER
                  | IDENTIFIER
                  | boolean

control_flow    ::= "if" condition "then" newline
                     statement*
                   ["else" newline
                     statement*]
                   "end" newline

loop_stmt       ::= "loop" IDENTIFIER "from" NUMBER "to" NUMBER newline
                     statement*
                   "end" newline

func_decl       ::= "func" IDENTIFIER "(" [param_list] ")" newline
                     statement*
                   "end" newline

param_list      ::= IDENTIFIER ("," IDENTIFIER)*

func_call       ::= IDENTIFIER "(" [arg_call_list] ")" newline

arg_call_list   ::= value ("," value)*

condition       ::= expression

expression      ::= operand (LOGIC_OP operand)*

operand         ::= IDENTIFIER
                  | STRING
                  | NUMBER
                  | boolean
                  | "(" expression ")"

(* Neural Network Specific Commands *)
NEURAL_COMMAND  ::= "network" | "neuron" | "train" | "infer" | "validate"
                  | "optimize" | "visualize" | "export" | "import"

(* Traditional Commands *)
COMMAND         ::= NEURAL_COMMAND | TRADITIONAL_COMMAND

TRADITIONAL_COMMAND ::= "neuro" | "synap" | "pulse" | "resonate" | "drift" | "bind" | "echo"
                      | "forge" | "prune" | "filter" | "guard" | "mask" | "scramble" | "trace"
                      | "quanta" | "phase" | "sync" | "async" | "fold" | "unfold" | "pulseX"
                      | "reflect" | "absorb" | "diffuse" | "cluster" | "expand" | "contract"
                      | "encode" | "decode" | "merge" | "split" | "loop" | "halt" | "yield"
                      | "spawn" | "tag" | "query" | "response" | "encrypt" | "decrypt"
                      | "checkpoint" | "rollback" | "pulseIf" | "wait" | "time" | "jump"
                      | "stack" | "pop" | "push" | "flag" | "clearFlag" | "toggle" | "listen"
                      | "broadcast" | "filterIn" | "filterOut" | "auth" | "audit" | "throttle"
                      | "ban" | "whitelist" | "blacklist" | "morph" | "evolve" | "sense"
                      | "act" | "log" | "alert" | "reset" | "pattern" | "scaleUp" | "scaleDown"
                      | "backup" | "restore" | "snapshot" | "migrate" | "notify"

(* Lexical Elements *)
IDENTIFIER      ::= /[a-zA-Z_][a-zA-Z0-9_]*/

STRING          ::= /"([^"\\]|\\.)*"/

NUMBER          ::= /-?\d+(\.\d+)?/

boolean         ::= "true" | "false"

LOGIC_OP        ::= "and" | "or" | "not"

comment         ::= "//" /[^\n]*/ newline
                  | "/*" /.*?/ "*/"

newline         ::= "\n" | "\r\n"

(* Neural Network Parameter Values *)
ACTIVATION      ::= "relu" | "sigmoid" | "tanh" | "softmax" | "linear" 
                  | "leaky_relu" | "gelu" | "swish"

OPTIMIZER       ::= "adam" | "sgd" | "adamw" | "rmsprop" | "adagrad"

LOSS_FUNCTION   ::= "mse" | "categorical_crossentropy" | "binary_crossentropy"
                  | "sparse_categorical_crossentropy" | "huber" | "mae"

(* Comments *)
(* 
Key Features of AnamorphX Grammar:

1. Neural Network Focus:
   - 'network' blocks define complete neural architectures
   - 'neuron' blocks define individual layers
   - Built-in support for common ML parameters

2. Dual Syntax Support:
   - Modern neural network syntax (network/neuron)
   - Traditional AnamorphX commands (neuro/synap/pulse)

3. Parameter System:
   - Type-safe parameter definitions
   - Validation of neural network parameters
   - Support for all common ML configurations

4. Integration Ready:
   - Designed for PyTorch code generation
   - Compatible with existing AnamorphX interpreter
   - Extensible for future ML frameworks

5. Developer Friendly:
   - Clear separation of concerns
   - Intuitive syntax for ML practitioners
   - Comprehensive error handling support
*) 