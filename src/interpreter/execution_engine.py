"""
Execution Engine for AnamorphX Interpreter

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º Anamorph —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: AST –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é, —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤,
–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
"""

import os
import sys
import time
import asyncio
import threading
import traceback
from typing import Any, Dict, List, Optional, Union, Callable, Tuple
from dataclasses import dataclass, field
from collections import deque, defaultdict
from concurrent.futures import ThreadPoolExecutor, Future
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
root_dir = os.path.dirname(parent_dir)

for path in [current_dir, parent_dir, root_dir]:
    if path not in sys.path:
        sys.path.insert(0, path)


@dataclass
class ExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    success: bool
    value: Any = None
    error: Optional[str] = None
    error_type: Optional[str] = None
    execution_time: float = 0.0
    memory_usage: int = 0
    neural_activations: int = 0
    signal_transmissions: int = 0
    commands_executed: int = 0
    ast_nodes_processed: int = 0
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ExecutionContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    filename: Optional[str] = None
    debug_mode: bool = False
    trace_execution: bool = False
    max_execution_time: float = 300.0
    max_memory_usage: int = 1024 * 1024 * 100  # 100MB
    max_recursion_depth: int = 1000
    async_enabled: bool = True
    neural_processing: bool = True
    strict_type_checking: bool = False
    profiling_enabled: bool = False
    
    # Runtime state
    start_time: float = field(default_factory=time.time)
    variables: Dict[str, Any] = field(default_factory=dict)
    functions: Dict[str, Any] = field(default_factory=dict)
    neurons: Dict[str, Any] = field(default_factory=dict)
    synapses: Dict[str, Any] = field(default_factory=dict)
    signals: deque = field(default_factory=deque)
    call_stack: List[str] = field(default_factory=list)
    async_tasks: Dict[str, Future] = field(default_factory=dict)
    
    # Statistics
    nodes_executed: int = 0
    commands_executed: int = 0
    neural_activations: int = 0
    signal_transmissions: int = 0
    memory_peak: int = 0


class ExecutionEngine:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º AnamorphX.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç:
    - AST –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
    - –°–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    - –ù–µ–π—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    """
    
    def __init__(self, config: Optional[ExecutionContext] = None):
        self.config = config or ExecutionContext()
        self.is_running = False
        self.executor = ThreadPoolExecutor(max_workers=4)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
        self.ast_interpreter = None
        self.memory_manager = None
        self.type_system = None
        self.environment = None
        self.command_registry = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_stats = {
            'total_programs': 0,
            'successful_executions': 0,
            'failed_executions': 0,
            'total_execution_time': 0.0,
            'average_execution_time': 0.0,
            'peak_memory_usage': 0,
            'total_neural_activations': 0,
            'total_signal_transmissions': 0
        }
        
        self._initialize_components()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞."""
        try:
            # AST Interpreter
            from interpreter.ast_interpreter import ASTInterpreter
            from interpreter.ast_types import InterpreterConfig
            
            interpreter_config = InterpreterConfig(
                debug_mode=self.config.debug_mode,
                trace_execution=self.config.trace_execution,
                max_execution_time=self.config.max_execution_time,
                max_recursion_depth=self.config.max_recursion_depth,
                async_enabled=self.config.async_enabled,
                neural_processing_enabled=self.config.neural_processing
            )
            
            self.ast_interpreter = ASTInterpreter(interpreter_config)
            print("‚úÖ AST Interpreter initialized")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è AST Interpreter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        try:
            # Enhanced Memory Manager
            from interpreter.enhanced_memory_manager import EnhancedMemoryManager
            
            self.memory_manager = EnhancedMemoryManager(
                max_memory=self.config.max_memory_usage,
                gc_threshold=0.8,
                monitoring_enabled=True
            )
            print("‚úÖ Enhanced Memory Manager initialized")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è Enhanced Memory Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        try:
            # Type System
            from semantic.types import TypeSystem, TypeChecker
            
            self.type_system = TypeSystem()
            self.type_checker = TypeChecker(self.type_system)
            print("‚úÖ Type System initialized")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è Type System –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        try:
            # Environment and Commands
            from interpreter.environment import Environment
            from interpreter.commands import CommandRegistry
            
            self.environment = Environment()
            self.command_registry = CommandRegistry()
            print("‚úÖ Environment and Commands initialized")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è Environment/Commands –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    async def execute_program(self, program_source: str, context: Optional[ExecutionContext] = None) -> ExecutionResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã Anamorph –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
        
        Args:
            program_source: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            ExecutionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        execution_context = context or self.config
        start_time = time.time()
        
        try:
            self.execution_stats['total_programs'] += 1
            
            # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            print("üîÑ –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            ast = await self._parse_program(program_source, execution_context)
            
            # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if execution_context.strict_type_checking and self.type_checker:
                print("üîÑ –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...")
                type_errors = await self._check_types(ast, execution_context)
                if type_errors:
                    return ExecutionResult(
                        success=False,
                        error=f"Type checking failed: {type_errors}",
                        error_type="TypeErrors"
                    )
            
            # –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
            if self.memory_manager:
                print("üîÑ –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏...")
                await self._initialize_memory(execution_context)
            
            # –≠—Ç–∞–ø 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AST
            print("üîÑ –≠—Ç–∞–ø 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            result = await self._execute_ast(ast, execution_context)
            
            # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            execution_time = time.time() - start_time
            await self._finalize_execution(execution_context)
            
            self.execution_stats['successful_executions'] += 1
            self.execution_stats['total_execution_time'] += execution_time
            self.execution_stats['average_execution_time'] = (
                self.execution_stats['total_execution_time'] / 
                self.execution_stats['total_programs']
            )
            
            print(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {execution_time:.3f}—Å")
            
            return ExecutionResult(
                success=True,
                value=result,
                execution_time=execution_time,
                memory_usage=execution_context.memory_peak,
                neural_activations=execution_context.neural_activations,
                signal_transmissions=execution_context.signal_transmissions,
                commands_executed=execution_context.commands_executed,
                ast_nodes_processed=execution_context.nodes_executed,
                metadata={
                    'filename': execution_context.filename,
                    'debug_mode': execution_context.debug_mode
                }
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)
            error_type = type(e).__name__
            
            self.execution_stats['failed_executions'] += 1
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error_msg}")
            if execution_context.debug_mode:
                print(f"üêõ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            
            return ExecutionResult(
                success=False,
                error=error_msg,
                error_type=error_type,
                execution_time=execution_time
            )
    
    async def _parse_program(self, source: str, context: ExecutionContext) -> Any:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ AST."""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à parser
            from parser.parser import Parser
            from lexer.lexer import Lexer
            
            lexer = Lexer()
            parser = Parser()
            
            tokens = lexer.tokenize(source)
            ast = parser.parse(tokens)
            
            print(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {len(ast.body) if hasattr(ast, 'body') else 'unknown'} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            return ast
            
        except ImportError:
            # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π mock AST
            class MockAST:
                def __init__(self, source):
                    self.body = [{'type': 'program', 'source': source}]
                    self.node_type = 'Program'
            
            return MockAST(source)
    
    async def _check_types(self, ast: Any, context: ExecutionContext) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –≤ AST."""
        if not self.type_checker:
            return []
        
        try:
            errors = []
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return errors
            
        except Exception as e:
            return [f"Type checking error: {e}"]
    
    async def _initialize_memory(self, context: ExecutionContext):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é."""
        if not self.memory_manager:
            return
        
        try:
            await self.memory_manager.initialize()
            print("‚úÖ –ü–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    async def _execute_ast(self, ast: Any, context: ExecutionContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AST."""
        if self.ast_interpreter:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π AST –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
            try:
                result = self.ast_interpreter.interpret(ast)
                context.nodes_executed += getattr(self.ast_interpreter.stats, 'nodes_executed', 0)
                context.commands_executed += getattr(self.ast_interpreter.stats, 'function_calls', 0)
                context.neural_activations += getattr(self.ast_interpreter.stats, 'neural_activations', 0)
                context.signal_transmissions += getattr(self.ast_interpreter.stats, 'signal_transmissions', 0)
                
                print(f"‚úÖ AST –≤—ã–ø–æ–ª–Ω–µ–Ω: {context.nodes_executed} —É–∑–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return result
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AST: {e}")
                raise
        
        else:
            # Fallback: –ø—Ä–æ—Å—Ç–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            context.nodes_executed += 1
            context.commands_executed += 1
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if hasattr(ast, 'body'):
                for stmt in ast.body:
                    await self._execute_statement(stmt, context)
            
            return {"status": "executed", "nodes": context.nodes_executed}
    
    async def _execute_statement(self, stmt: Any, context: ExecutionContext):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
        context.nodes_executed += 1
        
        if isinstance(stmt, dict):
            stmt_type = stmt.get('type', 'unknown')
            
            if stmt_type == 'function_declaration':
                func_name = stmt.get('name', 'anonymous')
                context.functions[func_name] = stmt
                print(f"üìù –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {func_name}")
                
            elif stmt_type == 'variable_declaration':
                var_name = stmt.get('name', 'unknown')
                var_value = stmt.get('value', None)
                context.variables[var_name] = var_value
                print(f"üìù –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {var_name} = {var_value}")
                
            elif stmt_type == 'neuron_declaration':
                neuron_name = stmt.get('name', 'unknown')
                context.neurons[neuron_name] = stmt
                context.neural_activations += 1
                print(f"üß† –ù–µ–π—Ä–æ–Ω —Å–æ–∑–¥–∞–Ω: {neuron_name}")
                
            elif stmt_type == 'pulse_statement':
                signal = stmt.get('signal', {})
                context.signals.append(signal)
                context.signal_transmissions += 1
                print(f"‚ö° –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal}")
                
            elif stmt_type == 'expression_statement':
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                context.commands_executed += 1
                print(f"‚öôÔ∏è –í—ã—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stmt.get('expression', {})}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(0.001)
    
    async def _finalize_execution(self, context: ExecutionContext):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
            if self.memory_manager:
                memory_stats = await self.memory_manager.get_memory_stats()
                context.memory_peak = memory_stats.get('peak_usage', 0)
                self.execution_stats['peak_memory_usage'] = max(
                    self.execution_stats['peak_memory_usage'],
                    context.memory_peak
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.execution_stats['total_neural_activations'] += context.neural_activations
            self.execution_stats['total_signal_transmissions'] += context.signal_transmissions
            
            print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    def execute_file(self, filename: str, context: Optional[ExecutionContext] = None) -> ExecutionResult:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞."""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                source = f.read()
            
            if context:
                context.filename = filename
            else:
                context = ExecutionContext(filename=filename)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(self.execute_program(source, context))
            finally:
                loop.close()
                
        except FileNotFoundError:
            return ExecutionResult(
                success=False,
                error=f"File not found: {filename}",
                error_type="FileNotFoundError"
            )
        except Exception as e:
            return ExecutionResult(
                success=False,
                error=str(e),
                error_type=type(e).__name__
            )
    
    def get_execution_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return dict(self.execution_stats)
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.execution_stats = {
            'total_programs': 0,
            'successful_executions': 0,
            'failed_executions': 0,
            'total_execution_time': 0.0,
            'average_execution_time': 0.0,
            'peak_memory_usage': 0,
            'total_neural_activations': 0,
            'total_signal_transmissions': 0
        }
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–≤–∏–∂–∫–∞."""
        try:
            self.executor.shutdown(wait=True)
            
            if self.memory_manager:
                asyncio.run(self.memory_manager.cleanup())
            
            print("‚úÖ Execution Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã

class ProgramLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    
    @staticmethod
    def load_from_file(filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–∞–π–ª–∞."""
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    
    @staticmethod
    def load_from_string(source: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
        return source
    
    @staticmethod
    def validate_program(source: str) -> List[str]:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        errors = []
        
        if not source.strip():
            errors.append("Empty program")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        if source.count('(') != source.count(')'):
            errors.append("Unmatched parentheses")
        
        if source.count('[') != source.count(']'):
            errors.append("Unmatched brackets")
        
        if source.count('{') != source.count('}'):
            errors.append("Unmatched braces")
        
        return errors


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    
    def __init__(self):
        self.start_time = 0.0
        self.checkpoints = []
        self.memory_snapshots = []
    
    def start_monitoring(self):
        """–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.start_time = time.time()
        self.checkpoints = []
        self.memory_snapshots = []
    
    def checkpoint(self, name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ checkpoint'–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        current_time = time.time()
        elapsed = current_time - self.start_time
        
        self.checkpoints.append({
            'name': name,
            'timestamp': current_time,
            'elapsed': elapsed
        })
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        total_time = time.time() - self.start_time
        
        return {
            'total_execution_time': total_time,
            'checkpoints': self.checkpoints,
            'memory_snapshots': self.memory_snapshots,
            'average_checkpoint_time': (
                total_time / len(self.checkpoints) if self.checkpoints else 0
            )
        }


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
__all__ = [
    'ExecutionEngine',
    'ExecutionResult', 
    'ExecutionContext',
    'ProgramLoader',
    'PerformanceMonitor'
]


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Execution Engine
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EXECUTION ENGINE")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = ExecutionEngine()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    test_program = """
    neuro main_neuron {
        threshold: 0.5
        activation: sigmoid
    }
    
    synap connection_1 {
        source: input
        target: main_neuron
        weight: 0.8
    }
    
    pulse signal_data {
        target: main_neuron
        data: [1.0, 0.5, 0.3]
        intensity: 1.0
    }
    
    def process_signal(data) {
        filter data -> filtered
        encode filtered -> encoded
        return encoded
    }
    
    result = process_signal([1.0, 0.5, 0.3])
    """
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    try:
        result = asyncio.run(engine.execute_program(test_program))
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"–£—Å–ø–µ—Ö: {result.success}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.3f}—Å")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AST —É–∑–ª–æ–≤: {result.ast_nodes_processed}")
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {result.commands_executed}")
        print(f"–ù–µ–π—Ä–æ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {result.neural_activations}")
        print(f"–ü–µ—Ä–µ–¥–∞—á —Å–∏–≥–Ω–∞–ª–æ–≤: {result.signal_transmissions}")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {result.memory_usage} –±–∞–π—Ç")
        
        if not result.success:
            print(f"–û—à–∏–±–∫–∞: {result.error}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {result.error_type}")
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–í–ò–ñ–ö–ê:")
        stats = engine.get_execution_stats()
        for key, value in stats.items():
            print(f"{key}: {value}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        engine.shutdown()
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
