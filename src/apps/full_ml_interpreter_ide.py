#!/usr/bin/env python3
"""
AnamorphX IDE - Complete ML Edition
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è IDE —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è: —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, ML –ø–∞–Ω–µ–ª–∏
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Text, Canvas, Scrollbar
import os
import sys
import time
import threading
import random
import re
import json
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
import traceback

# –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
def _(text): 
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    translations = {
        "menu_file": "–§–∞–π–ª",
        "file_new": "–ù–æ–≤—ã–π",
        "file_open": "–û—Ç–∫—Ä—ã—Ç—å",
        "file_save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        "file_save_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫",
        "file_exit": "–í—ã—Ö–æ–¥",
        "menu_edit": "–ü—Ä–∞–≤–∫–∞",
        "edit_undo": "–û—Ç–º–µ–Ω–∏—Ç—å",
        "edit_redo": "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
        "edit_cut": "–í—ã—Ä–µ–∑–∞—Ç—å",
        "edit_copy": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
        "edit_paste": "–í—Å—Ç–∞–≤–∏—Ç—å",
        "menu_run": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "run_execute": "–í—ã–ø–æ–ª–Ω–∏—Ç—å",
        "run_debug": "–û—Ç–ª–∞–¥–∫–∞",
        "run_stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
        "menu_tools": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "panel_variables": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
        "panel_profiler": "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫",
        "menu_language": "–Ø–∑—ã–∫",
        "menu_help": "–°–ø—Ä–∞–≤–∫–∞"
    }
    return translations.get(text, text)

def get_language(): 
    return "ru"

def get_available_languages(): 
    return {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
HAS_FULL_ML = False
try:
    import torch
    import torch.nn as nn
    import torch.optim as optim
    from sklearn.feature_extraction.text import TfidfVectorizer
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    HAS_FULL_ML = True
    print("‚úÖ Full ML libraries loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è ML libraries not available: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è ML
    class torch:
        class nn:
            class Module: pass
            class LSTM: pass
            class Linear: pass
            class Embedding: pass
            class Dropout: pass
            class CrossEntropyLoss: pass
        class optim:
            class Adam: pass
        @staticmethod
        def randint(*args): return None
        @staticmethod
        def tensor(*args): return None
        @staticmethod
        def softmax(*args): return None
        @staticmethod
        def argmax(*args): return 0
        @staticmethod
        def max(*args): return 0.5
    
    class TfidfVectorizer:
        def __init__(self, **kwargs): pass
    
    class np:
        @staticmethod
        def random(): return [0.1, 0.2, 0.3]
        @staticmethod
        def array(data): return data
        @staticmethod
        def mean(data): return sum(data) / len(data)

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
INTERPRETER_READY = False
interpreter_components = {}

try:
    from interpreter.execution_engine import ExecutionEngine
    interpreter_components["ExecutionEngine"] = ExecutionEngine
    print("‚úÖ Execution Engine imported")
except Exception as e:
    print(f"‚ö†Ô∏è Execution Engine: {e}")

try:
    from interpreter.ast_interpreter import ASTInterpreter
    interpreter_components["ASTInterpreter"] = ASTInterpreter
    print("‚úÖ AST Interpreter imported")
except Exception as e:
    print(f"‚ö†Ô∏è AST Interpreter: {e}")

try:
    from interpreter.type_system import TypeSystem
    interpreter_components["TypeSystem"] = TypeSystem
    print("‚úÖ Type System imported")
except Exception as e:
    print(f"‚ö†Ô∏è Type System: {e}")

try:
    from interpreter.error_handler import ErrorHandler
    interpreter_components["ErrorHandler"] = ErrorHandler
    print("‚úÖ Error Handler imported")
except Exception as e:
    print(f"‚ö†Ô∏è Error Handler: {e}")

try:
    from interpreter.enhanced_memory_manager import EnhancedMemoryManager
    interpreter_components["MemoryManager"] = EnhancedMemoryManager
    print("‚úÖ Memory Manager imported")
except Exception as e:
    print(f"‚ö†Ô∏è Memory Manager: {e}")

try:
    from interpreter.commands import CommandRegistry
    interpreter_components["Commands"] = CommandRegistry
    print("‚úÖ Commands imported")
except Exception as e:
    print(f"‚ö†Ô∏è Commands: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
INTERPRETER_READY = len(interpreter_components) >= 3
print(f"ü§ñ Interpreter status: {'‚úÖ READY' if INTERPRETER_READY else '‚ö†Ô∏è PARTIAL'} ({len(interpreter_components)}/6 components)")

# –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ AnamorphX
ANAMORPHX_FILE_TEMPLATE = """// AnamorphX Neural Code
// –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AnamorphX Enhanced IDE

// –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
network MainNetwork {
    layer input(784)      // –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    layer hidden(128) {   // –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
        activation: relu
        dropout: 0.2
    }
    layer output(10) {    // –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        activation: softmax
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
training {
    optimizer: adam
    learning_rate: 0.001
    batch_size: 32
    epochs: 100
    loss: crossentropy
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initialize() {
    load_dataset("mnist")
    compile(MainNetwork)
    return "Network initialized"
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
function train() {
    for epoch in range(training.epochs) {
        loss = train_step(MainNetwork)
        if epoch % 10 == 0 {
            print("Epoch:", epoch, "Loss:", loss)
        }
    }
    save("trained_model.anamorph")
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
function main() {
    initialize()
    train()
    print("Training completed!")
}
"""

class AnamorphXInterpreter:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä AnamorphX"""
    
    def __init__(self):
        self.is_ready = INTERPRETER_READY
        self.components = interpreter_components.copy()
        self.current_program = ""
        self.execution_state = "idle"  # idle, running, error
        self.variables = {}
        self.output_buffer = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.initialize_components()
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        try:
            if "TypeSystem" in self.components:
                self.type_system = self.components["TypeSystem"]()
                print("üéØ Type System initialized")
            
            if "ErrorHandler" in self.components:
                self.error_handler = self.components["ErrorHandler"]()
                print("üõ°Ô∏è Error Handler initialized")
            
            if "MemoryManager" in self.components:
                self.memory_manager = self.components["MemoryManager"]()
                print("üíæ Memory Manager initialized")
            
            if "ExecutionEngine" in self.components:
                self.execution_engine = self.components["ExecutionEngine"]()
                print("‚ö° Execution Engine initialized")
            
            if "ASTInterpreter" in self.components:
                self.ast_interpreter = self.components["ASTInterpreter"]()
                print("üå≥ AST Interpreter initialized")
            
            if "Commands" in self.components:
                self.command_registry = self.components["Commands"]()
                print("üìã Command Registry initialized")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Component initialization error: {e}")
            self.is_ready = False
    
    def execute_code(self, code_text):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ AnamorphX"""
        if not self.is_ready:
            return self.simulate_execution(code_text)
        
        try:
            self.current_program = code_text
            self.execution_state = "running"
            self.output_buffer = []
            
            # –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if hasattr(self, 'ast_interpreter'):
                result = self.ast_interpreter.interpret(code_text)
                self.execution_state = "completed"
                return {
                    "success": True,
                    "result": result,
                    "output": self.output_buffer,
                    "variables": self.get_variables(),
                    "execution_time": 0.1
                }
            else:
                return self.simulate_execution(code_text)
                
        except Exception as e:
            self.execution_state = "error"
            error_msg = f"Execution error: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "traceback": traceback.format_exc(),
                "output": self.output_buffer
            }
    
    def simulate_execution(self, code_text):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        lines = code_text.strip().split('\n')
        output = []
        variables = {}
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line or line.startswith('//'):
                continue
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if 'synap' in line and '=' in line:
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                parts = line.split('=')
                if len(parts) == 2:
                    var_name = parts[0].replace('synap', '').strip()
                    var_value = parts[1].strip()
                    variables[var_name] = var_value
                    output.append(f"‚úÖ Line {i}: Created variable {var_name} = {var_value}")
            
            elif 'print' in line:
                # –í—ã–≤–æ–¥
                output.append(f"üìÑ Line {i}: Print statement executed")
            
            elif 'network' in line:
                # –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å
                output.append(f"üß† Line {i}: Neural network definition")
            
            elif 'function' in line:
                # –§—É–Ω–∫—Ü–∏—è
                output.append(f"‚öôÔ∏è Line {i}: Function definition")
            
            else:
                output.append(f"‚ö° Line {i}: Statement executed")
        
        return {
            "success": True,
            "result": "Program executed successfully",
            "output": output,
            "variables": variables,
            "execution_time": len(lines) * 0.05,
            "simulated": True
        }
    
    def get_variables(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if hasattr(self, 'memory_manager'):
            try:
                return self.memory_manager.get_all_variables()
            except:
                pass
        return self.variables
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        return {
            "ready": self.is_ready,
            "state": self.execution_state,
            "components": len(self.components),
            "has_real_interpreter": INTERPRETER_READY
        }

@dataclass
class MLAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç ML –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
    line_number: int
    code_line: str
    issue_type: str  # 'error', 'warning', 'optimization', 'suggestion'
    severity: str    # 'high', 'medium', 'low'
    message: str
    suggestion: str
    confidence: float
    ml_generated: bool = True

@dataclass
class NeuralNetworkState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    layers: List[Dict]
    weights: List[Any]
    activations: List[Any]
    training_loss: List[float]
    training_accuracy: List[float]
    current_epoch: int
    is_training: bool

class IntegratedMLEngine:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ML –¥–≤–∏–∂–æ–∫ - —Å–µ—Ä–¥—Ü–µ IDE"""
    
    def __init__(self, ide_instance):
        self.ide = ide_instance
        self.is_active = True
        self.analysis_cache = {}
        self.neural_networks = {}
        self.training_sessions = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML –±–∏–±–ª–∏–æ—Ç–µ–∫
        global HAS_FULL_ML
        self.has_full_ml = HAS_FULL_ML
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.initialize_ml_components()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        self.auto_analysis_enabled = True
        self.analysis_delay = 1000  # –º—Å
        
    def initialize_ml_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        global HAS_FULL_ML
        if HAS_FULL_ML:
            self.initialize_real_ml()
        else:
            self.initialize_simulated_ml()
    
    def initialize_real_ml(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ ML"""
        global HAS_FULL_ML
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
            self.code_analyzer = self.create_code_analysis_model()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            self.autocomplete_model = self.create_autocomplete_model()
            
            # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
            self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
            
            # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
            self.train_initial_models()
            
            print("ü§ñ Real ML engine initialized")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ML initialization error: {e}")
            self.initialize_simulated_ml()
    
    def create_code_analysis_model(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        class CodeAnalysisNet(nn.Module):
            def __init__(self, vocab_size=1000, embed_dim=64, hidden_dim=128):
                super().__init__()
                self.embedding = nn.Embedding(vocab_size, embed_dim)
                self.lstm = nn.LSTM(embed_dim, hidden_dim, batch_first=True)
                self.classifier = nn.Linear(hidden_dim, 4)  # 4 —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
                self.dropout = nn.Dropout(0.3)
                
            def forward(self, x):
                embedded = self.embedding(x)
                lstm_out, _ = self.lstm(embedded)
                last_hidden = lstm_out[:, -1, :]
                output = self.classifier(self.dropout(last_hidden))
                return output
        
        return CodeAnalysisNet()
    
    def create_autocomplete_model(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        class AutocompleteNet(nn.Module):
            def __init__(self, vocab_size=1000, embed_dim=64, hidden_dim=128):
                super().__init__()
                self.embedding = nn.Embedding(vocab_size, embed_dim)
                self.lstm = nn.LSTM(embed_dim, hidden_dim, batch_first=True)
                self.output = nn.Linear(hidden_dim, vocab_size)
                
            def forward(self, x):
                embedded = self.embedding(x)
                lstm_out, _ = self.lstm(embedded)
                output = self.output(lstm_out)
                return output
        
        return AutocompleteNet()
    
    def train_initial_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        training_patterns = [
            ("for i in range(len(", "optimization", "Use enumerate() instead"),
            ("if x == None:", "error", "Use 'is None' instead"),
            ("except:", "error", "Specify exception type"),
            ("neuron {", "info", "Neural network definition"),
            ("network {", "info", "Network architecture"),
            ("activation:", "info", "Activation function"),
            ("weights:", "info", "Weight initialization"),
            ("learning_rate:", "info", "Learning parameter"),
        ]
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—ã–ª–æ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º)
        if HAS_FULL_ML:
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                texts = [pattern[0] for pattern in training_patterns]
                labels = [self.get_issue_type_id(pattern[1]) for pattern in training_patterns]
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                X = torch.randint(0, 1000, (len(texts), 10))
                y = torch.tensor(labels, dtype=torch.long)
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
                optimizer = optim.Adam(self.code_analyzer.parameters(), lr=0.001)
                criterion = nn.CrossEntropyLoss()
                
                for epoch in range(20):
                    optimizer.zero_grad()
                    outputs = self.code_analyzer(X)
                    loss = criterion(outputs, y)
                    loss.backward()
                    optimizer.step()
                
                print("üéØ ML models trained successfully")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Training error: {e}")
    
    def get_issue_type_id(self, issue_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        types = {"error": 0, "warning": 1, "optimization": 2, "info": 3}
        return types.get(issue_type, 3)
    
    def initialize_simulated_ml(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ML"""
        self.code_patterns = [
            (r"for\s+\w+\s+in\s+range\(len\(", "optimization", "medium", "Consider using enumerate()"),
            (r"==\s*None", "error", "high", "Use 'is None' instead of '== None'"),
            (r"except\s*:", "error", "high", "Specify exception type"),
            (r"neuron\s*\{", "neural", "info", "Neural network component detected"),
            (r"network\s*\{", "neural", "info", "Network architecture detected"),
            (r"activation\s*:", "neural", "info", "Activation function specified"),
            (r"weights\s*:", "neural", "info", "Weight parameter detected"),
            (r"learning_rate\s*:", "neural", "info", "Learning rate parameter"),
        ]
        
        print("ü§ñ Simulated ML engine initialized")
    
    def analyze_code_realtime(self, code_text):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.is_active:
            return []
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        code_hash = hash(code_text)
        if code_hash in self.analysis_cache:
            return self.analysis_cache[code_hash]
        
        results = []
        
        if HAS_FULL_ML and hasattr(self, 'code_analyzer'):
            results = self.analyze_with_real_ml(code_text)
        else:
            results = self.analyze_with_patterns(code_text)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.analysis_cache[code_hash] = results
        
        return results
    
    def analyze_with_real_ml(self, code_text):
        """–ê–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º ML"""
        results = []
        lines = code_text.split('\n')
        
        try:
            for i, line in enumerate(lines, 1):
                if line.strip():
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º)
                    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    input_tensor = torch.randint(0, 1000, (1, 10))
                    
                    with torch.no_grad():
                        output = self.code_analyzer(input_tensor)
                        probabilities = torch.softmax(output, dim=1)
                        predicted_class = torch.argmax(probabilities, dim=1).item()
                        confidence = torch.max(probabilities).item()
                    
                    # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if confidence > 0.7:
                        issue_types = ["error", "warning", "optimization", "info"]
                        issue_type = issue_types[predicted_class]
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
                        pattern_result = self.check_line_patterns(line)
                        if pattern_result:
                            results.append(MLAnalysisResult(
                                line_number=i,
                                code_line=line.strip(),
                                issue_type=pattern_result[0],
                                severity=pattern_result[1],
                                message=f"ML detected {issue_type} issue",
                                suggestion=pattern_result[2],
                                confidence=confidence,
                                ml_generated=True
                            ))
        
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º print –µ—Å–ª–∏ UI –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if hasattr(self.ide, 'log_to_console'):
                print(f"ML analysis error: {e}")
            else:
                print(f"ML analysis error: {e}")
            return self.analyze_with_patterns(code_text)
        
        return results
    
    def analyze_with_patterns(self, code_text):
        """–ê–Ω–∞–ª–∏–∑ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        results = []
        lines = code_text.split('\n')
        
        for i, line in enumerate(lines, 1):
            if line.strip():
                pattern_result = self.check_line_patterns(line)
                if pattern_result:
                    results.append(MLAnalysisResult(
                        line_number=i,
                        code_line=line.strip(),
                        issue_type=pattern_result[0],
                        severity=pattern_result[1],
                        message=f"Pattern analysis: {pattern_result[0]}",
                        suggestion=pattern_result[2],
                        confidence=0.8 + random.random() * 0.2,
                        ml_generated=False
                    ))
        
        return results
    
    def check_line_patterns(self, line):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        for pattern, issue_type, severity, suggestion in self.code_patterns:
            if re.search(pattern, line, re.IGNORECASE):
                return (issue_type, severity, suggestion)
        return None
    
    def get_autocomplete_suggestions(self, context, cursor_pos):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å ML"""
        if not self.is_active:
            return []
        
        # –ë–∞–∑–æ–≤—ã–µ AnamorphX –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        anamorph_keywords = [
            "neuron", "network", "activation", "weights", "bias", "learning_rate",
            "forward", "backward", "train", "evaluate", "sigmoid", "relu", "softmax",
            "linear", "dropout", "batch_size", "epochs", "optimizer", "loss",
            "function", "if", "else", "for", "while", "return", "import", "export",
            "layer", "dense", "conv", "pool", "flatten", "reshape", "normalize"
        ]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        current_word = self.get_current_word(context, cursor_pos)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        suggestions = [kw for kw in anamorph_keywords if kw.startswith(current_word.lower())]
        
        # ML-—É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if HAS_FULL_ML and hasattr(self, 'autocomplete_model'):
            ml_suggestions = self.get_ml_suggestions(context, current_word)
            suggestions.extend(ml_suggestions)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        context_suggestions = self.get_context_suggestions(context, current_word)
        suggestions.extend(context_suggestions)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        suggestions = list(set(suggestions))
        suggestions.sort(key=lambda x: (not x.startswith(current_word.lower()), len(x)))
        
        return suggestions[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def get_current_word(self, text, cursor_pos):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
        if cursor_pos > len(text):
            cursor_pos = len(text)
        
        start = cursor_pos
        while start > 0 and (text[start-1].isalnum() or text[start-1] == '_'):
            start -= 1
        
        end = cursor_pos
        while end < len(text) and (text[end].isalnum() or text[end] == '_'):
            end += 1
        
        return text[start:end]
    
    def get_ml_suggestions(self, context, current_word):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è ML –ª–æ–≥–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –±—ã —Å–ª–æ–∂–Ω–µ–µ)
            if "neuron" in context.lower():
                return ["activation", "weights", "bias"]
            elif "network" in context.lower():
                return ["layers", "neurons", "connections"]
            elif "train" in context.lower():
                return ["epochs", "learning_rate", "batch_size"]
            else:
                return []
        except:
            return []
    
    def get_context_suggestions(self, context, current_word):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        suggestions = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if "activation:" in context:
            suggestions.extend(["relu", "sigmoid", "tanh", "softmax", "linear"])
        elif "optimizer:" in context:
            suggestions.extend(["adam", "sgd", "rmsprop", "adagrad"])
        elif "loss:" in context:
            suggestions.extend(["mse", "crossentropy", "mae", "huber"])
        
        return [s for s in suggestions if s.startswith(current_word.lower())]
    
    def create_neural_network_visualization(self, canvas):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        if not HAS_FULL_ML:
            return self.create_simulated_neural_viz(canvas)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            fig, ax = plt.subplots(figsize=(8, 6))
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            layers = [4, 6, 4, 2]  # –ü—Ä–∏–º–µ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            
            for i, layer_size in enumerate(layers):
                x = i * 2
                for j in range(layer_size):
                    y = j - layer_size / 2
                    circle = plt.Circle((x, y), 0.3, color='lightblue', ec='black')
                    ax.add_patch(circle)
                    
                    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–µ–º
                    if i < len(layers) - 1:
                        next_layer_size = layers[i + 1]
                        for k in range(next_layer_size):
                            next_y = k - next_layer_size / 2
                            ax.plot([x + 0.3, (i + 1) * 2 - 0.3], [y, next_y], 'k-', alpha=0.3)
            
            ax.set_xlim(-0.5, (len(layers) - 1) * 2 + 0.5)
            ax.set_ylim(-max(layers) / 2 - 1, max(layers) / 2 + 1)
            ax.set_aspect('equal')
            ax.axis('off')
            ax.set_title('Neural Network Architecture')
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ Tkinter
            canvas_widget = FigureCanvasTkAgg(fig, canvas)
            canvas_widget.draw()
            canvas_widget.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            plt.close(fig)
            
        except Exception as e:
            print(f"Neural viz error: {e}")
            self.create_simulated_neural_viz(canvas)
    
    def create_simulated_neural_viz(self, canvas):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        canvas.delete("all")
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        width = canvas.winfo_width() or 400
        height = canvas.winfo_height() or 300
        
        layers = [4, 6, 4, 2]
        layer_width = width // (len(layers) + 1)
        
        for i, layer_size in enumerate(layers):
            x = (i + 1) * layer_width
            layer_height = height // (layer_size + 1)
            
            for j in range(layer_size):
                y = (j + 1) * layer_height
                
                # –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–∞
                canvas.create_oval(x-15, y-15, x+15, y+15, 
                                 fill='lightblue', outline='black', width=2)
                
                # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if i < len(layers) - 1:
                    next_layer_size = layers[i + 1]
                    next_x = (i + 2) * layer_width
                    next_layer_height = height // (next_layer_size + 1)
                    
                    for k in range(next_layer_size):
                        next_y = (k + 1) * next_layer_height
                        canvas.create_line(x+15, y, next_x-15, next_y, 
                                         fill='gray', width=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        canvas.create_text(width//2, 20, text="Neural Network Visualization", 
                          font=("Arial", 12, "bold"))
    
    def start_training_visualization(self, canvas):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
        if not hasattr(self, 'training_thread') or not self.training_thread.is_alive():
            self.training_thread = threading.Thread(
                target=self.training_simulation, 
                args=(canvas,), 
                daemon=True
            )
            self.training_thread.start()
    
    def training_simulation(self, canvas):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        epochs = 100
        losses = []
        accuracies = []
        
        for epoch in range(epochs):
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            loss = 2.0 * np.exp(-epoch / 20) + 0.1 + random.random() * 0.1
            accuracy = 1.0 - np.exp(-epoch / 15) * 0.8 + random.random() * 0.05
            
            losses.append(loss)
            accuracies.append(accuracy)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            self.ide.root.after(0, lambda: self.update_training_plot(canvas, losses, accuracies, epoch))
            
            time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    def update_training_plot(self, canvas, losses, accuracies, epoch):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        if not HAS_FULL_ML:
            return self.update_simulated_training_plot(canvas, losses, accuracies, epoch)
        
        try:
            canvas.delete("all")
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å
            ax1.plot(losses, 'r-', label='Loss')
            ax1.set_title('Training Loss')
            ax1.set_xlabel('Epoch')
            ax1.set_ylabel('Loss')
            ax1.grid(True)
            ax1.legend()
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
            ax2.plot(accuracies, 'b-', label='Accuracy')
            ax2.set_title('Training Accuracy')
            ax2.set_xlabel('Epoch')
            ax2.set_ylabel('Accuracy')
            ax2.grid(True)
            ax2.legend()
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ Tkinter
            canvas_widget = FigureCanvasTkAgg(fig, canvas)
            canvas_widget.draw()
            canvas_widget.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            plt.close(fig)
            
        except Exception as e:
            print(f"Training plot error: {e}")
            self.update_simulated_training_plot(canvas, losses, accuracies, epoch)
    
    def update_simulated_training_plot(self, canvas, losses, accuracies, epoch):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        canvas.delete("all")
        
        width = canvas.winfo_width() or 400
        height = canvas.winfo_height() or 300
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if losses and accuracies:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
            loss_width = width // 2 - 20
            loss_height = height - 60
            
            max_loss = max(losses) if losses else 1
            min_loss = min(losses) if losses else 0
            
            for i in range(1, len(losses)):
                x1 = 10 + (i - 1) * loss_width / len(losses)
                y1 = 40 + (1 - (losses[i-1] - min_loss) / (max_loss - min_loss)) * loss_height
                x2 = 10 + i * loss_width / len(losses)
                y2 = 40 + (1 - (losses[i] - min_loss) / (max_loss - min_loss)) * loss_height
                
                canvas.create_line(x1, y1, x2, y2, fill='red', width=2)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
            acc_start = width // 2 + 10
            acc_width = width // 2 - 20
            
            for i in range(1, len(accuracies)):
                x1 = acc_start + (i - 1) * acc_width / len(accuracies)
                y1 = 40 + (1 - accuracies[i-1]) * loss_height
                x2 = acc_start + i * acc_width / len(accuracies)
                y2 = 40 + (1 - accuracies[i]) * loss_height
                
                canvas.create_line(x1, y1, x2, y2, fill='blue', width=2)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        canvas.create_text(width//4, 20, text=f"Loss (Epoch {epoch})", 
                          font=("Arial", 10, "bold"), fill='red')
        canvas.create_text(3*width//4, 20, text=f"Accuracy (Epoch {epoch})", 
                          font=("Arial", 10, "bold"), fill='blue')

class UnifiedMLIDE:
    """–ï–¥–∏–Ω–∞—è IDE —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ML"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AnamorphX IDE - Unified ML Edition + Interpreter")
        self.root.geometry("1600x1000")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ AnamorphX
        self.interpreter = AnamorphXInterpreter()
        print(f"ü§ñ Interpreter integrated: {'‚úÖ READY' if self.interpreter.is_ready else '‚ö†Ô∏è PARTIAL'}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –¥–≤–∏–∂–∫–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ IDE
        self.ml_engine = IntegratedMLEngine(self)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ IDE
        self.is_debugging = False
        self.is_running = False
        self.current_line = 1
        self.breakpoints = set()
        self.variables = {}
        self.call_stack = []
        
        # –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.current_file = None
        self.file_modified = False
        
        # ML —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        self.ml_analysis_results = []
        self.neural_viz_active = False
        self.training_active = False
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.ui_elements = {}
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å–æ–ª–∏
        self.console_history = []
        self.console_history_index = -1
        
        self.setup_ui()
        self.load_sample_code()
        self.setup_ml_integration()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ML"""
        self.create_menu()
        self.create_toolbar()
        self.create_main_interface()
        self.create_status_bar()
        self.setup_hotkeys()
        
    def setup_ml_integration(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        self.setup_realtime_analysis()
        
        # ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.setup_ml_autocomplete()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.setup_realtime_visualization()
        
        self.log_to_console("ü§ñ ML integration fully activated")
    
    def setup_realtime_analysis(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        def analyze_periodically():
            if self.ml_engine.auto_analysis_enabled:
                code = self.text_editor.get("1.0", tk.END)
                self.ml_analysis_results = self.ml_engine.analyze_code_realtime(code)
                self.update_ml_highlights()
            
            self.root.after(self.ml_engine.analysis_delay, analyze_periodically)
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.root.after(2000, analyze_periodically)
    
    def setup_ml_autocomplete(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.autocomplete_window = None
        self.autocomplete_active = True
    
    def setup_realtime_visualization(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        def update_visualizations():
            if self.neural_viz_active and hasattr(self, 'neural_canvas'):
                self.ml_engine.create_neural_network_visualization(self.neural_canvas)
            
            self.root.after(5000, update_visualizations)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        self.root.after(5000, update_visualizations)
    
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        self.menubar = tk.Menu(self.root)
        self.root.config(menu=self.menubar)
        
        # –§–∞–π–ª
        self.file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_file"), menu=self.file_menu)
        self.file_menu.add_command(label=_("file_new"), command=self.new_file, accelerator="Ctrl+N")
        self.file_menu.add_command(label=_("file_open"), command=self.open_file, accelerator="Ctrl+O")
        self.file_menu.add_command(label=_("file_save"), command=self.save_file, accelerator="Ctrl+S")
        self.file_menu.add_command(label=_("file_save_as"), command=self.save_file_as)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="ü§ñ ML Analysis Report", command=self.export_ml_analysis)
        self.file_menu.add_separator()
        self.file_menu.add_command(label=_("file_exit"), command=self.root.quit)
        
        # –ü—Ä–∞–≤–∫–∞ —Å ML
        self.edit_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_edit"), menu=self.edit_menu)
        self.edit_menu.add_command(label=_("edit_undo"), command=self.undo, accelerator="Ctrl+Z")
        self.edit_menu.add_command(label=_("edit_redo"), command=self.redo, accelerator="Ctrl+Y")
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=_("edit_cut"), command=self.cut, accelerator="Ctrl+X")
        self.edit_menu.add_command(label=_("edit_copy"), command=self.copy, accelerator="Ctrl+C")
        self.edit_menu.add_command(label=_("edit_paste"), command=self.paste, accelerator="Ctrl+V")
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label="ü§ñ ML Auto-complete", command=self.toggle_ml_autocomplete, accelerator="Ctrl+Space")
        self.edit_menu.add_command(label="üîç ML Code Analysis", command=self.run_full_ml_analysis, accelerator="Ctrl+M")
        self.edit_menu.add_command(label="‚ú® ML Code Optimization", command=self.apply_ml_optimizations)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å ML
        self.run_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_run"), menu=self.run_menu)
        self.run_menu.add_command(label=_("run_execute"), command=self.run_code, accelerator="F5")
        self.run_menu.add_command(label="ü§ñ Run with ML Analysis", command=self.run_with_ml_analysis, accelerator="Shift+F5")
        self.run_menu.add_command(label=_("run_debug"), command=self.debug_code)
        self.run_menu.add_command(label="üß† Debug with Neural Insights", command=self.debug_with_ml)
        self.run_menu.add_separator()
        self.run_menu.add_command(label=_("run_stop"), command=self.stop_execution)
        
        # ML –º–µ–Ω—é (–æ—Å–Ω–æ–≤–Ω–æ–µ)
        self.ml_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="ü§ñ Machine Learning", menu=self.ml_menu)
        self.ml_menu.add_command(label="üîç Real-time Analysis", command=self.toggle_realtime_analysis)
        self.ml_menu.add_command(label="üß† Neural Visualization", command=self.show_neural_visualization)
        self.ml_menu.add_command(label="üìà Training Monitor", command=self.show_training_monitor)
        self.ml_menu.add_command(label="üí° Smart Suggestions", command=self.show_ml_suggestions)
        self.ml_menu.add_separator()
        self.ml_menu.add_command(label="üéõÔ∏è ML Settings", command=self.show_ml_settings)
        self.ml_menu.add_command(label="üìä ML Performance", command=self.show_ml_performance)
        self.ml_menu.add_command(label="üîß Train Custom Model", command=self.train_custom_model)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.tools_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_tools"), menu=self.tools_menu)
        self.tools_menu.add_command(label=_("panel_variables"), command=self.show_variables)
        self.tools_menu.add_command(label="ü§ñ ML Variables", command=self.show_ml_variables)
        self.tools_menu.add_command(label=_("panel_profiler"), command=self.show_profiler)
        self.tools_menu.add_command(label="üß† Neural Profiler", command=self.show_neural_profiler)
        
        # –Ø–∑—ã–∫
        self.language_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_language"), menu=self.language_menu)
        for lang_code, lang_name in get_available_languages().items():
            self.language_menu.add_command(
                label=lang_name,
                command=lambda code=lang_code: self.change_language(code)
            )
        
        # –°–ø—Ä–∞–≤–∫–∞
        self.help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=_("menu_help"), menu=self.help_menu)
        self.help_menu.add_command(label="About AnamorphX ML IDE", command=self.show_about)
        self.help_menu.add_command(label="ü§ñ ML Features Guide", command=self.show_ml_help)
        self.help_menu.add_command(label="üß† Neural Network Tutorial", command=self.show_neural_tutorial)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å ML"""
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(side=tk.TOP, fill=tk.X, padx=5, pady=2)
        
        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        file_frame = ttk.Frame(self.toolbar)
        file_frame.pack(side=tk.LEFT)
        
        ttk.Button(file_frame, text="üìÑ", command=self.new_file, width=3).pack(side=tk.LEFT, padx=1)
        ttk.Button(file_frame, text="üìÅ", command=self.open_file, width=3).pack(side=tk.LEFT, padx=1)
        ttk.Button(file_frame, text="üíæ", command=self.save_file, width=3).pack(side=tk.LEFT, padx=1)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=3)
        
        # ML –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        ml_frame = ttk.Frame(self.toolbar)
        ml_frame.pack(side=tk.LEFT)
        
        self.btn_ml_analyze = ttk.Button(ml_frame, text="ü§ñ Analyze", command=self.run_full_ml_analysis)
        self.btn_ml_analyze.pack(side=tk.LEFT, padx=2)
        
        self.btn_neural_viz = ttk.Button(ml_frame, text="üß† Neural", command=self.show_neural_visualization)
        self.btn_neural_viz.pack(side=tk.LEFT, padx=2)
        
        self.btn_ml_train = ttk.Button(ml_frame, text="üìà Train", command=self.show_training_monitor)
        self.btn_ml_train.pack(side=tk.LEFT, padx=2)
        
        self.btn_ml_suggest = ttk.Button(ml_frame, text="üí° Suggest", command=self.show_ml_suggestions)
        self.btn_ml_suggest.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=3)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        run_frame = ttk.Frame(self.toolbar)
        run_frame.pack(side=tk.LEFT)
        
        self.btn_run = ttk.Button(run_frame, text=_("btn_run"), command=self.run_code)
        self.btn_run.pack(side=tk.LEFT, padx=2)
        
        self.btn_run_ml = ttk.Button(run_frame, text="ü§ñ Run+ML", command=self.run_with_ml_analysis)
        self.btn_run_ml.pack(side=tk.LEFT, padx=2)
        
        self.btn_debug = ttk.Button(run_frame, text=_("btn_debug"), command=self.debug_code)
        self.btn_debug.pack(side=tk.LEFT, padx=2)
        
        self.btn_debug_ml = ttk.Button(run_frame, text="üß† Debug+ML", command=self.debug_with_ml)
        self.btn_debug_ml.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=3)
        
        # Neural Backend –∫–Ω–æ–ø–∫–∏
        neural_frame = ttk.Frame(self.toolbar)
        neural_frame.pack(side=tk.LEFT, padx=5)
        
        self.btn_generate_pytorch = ttk.Button(neural_frame, text="üèóÔ∏è Generate PyTorch", command=self.generate_pytorch_model)
        self.btn_generate_pytorch.pack(side=tk.LEFT, padx=2)
        
        self.btn_neural_analysis = ttk.Button(neural_frame, text="üß† Neural Analysis", command=self.analyze_neural_networks)
        self.btn_neural_analysis.pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(self.toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=3)
        
        # ML —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ml_status_frame = ttk.Frame(self.toolbar)
        ml_status_frame.pack(side=tk.RIGHT, padx=5)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.realtime_var = tk.BooleanVar(value=True)
        self.realtime_check = ttk.Checkbutton(
            ml_status_frame, 
            text="üîÑ Real-time ML", 
            variable=self.realtime_var,
            command=self.toggle_realtime_analysis
        )
        self.realtime_check.pack(side=tk.RIGHT, padx=5)
        
        # ML —Å—Ç–∞—Ç—É—Å
        ml_status_text = "ü§ñ ML: " + ("‚úÖ Full" if HAS_FULL_ML else "‚ö†Ô∏è Simulated")
        self.ml_status_label = ttk.Label(ml_status_frame, text=ml_status_text, font=("Arial", 9))
        self.ml_status_label.pack(side=tk.RIGHT, padx=5)
        
        # –Ø–∑—ã–∫
        lang_frame = ttk.Frame(self.toolbar)
        lang_frame.pack(side=tk.RIGHT, padx=10)
        
        ttk.Label(lang_frame, text=_("menu_language") + ":").pack(side=tk.LEFT, padx=2)
        
        self.language_var = tk.StringVar(value=get_language())
        self.language_combo = ttk.Combobox(
            lang_frame,
            textvariable=self.language_var,
            values=list(get_available_languages().keys()),
            state="readonly",
            width=5
        )
        self.language_combo.pack(side=tk.LEFT, padx=2)
        self.language_combo.bind('<<ComboboxSelected>>', self.on_language_change)
    
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ML"""
        # –ì–ª–∞–≤–Ω—ã–π PanedWindow
        self.main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫)
        self.left_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.left_frame, weight=1)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å ML)
        self.center_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.center_frame, weight=4)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã + ML)
        self.right_frame = ttk.Frame(self.main_paned)
        self.main_paned.add(self.right_frame, weight=2)
        
        self.create_file_explorer()
        self.create_ml_enhanced_editor()
        self.create_integrated_tools_panel()
    
    def create_file_explorer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        explorer_label = ttk.Label(self.left_frame, text="üìÅ Project Explorer", font=("Arial", 10, "bold"))
        explorer_label.pack(anchor="w", padx=5, pady=2)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.file_tree = ttk.Treeview(self.left_frame)
        self.file_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        self.populate_file_tree()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.file_tree.bind('<Double-1>', self.on_file_double_click)
    
    def populate_file_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = self.file_tree.insert("", "end", text="üìÅ AnamorphX ML Project", open=True, values=("folder",))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.file_tree.insert(project_root, "end", text="üìÑ main.anamorph", values=("file",))
        self.file_tree.insert(project_root, "end", text="üìÑ neural_classifier.anamorph", values=("file",))
        self.file_tree.insert(project_root, "end", text="üìÑ deep_network.anamorph", values=("file",))
        
        # –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π
        models_folder = self.file_tree.insert(project_root, "end", text="üìÅ models", values=("folder",))
        self.file_tree.insert(models_folder, "end", text="üìÑ cnn_model.anamorph", values=("file",))
        self.file_tree.insert(models_folder, "end", text="üìÑ rnn_model.anamorph", values=("file",))
        self.file_tree.insert(models_folder, "end", text="üìÑ transformer.anamorph", values=("file",))
    
    def create_ml_enhanced_editor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        editor_frame = ttk.Frame(self.center_frame)
        editor_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML —Å—Ç–∞—Ç—É—Å–æ–º
        editor_header = ttk.Frame(editor_frame)
        editor_header.pack(fill=tk.X, pady=(0, 2))
        
        self.file_label = ttk.Label(editor_header, text="üìÑ Untitled.anamorph", font=("Arial", 10, "bold"))
        self.file_label.pack(side=tk.LEFT)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.modified_label = ttk.Label(editor_header, text="", foreground="red")
        self.modified_label.pack(side=tk.LEFT, padx=5)
        
        # ML —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∞–π–ª–∞
        self.ml_file_status = ttk.Label(editor_header, text="ü§ñ ML: Ready", font=("Arial", 9), foreground="green")
        self.ml_file_status.pack(side=tk.RIGHT, padx=5)
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
        text_frame = tk.Frame(editor_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Å ML –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.line_numbers = Text(text_frame, width=6, padx=3, takefocus=0,
                                border=0, state='disabled', wrap='none',
                                font=("Consolas", 11), bg="#f0f0f0", fg="#666666")
        self.line_numbers.pack(side=tk.LEFT, fill=tk.Y)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å ML
        self.text_editor = Text(text_frame, wrap=tk.NONE, undo=True, 
                               font=("Consolas", 11), bg="white", fg="black",
                               insertbackground="black", selectbackground="#316AC5")
        self.text_editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.sync_scroll)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_editor.config(yscrollcommand=v_scrollbar.set)
        self.line_numbers.config(yscrollcommand=v_scrollbar.set)
        
        h_scrollbar = ttk.Scrollbar(editor_frame, orient=tk.HORIZONTAL, command=self.text_editor.xview)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        self.text_editor.config(xscrollcommand=h_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Å ML
        self.setup_ml_text_tags()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å ML
        self.setup_ml_editor_events()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.update_line_numbers()
    
    def setup_ml_text_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å ML"""
        # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ AnamorphX
        self.text_editor.tag_configure("keyword", foreground="#0000FF", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("string", foreground="#008000")
        self.text_editor.tag_configure("comment", foreground="#808080", font=("Consolas", 11, "italic"))
        self.text_editor.tag_configure("number", foreground="#FF0000")
        self.text_editor.tag_configure("function", foreground="#800080", font=("Consolas", 11, "bold"))
        
        # AnamorphX —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ–≥–∏
        self.text_editor.tag_configure("neuron", foreground="#FF8000", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("network", foreground="#000080", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("activation", foreground="#008080", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("layer", foreground="#4B0082", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("optimizer", foreground="#DC143C", font=("Consolas", 11, "bold"))
        self.text_editor.tag_configure("loss", foreground="#B22222", font=("Consolas", 11, "bold"))
        
        # ML –∞–Ω–∞–ª–∏–∑ —Ç–µ–≥–∏
        self.text_editor.tag_configure("ml_error", background="#FFCCCB", underline=True)
        self.text_editor.tag_configure("ml_warning", background="#FFE4B5", underline=True)
        self.text_editor.tag_configure("ml_optimization", background="#E0FFE0", underline=True)
        self.text_editor.tag_configure("ml_suggestion", background="#E6E6FA", underline=True)
        self.text_editor.tag_configure("ml_neural", background="#F0F8FF", underline=True)
        
        # –û—Ç–ª–∞–¥–∫–∞
        self.text_editor.tag_configure("current_line", background="#E6F3FF")
        self.text_editor.tag_configure("breakpoint", background="#FF6B6B", foreground="white")
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Å ML –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.line_numbers.tag_configure("breakpoint", background="#FF6B6B", foreground="white")
        self.line_numbers.tag_configure("current", background="#E6F3FF")
        self.line_numbers.tag_configure("ml_issue", background="#FFE4B5")
        self.line_numbers.tag_configure("ml_suggestion", background="#E6E6FA")
    
    def setup_ml_editor_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å ML"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.text_editor.bind('<KeyRelease>', self.on_ml_text_change)
        self.text_editor.bind('<Button-1>', self.on_ml_editor_click)
        self.text_editor.bind('<ButtonRelease-1>', self.on_ml_editor_click)
        
        # ML —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.text_editor.bind('<Control-space>', self.trigger_ml_autocomplete)
        self.text_editor.bind('<Control-m>', lambda e: self.run_full_ml_analysis())
        
        # –°–æ–±—ã—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.line_numbers.bind('<Button-1>', self.on_line_number_click)
        self.line_numbers.bind('<Button-3>', self.on_line_number_right_click)
    
    def create_integrated_tools_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å ML"""
        self.right_notebook = ttk.Notebook(self.right_frame)
        self.right_notebook.pack(fill=tk.BOTH, expand=True)
        
        # ML –∞–Ω–∞–ª–∏–∑ (–æ—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
        self.create_ml_analysis_panel()
        
        # –ù–µ–π—Ä–æ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.create_neural_visualization_panel()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è
        self.create_training_monitoring_panel()
        
        # –ö–æ–Ω—Å–æ–ª—å —Å ML
        self.create_ml_console_panel()
    
    def create_ml_analysis_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ ML –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(analysis_frame, text="ü§ñ ML Analysis")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        header_frame = ttk.Frame(analysis_frame)
        header_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Label(header_frame, text="Real-time Code Analysis", font=("Arial", 10, "bold")).pack(side=tk.LEFT)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
        self.auto_analysis_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(header_frame, text="Auto", variable=self.auto_analysis_var, 
                       command=self.toggle_auto_analysis).pack(side=tk.RIGHT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(analysis_frame)
        control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(control_frame, text="üîç Analyze Now", command=self.run_full_ml_analysis).pack(side=tk.LEFT, padx=2)
        ttk.Button(control_frame, text="‚ú® Apply Fixes", command=self.apply_ml_fixes).pack(side=tk.LEFT, padx=2)
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.ml_analysis_tree = ttk.Treeview(analysis_frame, 
                                           columns=("type", "severity", "confidence", "suggestion"), 
                                           show="tree headings")
        self.ml_analysis_tree.heading("#0", text="Line")
        self.ml_analysis_tree.heading("type", text="Type")
        self.ml_analysis_tree.heading("severity", text="Severity")
        self.ml_analysis_tree.heading("confidence", text="Confidence")
        self.ml_analysis_tree.heading("suggestion", text="Suggestion")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.ml_analysis_tree.column("#0", width=50)
        self.ml_analysis_tree.column("type", width=80)
        self.ml_analysis_tree.column("severity", width=60)
        self.ml_analysis_tree.column("confidence", width=70)
        self.ml_analysis_tree.column("suggestion", width=200)
        
        self.ml_analysis_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        stats_frame = ttk.LabelFrame(analysis_frame, text="Analysis Statistics")
        stats_frame.pack(fill=tk.X, padx=5, pady=2)
        
        self.analysis_stats_label = ttk.Label(stats_frame, text="No analysis performed yet", font=("Arial", 9))
        self.analysis_stats_label.pack(padx=5, pady=2)
    
    def create_neural_visualization_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        neural_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(neural_frame, text="üß† Neural Viz")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        viz_control_frame = ttk.Frame(neural_frame)
        viz_control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(viz_control_frame, text="üéØ Show Architecture", command=self.show_network_architecture).pack(side=tk.LEFT, padx=2)
        ttk.Button(viz_control_frame, text="üîÑ Refresh", command=self.refresh_neural_viz).pack(side=tk.LEFT, padx=2)
        
        # Canvas –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.neural_canvas = Canvas(neural_frame, bg="white", height=300)
        self.neural_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.neural_viz_active = True
        self.root.after(1000, self.initialize_neural_visualization)
    
    def create_training_monitoring_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
        training_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(training_frame, text="üìà Training")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–µ–º
        training_control_frame = ttk.Frame(training_frame)
        training_control_frame.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(training_control_frame, text="‚ñ∂Ô∏è Start Training", command=self.start_ml_training).pack(side=tk.LEFT, padx=2)
        ttk.Button(training_control_frame, text="‚èπÔ∏è Stop", command=self.stop_ml_training).pack(side=tk.LEFT, padx=2)
        
        # Canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        self.training_canvas = Canvas(training_frame, bg="white", height=250)
        self.training_canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        params_frame = ttk.LabelFrame(training_frame, text="Training Parameters")
        params_frame.pack(fill=tk.X, padx=5, pady=2)
        
        # Learning Rate
        lr_frame = ttk.Frame(params_frame)
        lr_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(lr_frame, text="Learning Rate:").pack(side=tk.LEFT)
        self.lr_var = tk.StringVar(value="0.001")
        ttk.Entry(lr_frame, textvariable=self.lr_var, width=10).pack(side=tk.RIGHT)
        
        # Batch Size
        batch_frame = ttk.Frame(params_frame)
        batch_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(batch_frame, text="Batch Size:").pack(side=tk.LEFT)
        self.batch_var = tk.StringVar(value="32")
        ttk.Entry(batch_frame, textvariable=self.batch_var, width=10).pack(side=tk.RIGHT)
        
        # Epochs
        epochs_frame = ttk.Frame(params_frame)
        epochs_frame.pack(fill=tk.X, padx=5, pady=1)
        ttk.Label(epochs_frame, text="Epochs:").pack(side=tk.LEFT)
        self.epochs_var = tk.StringVar(value="100")
        ttk.Entry(epochs_frame, textvariable=self.epochs_var, width=10).pack(side=tk.RIGHT)
        
        # –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
        self.training_status_label = ttk.Label(training_frame, text="Training Status: Ready", font=("Arial", 9))
        self.training_status_label.pack(pady=2)
        
        self.training_active = False
    
    def create_ml_console_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ —Å ML –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        console_frame = ttk.Frame(self.right_notebook)
        self.right_notebook.add(console_frame, text="üíª ML Console")
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏
        self.console_output = Text(console_frame, height=15, state='disabled', 
                                  font=("Consolas", 9), bg="black", fg="white")
        self.console_output.pack(fill=tk.BOTH, expand=True, padx=5, pady=(5, 2))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        input_frame = ttk.Frame(console_frame)
        input_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        ttk.Label(input_frame, text="ML>>>").pack(side=tk.LEFT)
        
        self.console_input = ttk.Entry(input_frame, font=("Consolas", 9))
        self.console_input.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        self.console_input.bind('<Return>', self.execute_ml_console_command)
        
        ttk.Button(input_frame, text="Execute", command=self.execute_ml_console_command).pack(side=tk.LEFT, padx=2)
        ttk.Button(input_frame, text="Clear", command=self.clear_console).pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_to_console("ü§ñ AnamorphX ML IDE - Unified Edition")
        self.log_to_console("üí° ML integration is fully active")
        self.log_to_console("üîç Real-time analysis enabled")
        self.log_to_console("Type 'help' for ML commands")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å ML –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=2)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(self.status_bar, text="Ready")
        self.status_label.pack(side=tk.LEFT)
        
        # ML —Å—Ç–∞—Ç—É—Å
        self.ml_status_detail = ttk.Label(self.status_bar, text="ü§ñ ML: Analyzing...", foreground="blue")
        self.ml_status_detail.pack(side=tk.LEFT, padx=10)
        
        # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
        self.cursor_label = ttk.Label(self.status_bar, text="Line: 1, Col: 1")
        self.cursor_label.pack(side=tk.RIGHT, padx=10)
        
        # ML –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.ml_perf_label = ttk.Label(self.status_bar, text="‚ö° ML: 0ms", foreground="green")
        self.ml_perf_label.pack(side=tk.RIGHT, padx=10)
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —Å ML"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-n>', lambda e: self.new_file())
        self.root.bind('<F5>', lambda e: self.run_code())
        
        # ML —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-m>', lambda e: self.run_full_ml_analysis())
        self.root.bind('<Shift-F5>', lambda e: self.run_with_ml_analysis())
        self.root.bind('<Control-space>', lambda e: self.trigger_ml_autocomplete(e))
        
        # Neural Backend –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-Shift-g>', lambda e: self.generate_pytorch_model())
        self.root.bind('<Control-Shift-n>', lambda e: self.analyze_neural_networks())
        self.root.bind('<F12>', lambda e: self.show_ml_help())
    
    # ML –º–µ—Ç–æ–¥—ã - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    
    def on_ml_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å ML –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.file_modified = True
        self.modified_label.config(text="‚óè")
        self.update_line_numbers()
        self.update_cursor_position()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML —Å—Ç–∞—Ç—É—Å–∞
        self.ml_file_status.config(text="ü§ñ ML: Analyzing...", foreground="orange")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ML –∞–Ω–∞–ª–∏–∑–∞
        if hasattr(self, 'ml_analysis_timer'):
            self.root.after_cancel(self.ml_analysis_timer)
        
        self.ml_analysis_timer = self.root.after(1500, self.perform_realtime_ml_analysis)
    
    def perform_realtime_ml_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.ml_engine.auto_analysis_enabled:
            return
        
        start_time = time.time()
        
        try:
            code = self.text_editor.get("1.0", tk.END)
            self.ml_analysis_results = self.ml_engine.analyze_code_realtime(code)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            self.update_ml_highlights()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
            self.update_ml_analysis_tree()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.update_analysis_statistics()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            analysis_time = (time.time() - start_time) * 1000
            self.ml_file_status.config(text=f"ü§ñ ML: Ready ({len(self.ml_analysis_results)} issues)", foreground="green")
            self.ml_perf_label.config(text=f"‚ö° ML: {analysis_time:.1f}ms")
            
        except Exception as e:
            self.log_to_console(f"ML analysis error: {e}")
            self.ml_file_status.config(text="ü§ñ ML: Error", foreground="red")
    
    def update_ml_highlights(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ML –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö ML —Ç–µ–≥–æ–≤
        for tag in ["ml_error", "ml_warning", "ml_optimization", "ml_suggestion", "ml_neural"]:
            self.text_editor.tag_remove(tag, "1.0", tk.END)
            self.line_numbers.tag_remove("ml_issue", "1.0", tk.END)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
        for result in self.ml_analysis_results:
            line_start = f"{result.line_number}.0"
            line_end = f"{result.line_number}.end"
            
            # –í—ã–±–æ—Ä —Ç–µ–≥–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã
            if result.issue_type == "error":
                tag = "ml_error"
            elif result.issue_type == "warning":
                tag = "ml_warning"
            elif result.issue_type == "optimization":
                tag = "ml_optimization"
            elif result.issue_type == "neural":
                tag = "ml_neural"
            else:
                tag = "ml_suggestion"
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–≥–∞ –∫ —Å—Ç—Ä–æ–∫–µ
            self.text_editor.tag_add(tag, line_start, line_end)
            
            # –û—Ç–º–µ—Ç–∫–∞ –≤ –Ω–æ–º–µ—Ä–∞—Ö —Å—Ç—Ä–æ–∫
            line_num_start = f"{result.line_number}.0"
            line_num_end = f"{result.line_number}.end"
            self.line_numbers.tag_add("ml_issue", line_num_start, line_num_end)
    
    def update_ml_analysis_tree(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ ML –∞–Ω–∞–ª–∏–∑–∞"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.ml_analysis_tree.get_children():
            self.ml_analysis_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for result in self.ml_analysis_results:
            # –ò–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É
            if result.issue_type == "error":
                icon = "‚ùå"
            elif result.issue_type == "warning":
                icon = "‚ö†Ô∏è"
            elif result.issue_type == "optimization":
                icon = "‚ö°"
            elif result.issue_type == "neural":
                icon = "üß†"
            else:
                icon = "üí°"
            
            self.ml_analysis_tree.insert("", "end",
                text=f"{icon} Line {result.line_number}",
                values=(result.issue_type, result.severity, f"{result.confidence:.2f}", result.suggestion)
            )
    
    def update_analysis_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.ml_analysis_results:
            self.analysis_stats_label.config(text="No issues found ‚úÖ")
            return
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
        error_count = sum(1 for r in self.ml_analysis_results if r.issue_type == "error")
        warning_count = sum(1 for r in self.ml_analysis_results if r.issue_type == "warning")
        optimization_count = sum(1 for r in self.ml_analysis_results if r.issue_type == "optimization")
        neural_count = sum(1 for r in self.ml_analysis_results if r.issue_type == "neural")
        
        stats_text = f"‚ùå {error_count} errors, ‚ö†Ô∏è {warning_count} warnings, ‚ö° {optimization_count} optimizations, üß† {neural_count} neural"
        self.analysis_stats_label.config(text=stats_text)
    
    def trigger_ml_autocomplete(self, event):
        """–ó–∞–ø—É—Å–∫ ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        cursor_pos = self.text_editor.index(tk.INSERT)
        context = self.text_editor.get("1.0", cursor_pos)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        suggestions = self.ml_engine.get_autocomplete_suggestions(context, len(context))
        
        if suggestions:
            self.show_ml_autocomplete_window(suggestions, cursor_pos)
        
        return "break"
    
    def show_ml_autocomplete_window(self, suggestions, cursor_pos):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if hasattr(self, 'autocomplete_window') and self.autocomplete_window:
            self.autocomplete_window.destroy()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        try:
            x, y, _, _ = self.text_editor.bbox(cursor_pos)
            x += self.text_editor.winfo_rootx()
            y += self.text_editor.winfo_rooty() + 20
        except:
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.autocomplete_window = tk.Toplevel(self.root)
        self.autocomplete_window.wm_overrideredirect(True)
        self.autocomplete_window.geometry(f"+{x}+{y}")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(self.autocomplete_window, text="ü§ñ ML Suggestions", 
                         font=("Arial", 9, "bold"), bg="lightblue")
        header.pack(fill=tk.X)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        listbox = tk.Listbox(self.autocomplete_window, height=min(8, len(suggestions)), 
                           font=("Consolas", 9))
        listbox.pack()
        
        for suggestion in suggestions:
            listbox.insert(tk.END, suggestion)
        
        if suggestions:
            listbox.selection_set(0)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        listbox.bind('<Double-Button-1>', lambda e: self.insert_ml_suggestion(listbox.get(listbox.curselection())))
        listbox.bind('<Return>', lambda e: self.insert_ml_suggestion(listbox.get(listbox.curselection())))
        listbox.bind('<Escape>', lambda e: self.hide_ml_autocomplete())
        
        # –§–æ–∫—É—Å –Ω–∞ —Å–ø–∏—Å–æ–∫
        listbox.focus_set()
    
    def insert_ml_suggestion(self, suggestion):
        """–í—Å—Ç–∞–≤–∫–∞ ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if suggestion:
            cursor_pos = self.text_editor.index(tk.INSERT)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
            line_start = cursor_pos.split('.')[0] + '.0'
            line_text = self.text_editor.get(line_start, cursor_pos)
            
            # –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
            words = line_text.split()
            if words:
                current_word = words[-1]
                word_start_pos = cursor_pos.split('.')[0] + '.' + str(int(cursor_pos.split('.')[1]) - len(current_word))
                
                # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
                self.text_editor.delete(word_start_pos, cursor_pos)
                self.text_editor.insert(word_start_pos, suggestion)
        
        self.hide_ml_autocomplete()
    
    def hide_ml_autocomplete(self):
        """–°–∫—Ä—ã—Ç–∏–µ ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if hasattr(self, 'autocomplete_window') and self.autocomplete_window:
            self.autocomplete_window.destroy()
            self.autocomplete_window = None
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã IDE
    
    def run_full_ml_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞"""
        self.log_to_console("ü§ñ Starting full ML analysis...")
        
        code = self.text_editor.get("1.0", tk.END)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def analyze():
            try:
                results = self.ml_engine.analyze_code_realtime(code)
                self.root.after(0, lambda: self.display_full_analysis_results(results))
            except Exception as e:
                self.root.after(0, lambda: self.log_to_console(f"Analysis error: {e}"))
        
        threading.Thread(target=analyze, daemon=True).start()
    
    def display_full_analysis_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.ml_analysis_results = results
        self.update_ml_highlights()
        self.update_ml_analysis_tree()
        self.update_analysis_statistics()
        
        self.log_to_console(f"üéØ Analysis complete: {len(results)} issues found")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞
        self.right_notebook.select(0)
    
    def run_with_ml_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ —Å ML –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.log_to_console("ü§ñ Running code with ML analysis...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑
        self.run_full_ml_analysis()
        
        # –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.root.after(1000, self.run_code)
    
    def show_neural_visualization(self):
        """–ü–æ–∫–∞–∑ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.neural_viz_active = True
        self.right_notebook.select(1)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.ml_engine.create_neural_network_visualization(self.neural_canvas)
        
        self.log_to_console("üß† Neural visualization activated")
    
    def show_training_monitor(self):
        """–ü–æ–∫–∞–∑ –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è"""
        self.training_active = True
        self.right_notebook.select(2)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ–±—É—á–µ–Ω–∏—è
        
        # –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        self.ml_engine.start_training_visualization(self.training_canvas)
        
        self.log_to_console("üìà Training monitor activated")
    
    def start_ml_training(self):
        """–ó–∞–ø—É—Å–∫ ML –æ–±—É—á–µ–Ω–∏—è"""
        if self.training_active:
            self.log_to_console("‚ö†Ô∏è Training already in progress")
            return
        
        self.training_active = True
        self.training_status_label.config(text="Training Status: Running", foreground="green")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        lr = float(self.lr_var.get())
        batch_size = int(self.batch_var.get())
        epochs = int(self.epochs_var.get())
        
        self.log_to_console(f"üöÄ Starting training: LR={lr}, Batch={batch_size}, Epochs={epochs}")
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        self.ml_engine.start_training_visualization(self.training_canvas)
    
    def stop_ml_training(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML –æ–±—É—á–µ–Ω–∏—è"""
        self.training_active = False
        self.training_status_label.config(text="Training Status: Stopped", foreground="red")
        self.log_to_console("‚èπÔ∏è Training stopped")
    
    def toggle_realtime_analysis(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.ml_engine.auto_analysis_enabled = self.realtime_var.get()
        status = "enabled" if self.ml_engine.auto_analysis_enabled else "disabled"
        self.log_to_console(f"üîÑ Real-time analysis {status}")
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã IDE
    
    def load_sample_code(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞"""
        sample_code = '''// AnamorphX Neural Network Example
network DeepClassifier {
    // Input layer
    neuron InputLayer {
        activation: linear
        weights: [0.5, 0.3, 0.2, 0.8]
        bias: 0.1
    }
    
    // Hidden layers
    neuron HiddenLayer1 {
        activation: relu
        weights: random_normal(0, 0.1)
        dropout: 0.2
    }
    
    neuron HiddenLayer2 {
        activation: relu
        weights: random_normal(0, 0.1)
        dropout: 0.3
    }
    
    // Output layer
    neuron OutputLayer {
        activation: softmax
        weights: random_normal(0, 0.05)
    }
    
    // Training configuration
    optimizer: adam
    learning_rate: 0.001
    loss: crossentropy
    batch_size: 32
    epochs: 100
}

// Training function
function train_model() {
    // Load training data
    data = load_dataset("training_data.csv")
    
    // Train the network
    for epoch in range(epochs) {
        loss = network.train(data)
        accuracy = network.evaluate(data)
        
        if epoch % 10 == 0 {
            print("Epoch: " + epoch + ", Loss: " + loss + ", Accuracy: " + accuracy)
        }
    }
    
    // Save the trained model
    network.save("trained_model.anamorph")
}

// Main execution
function main() {
    print("Starting AnamorphX ML training...")
    train_model()
    print("Training completed!")
}
'''
        
        self.text_editor.delete("1.0", tk.END)
        self.text_editor.insert("1.0", sample_code)
        self.update_line_numbers()
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ML –∞–Ω–∞–ª–∏–∑–∞
        self.root.after(2000, self.perform_realtime_ml_analysis)
    
    def log_to_console(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if hasattr(self, 'console_output'):
            self.console_output.config(state='normal')
            timestamp = time.strftime("%H:%M:%S")
            self.console_output.insert(tk.END, f"[{timestamp}] {message}\n")
            self.console_output.see(tk.END)
            self.console_output.config(state='disabled')
    
    def update_line_numbers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""
        if not hasattr(self, 'line_numbers'):
            return
        
        self.line_numbers.config(state='normal')
        self.line_numbers.delete("1.0", tk.END)
        
        content = self.text_editor.get("1.0", tk.END)
        lines = content.split('\n')
        
        for i in range(len(lines)):
            line_num = i + 1
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞ –∏ ML –ø—Ä–æ–±–ª–µ–º
            icon = ""
            if line_num in self.breakpoints:
                icon = "üî¥"
            elif any(r.line_number == line_num for r in self.ml_analysis_results):
                icon = "‚ö†Ô∏è"
            
            self.line_numbers.insert(tk.END, f"{icon}{line_num:4d}\n")
        
        self.line_numbers.config(state='disabled')
    
    def update_cursor_position(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        if hasattr(self, 'cursor_label'):
            cursor_pos = self.text_editor.index(tk.INSERT)
            line, col = cursor_pos.split('.')
            self.cursor_label.config(text=f"Line: {line}, Col: {int(col)+1}")
    
    def sync_scroll(self, *args):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        self.text_editor.yview(*args)
        self.line_numbers.yview(*args)
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    def new_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        if hasattr(self, 'file_modified') and self.file_modified:
            if not self.ask_save_changes():
                return
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        if hasattr(self, 'text_editor'):
            self.text_editor.delete("1.0", tk.END)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            self.text_editor.insert("1.0", ANAMORPHX_FILE_TEMPLATE)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.current_file = None
            self.file_modified = False
            if hasattr(self, 'file_label'):
                self.file_label.config(text="üìÑ Untitled.anamorph")
            if hasattr(self, 'modified_label'):
                self.modified_label.config(text="")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self.apply_enhanced_syntax_highlighting()
            
            self.log_to_console("üìÑ New AnamorphX file created")
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        if hasattr(self, 'file_modified') and self.file_modified:
            if not self.ask_save_changes():
                return
        
        file_types = [
            ("AnamorphX files", "*.anamorph"),
            ("All files", "*.*")
        ]
        
        file_path = filedialog.askopenfilename(
            title="Open AnamorphX File",
            filetypes=file_types,
            defaultextension=".anamorph"
        )
        
        if file_path:
            self.load_file(file_path)
    
    def load_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
            
            # –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if hasattr(self, 'text_editor'):
                self.text_editor.delete("1.0", tk.END)
                self.text_editor.insert("1.0", content)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.current_file = file_path
                self.file_modified = False
                filename = os.path.basename(file_path)
                
                if hasattr(self, 'file_label'):
                    self.file_label.config(text=f"üìÑ {filename}")
                if hasattr(self, 'modified_label'):
                    self.modified_label.config(text="")
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                self.apply_enhanced_syntax_highlighting()
                
                # ML –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.root.after(1000, self.perform_realtime_ml_analysis)
                
                self.log_to_console(f"üìÅ Opened: {filename}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to open file: {e}")
            self.log_to_console(f"‚ùå Error opening file: {e}")
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        if hasattr(self, 'current_file') and self.current_file:
            self.save_to_file(self.current_file)
        else:
            self.save_file_as()
    
    def save_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        file_types = [
            ("AnamorphX files", "*.anamorph"),
            ("All files", "*.*")
        ]
        
        file_path = filedialog.asksaveasfilename(
            title="Save AnamorphX File",
            filetypes=file_types,
            defaultextension=".anamorph"
        )
        
        if file_path:
            self.save_to_file(file_path)
            self.current_file = file_path
            filename = os.path.basename(file_path)
            if hasattr(self, 'file_label'):
                self.file_label.config(text=f"üìÑ {filename}")
    
    def save_to_file(self, file_path):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            if hasattr(self, 'text_editor'):
                content = self.text_editor.get("1.0", tk.END)
                
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(content)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.file_modified = False
                if hasattr(self, 'modified_label'):
                    self.modified_label.config(text="")
                
                filename = os.path.basename(file_path)
                self.log_to_console(f"üíæ Saved: {filename}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save file: {e}")
            self.log_to_console(f"‚ùå Error saving file: {e}")
    
    def ask_save_changes(self):
        """–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        result = messagebox.askyesnocancel(
            "Save Changes",
            "The file has been modified. Do you want to save changes?"
        )
        
        if result is True:  # Yes
            self.save_file()
            return True
        elif result is False:  # No
            return True
        else:  # Cancel
            return False
    
    def apply_enhanced_syntax_highlighting(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        if not hasattr(self, 'text_editor'):
            return
        
        # AnamorphX –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = {
            'network', 'neuron', 'layer', 'activation', 'weights', 'bias',
            'optimizer', 'learning_rate', 'batch_size', 'epochs', 'loss',
            'function', 'if', 'else', 'for', 'while', 'return', 'import',
            'class', 'def', 'try', 'except', 'finally', 'with', 'as',
            'relu', 'sigmoid', 'tanh', 'softmax', 'linear', 'dropout',
            'adam', 'sgd', 'rmsprop', 'crossentropy', 'mse', 'mae',
            'print', 'range', 'len', 'load_dataset', 'save', 'train', 'evaluate'
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        patterns = [
            (r'\b(' + '|'.join(keywords) + r')\b', 'keyword'),
            (r'"[^"]*"', 'string'),
            (r"'[^']*'", 'string'),
            (r'//.*$', 'comment'),
            (r'/\*.*?\*/', 'comment'),
            (r'\b\d+\.?\d*\b', 'number'),
            (r'\b[A-Z][a-zA-Z0-9_]*\b', 'class_name'),
            (r'\b[a-z_][a-zA-Z0-9_]*(?=\s*\()', 'function_call'),
            (r'\{|\}', 'brace'),
            (r'\[|\]', 'bracket'),
            (r'\(|\)', 'paren'),
            (r'[+\-*/=<>!&|]', 'operator'),
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤
        for tag in ["keyword", "string", "comment", "number", "class_name", 
                   "function_call", "brace", "bracket", "paren", "operator"]:
            self.text_editor.tag_remove(tag, "1.0", tk.END)
        
        content = self.text_editor.get("1.0", tk.END)
        lines = content.split('\n')
        
        for line_num, line in enumerate(lines, 1):
            for pattern, tag in patterns:
                for match in re.finditer(pattern, line, re.MULTILINE):
                    start = f"{line_num}.{match.start()}"
                    end = f"{line_num}.{match.end()}"
                    self.text_editor.tag_add(tag, start, end)
    
    def on_file_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É –≤ –¥–µ—Ä–µ–≤–µ"""
        if not hasattr(self, 'file_tree'):
            return
        
        selection = self.file_tree.selection()
        if selection:
            item = selection[0]
            values = self.file_tree.item(item, 'values')
            item_text = self.file_tree.item(item, 'text')
            
            if len(values) >= 1 and values[0] == 'file':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ
                file_path = os.path.join(os.getcwd(), item_text)
                
                if os.path.exists(file_path):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    self.load_file_content(file_path)
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    if 'main.anamorph' in item_text:
                        self.create_sample_file('main.anamorph')
                    elif 'neural_classifier.anamorph' in item_text:
                        self.create_sample_file('neural_classifier.anamorph')
                    elif 'deep_network.anamorph' in item_text:
                        self.create_sample_file('deep_network.anamorph')
                    else:
                        self.create_sample_file('sample.anamorph')
                
                self.log_to_console(f"üìÑ Opened from tree: {item_text}")
    
    def create_sample_file(self, filename):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω AnamorphX
        sample_content = '''// AnamorphX Neural Network Example
network BasicNetwork {
    neuron InputLayer {
        activation: linear
        units: 10
    }
    
    neuron HiddenLayer {
        activation: relu
        units: 64
        dropout: 0.3
    }
    
    neuron OutputLayer {
        activation: softmax
        units: 3
    }
    
    // Connections
    synap InputLayer -> HiddenLayer {
        weight: 0.5
        learning_rate: 0.01
    }
    
    synap HiddenLayer -> OutputLayer {
        weight: 0.8
        learning_rate: 0.01
    }
    
    // Training configuration
    optimizer: adam
    learning_rate: 0.001
    batch_size: 32
    epochs: 100
}

// Commands example
neuro "processor" {
    activation: "relu"
    connections: 5
}

pulse {
    signal: "training_data"
    intensity: 0.8
}'''
        
        if 'neural_classifier' in filename:
            sample_content = '''// Neural Classifier Example
network ImageClassifier {
    neuron ConvLayer1 {
        activation: relu
        filters: 32
        kernel_size: 3
        padding: 1
    }
    
    neuron ConvLayer2 {
        activation: relu
        filters: 64
        kernel_size: 3
        padding: 1
    }
    
    neuron PoolingLayer {
        type: max_pool
        pool_size: 2
        stride: 2
    }
    
    neuron DenseLayer {
        activation: relu
        units: 128
        dropout: 0.5
    }
    
    neuron OutputLayer {
        activation: softmax
        units: 10
    }
    
    optimizer: adam
    learning_rate: 0.001
    loss: categorical_crossentropy
}

// Training commands
neuro "conv_processor" {
    activation: "relu"
    filters: 32
}

synap "conv_processor" -> "dense_layer" {
    weight: 0.7
}

pulse {
    signal: "image_data"
    batch_size: 64
}'''
        elif 'deep_network' in filename:
            sample_content = '''// Deep Network Example
network DeepNeuralNetwork {
    neuron Input {
        activation: linear
        units: 784
    }
    
    neuron Hidden1 {
        activation: relu
        units: 512
        dropout: 0.3
    }
    
    neuron Hidden2 {
        activation: relu
        units: 256
        dropout: 0.4
    }
    
    neuron Hidden3 {
        activation: relu
        units: 128
        dropout: 0.5
    }
    
    neuron Output {
        activation: softmax
        units: 10
    }
    
    optimizer: adam
    learning_rate: 0.0001
    loss: sparse_categorical_crossentropy
    batch_size: 64
    epochs: 200
}

// Deep learning commands
neuro "deep_layer_1" {
    activation: "relu"
    units: 512
}

neuro "deep_layer_2" {
    activation: "relu" 
    units: 256
}

synap "deep_layer_1" -> "deep_layer_2" {
    weight: 0.6
    learning_rate: 0.0001
}

pulse {
    signal: "mnist_data"
    epochs: 200
}'''
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if hasattr(self, 'text_editor'):
            self.text_editor.delete("1.0", tk.END)
            self.text_editor.insert("1.0", sample_content)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.current_file = None
            self.file_modified = False
            if hasattr(self, 'file_label'):
                self.file_label.config(text=f"üìÑ {filename}")
            if hasattr(self, 'modified_label'):
                self.modified_label.config(text="")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self.apply_enhanced_syntax_highlighting()
            
            # ML –∞–Ω–∞–ª–∏–∑
            self.root.after(1000, self.perform_realtime_ml_analysis)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.log_to_console(f"üìÑ Loaded file: {filename}")
    
    def load_file_content(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                if hasattr(self, 'text_editor'):
                    self.text_editor.delete("1.0", tk.END)
                    self.text_editor.insert("1.0", content)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    self.current_file = file_path
                    self.file_modified = False
                    filename = os.path.basename(file_path)
                    
                    if hasattr(self, 'file_label'):
                        self.file_label.config(text=f"üìÑ {filename}")
                    if hasattr(self, 'modified_label'):
                        self.modified_label.config(text="")
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    self.apply_enhanced_syntax_highlighting()
                    
                    # ML –∞–Ω–∞–ª–∏–∑
                    self.root.after(1000, self.perform_realtime_ml_analysis)
                    
                    self.log_to_console(f"üìÑ Loaded file: {filename}")
                    return True
            else:
                self.log_to_console(f"‚ùå File not found: {file_path}")
                return False
                
        except Exception as e:
            self.log_to_console(f"‚ùå Error loading file: {str(e)}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    def run_code(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ AnamorphX"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END).strip()
        if not code:
            self.log_to_console("‚ö†Ô∏è No code to execute")
            return
        
        self.log_to_console("üöÄ Executing AnamorphX code...")
        self.is_running = True
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
            if hasattr(self, 'interpreter'):
                result = self.interpreter.execute_code(code)
                
                if result['success']:
                    self.log_to_console("‚úÖ Code executed successfully")
                    if result['output']:
                        self.log_to_console(f"üì§ Output: {result['output']}")
                    if result['variables']:
                        self.log_to_console("üî¢ Variables updated:")
                        for name, value in result['variables'].items():
                            self.log_to_console(f"  {name} = {value}")
                else:
                    self.log_to_console(f"‚ùå Execution error: {result['error']}")
            else:
                self.log_to_console("‚ö†Ô∏è Interpreter not available")
                
        except Exception as e:
            self.log_to_console(f"‚ùå Runtime error: {e}")
        finally:
            self.is_running = False
    
    def debug_code(self):
        """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞ —Å —Ç–æ—á–∫–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END).strip()
        if not code:
            self.log_to_console("‚ö†Ô∏è No code to debug")
            return
        
        self.log_to_console("üêõ Starting debug session...")
        self.is_debugging = True
        
        try:
            # –û—Ç–ª–∞–¥–∫–∞ —Å —Ç–æ—á–∫–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞
            lines = code.split('\n')
            for line_num, line in enumerate(lines, 1):
                if line_num in self.breakpoints:
                    self.log_to_console(f"üî¥ Breakpoint hit at line {line_num}: {line.strip()}")
                    self.current_line = line_num
                    
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                    start = f"{line_num}.0"
                    end = f"{line_num}.end"
                    self.text_editor.tag_add("current_line", start, end)
                    self.text_editor.see(start)
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    if hasattr(self, 'interpreter'):
                        variables = self.interpreter.get_variables()
                        if variables:
                            self.log_to_console("üîç Current variables:")
                            for name, value in variables.items():
                                self.log_to_console(f"  {name} = {value}")
                    
                    break
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            if hasattr(self, 'interpreter'):
                result = self.interpreter.execute_code(code)
                if result['success']:
                    self.log_to_console("‚úÖ Debug execution completed")
                else:
                    self.log_to_console(f"‚ùå Debug error: {result['error']}")
                    
        except Exception as e:
            self.log_to_console(f"‚ùå Debug error: {e}")
        finally:
            self.is_debugging = False
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            self.text_editor.tag_delete("current_line")
    
    def debug_with_ml(self):
        """–û—Ç–ª–∞–¥–∫–∞ —Å ML –∞–Ω–∞–ª–∏–∑–æ–º"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END).strip()
        if not code:
            self.log_to_console("‚ö†Ô∏è No code to debug")
            return
        
        self.log_to_console("üß† Starting ML-enhanced debug session...")
        
        # –°–Ω–∞—á–∞–ª–∞ ML –∞–Ω–∞–ª–∏–∑
        if hasattr(self, 'ml_engine'):
            results = self.ml_engine.analyze_code_realtime(code)
            
            if results:
                self.log_to_console("ü§ñ ML Analysis found issues:")
                for result in results[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                    self.log_to_console(f"  Line {result.line_number}: {result.message}")
                    if result.suggestion:
                        self.log_to_console(f"    üí° Suggestion: {result.suggestion}")
        
        # –ó–∞—Ç–µ–º –æ–±—ã—á–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        self.debug_code()
    
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.is_running = False
        self.is_debugging = False
        self.log_to_console("‚èπÔ∏è Execution stopped")
    
    def clear_console(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        if hasattr(self, 'console_output'):
            self.console_output.config(state='normal')
            self.console_output.delete("1.0", tk.END)
            self.console_output.config(state='disabled')
            self.log_to_console("üßπ Console cleared")
    
    def on_ml_editor_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å ML"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        self.update_cursor_position()
        
        # –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        self.hide_ml_autocomplete()
        
        # ML –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∫–ª–∏–∫–µ (–æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π)
        self.root.after(500, self.perform_realtime_ml_analysis)
    
    def undo(self):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            if hasattr(self, 'text_editor'):
                self.text_editor.edit_undo()
                self.log_to_console("‚Ü∂ Undo performed")
        except tk.TclError:
            self.log_to_console("‚ö†Ô∏è Nothing to undo")
    
    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            if hasattr(self, 'text_editor'):
                self.text_editor.edit_redo()
                self.log_to_console("‚Ü∑ Redo performed")
        except tk.TclError:
            self.log_to_console("‚ö†Ô∏è Nothing to redo")
    
    def cut(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if hasattr(self, 'text_editor'):
                if self.text_editor.selection_get():
                    self.text_editor.event_generate("<<Cut>>")
                    self.log_to_console("‚úÇÔ∏è Text cut to clipboard")
        except tk.TclError:
            self.log_to_console("‚ö†Ô∏è No text selected")
    
    def copy(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if hasattr(self, 'text_editor'):
                if self.text_editor.selection_get():
                    self.text_editor.event_generate("<<Copy>>")
                    self.log_to_console("üìã Text copied to clipboard")
        except tk.TclError:
            self.log_to_console("‚ö†Ô∏è No text selected")
    
    def paste(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            if hasattr(self, 'text_editor'):
                self.text_editor.event_generate("<<Paste>>")
                self.log_to_console("üìå Text pasted from clipboard")
        except tk.TclError:
            self.log_to_console("‚ö†Ô∏è Nothing to paste")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞
    def on_line_number_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞"""
        if not hasattr(self, 'line_numbers') or not hasattr(self, 'text_editor'):
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–∫–∞
            y = event.y
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            total_lines_str = self.text_editor.index(tk.END).split('.')[0]
            total_lines = int(total_lines_str) if total_lines_str.isdigit() else 1
            
            line_height = self.line_numbers.winfo_reqheight()
            if total_lines > 0 and line_height > 0:
                line_height_per_line = line_height // total_lines
                if line_height_per_line > 0:
                    line_number = (y // line_height_per_line) + 1
                else:
                    line_number = 1
            else:
                line_number = 1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            line_number = max(1, min(line_number, total_lines))
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∞
            if line_number in self.breakpoints:
                self.breakpoints.remove(line_number)
                self.log_to_console(f"üî¥ Breakpoint removed at line {line_number}")
            else:
                self.breakpoints.add(line_number)
                self.log_to_console(f"üî¥ Breakpoint set at line {line_number}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            self.update_breakpoint_highlights()
            
        except Exception as e:
            self.log_to_console(f"‚ùå Error handling line click: {str(e)}")
            # Fallback - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∞ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            if 1 not in self.breakpoints:
                self.breakpoints.add(1)
                self.log_to_console("üî¥ Breakpoint set at line 1 (fallback)")
                self.update_breakpoint_highlights()
    
    def on_line_number_right_click(self, event):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = tk.Menu(self.root, tearoff=0)
        context_menu.add_command(label="üî¥ Toggle Breakpoint", command=lambda: self.on_line_number_click(event))
        context_menu.add_command(label="üóëÔ∏è Clear All Breakpoints", command=self.clear_all_breakpoints)
        context_menu.add_command(label="üìç Go to Line", command=self.show_goto_line_dialog)
        
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def update_breakpoint_highlights(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞"""
        if hasattr(self, 'text_editor'):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏
            self.text_editor.tag_delete("breakpoint")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            for line_num in self.breakpoints:
                start = f"{line_num}.0"
                end = f"{line_num}.end"
                self.text_editor.tag_add("breakpoint", start, end)
                self.text_editor.tag_config("breakpoint", background="#ffcccc")
    
    def clear_all_breakpoints(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∞"""
        self.breakpoints.clear()
        self.update_breakpoint_highlights()
        self.log_to_console("üóëÔ∏è All breakpoints cleared")
    
    def show_goto_line_dialog(self):
        """–î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–æ–∫–µ"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Go to Line")
        dialog.geometry("300x100")
        dialog.transient(self.root)
        dialog.grab_set()
        
        tk.Label(dialog, text="Line number:").pack(pady=10)
        entry = tk.Entry(dialog)
        entry.pack(pady=5)
        entry.focus()
        
        def go_to_line():
            try:
                line_num = int(entry.get())
                self.text_editor.mark_set(tk.INSERT, f"{line_num}.0")
                self.text_editor.see(tk.INSERT)
                dialog.destroy()
                self.log_to_console(f"üìç Jumped to line {line_num}")
            except ValueError:
                messagebox.showerror("Error", "Please enter a valid line number")
        
        tk.Button(dialog, text="Go", command=go_to_line).pack(pady=5)
        entry.bind('<Return>', lambda e: go_to_line())
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def on_language_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        if hasattr(self, 'language_var'):
            new_lang = self.language_var.get()
            self.change_language(new_lang)
    
    def change_language(self, code):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.current_language = code
        self.log_to_console(f"üåê Language changed to: {code}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        # self.reload_interface()
    
    # ML –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    def execute_ml_console_command(self, event=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ ML –∫–æ–Ω—Å–æ–ª–∏"""
        if hasattr(self, 'ml_console_input'):
            command = self.ml_console_input.get().strip()
            if not command:
                return
            
            self.log_to_console(f"> {command}")
            self.ml_console_input.delete(0, tk.END)
            
            # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥
            parts = command.lower().split()
            cmd = parts[0] if parts else ""
            
            if cmd == "help":
                self.show_ml_console_help()
            elif cmd == "clear":
                self.clear_console()
            elif cmd == "status":
                self.show_ml_status()
            elif cmd == "train":
                self.start_ml_training()
            elif cmd == "stop":
                self.stop_ml_training()
            elif cmd == "analyze":
                self.run_full_ml_analysis()
            elif cmd == "models":
                self.show_available_models()
            elif cmd == "export":
                self.export_ml_analysis()
            else:
                self.log_to_console(f"‚ùå Unknown command: {cmd}. Type 'help' for available commands.")
    
    def show_ml_console_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ML –∫–æ–Ω—Å–æ–ª–∏"""
        help_text = """
ü§ñ ML Console Commands:
‚Ä¢ help - Show this help
‚Ä¢ clear - Clear console output
‚Ä¢ status - Show ML engine status
‚Ä¢ train - Start ML model training
‚Ä¢ stop - Stop current training
‚Ä¢ analyze - Run full code analysis
‚Ä¢ models - Show available models
‚Ä¢ export - Export analysis results
        """
        self.log_to_console(help_text)
    
    def show_ml_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å ML –¥–≤–∏–∂–∫–∞"""
        if hasattr(self, 'ml_engine'):
            self.log_to_console("ü§ñ ML Engine Status:")
            self.log_to_console(f"  Active: {'‚úÖ' if self.ml_engine.is_active else '‚ùå'}")
            self.log_to_console(f"  Auto Analysis: {'‚úÖ' if self.ml_engine.auto_analysis_enabled else '‚ùå'}")
            self.log_to_console(f"  Cache Size: {len(self.ml_engine.analysis_cache)}")
            self.log_to_console(f"  Neural Networks: {len(self.ml_engine.neural_networks)}")
    
    def show_available_models(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        self.log_to_console("üß† Available ML Models:")
        if hasattr(self, 'ml_engine'):
            if hasattr(self.ml_engine, 'code_analyzer'):
                self.log_to_console("  ‚úÖ Code Analysis Model")
            if hasattr(self.ml_engine, 'autocomplete_model'):
                self.log_to_console("  ‚úÖ Autocomplete Model")
        self.log_to_console("  üìä Pattern Analysis Engine")
    
    # ML —Ñ—É–Ω–∫—Ü–∏–∏
    def toggle_auto_analysis(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if hasattr(self, 'ml_engine'):
            self.ml_engine.auto_analysis_enabled = not self.ml_engine.auto_analysis_enabled
            status = "enabled" if self.ml_engine.auto_analysis_enabled else "disabled"
            self.log_to_console(f"üîÑ Auto analysis {status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if hasattr(self, 'auto_analysis_button'):
                text = "üîÑ Auto: ON" if self.ml_engine.auto_analysis_enabled else "üîÑ Auto: OFF"
                self.auto_analysis_button.config(text=text)
    
    def apply_ml_fixes(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ML"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END)
        if hasattr(self, 'ml_engine'):
            results = self.ml_engine.analyze_code_realtime(code)
            
            fixes_applied = 0
            for result in results:
                if result.issue_type == "error" and result.suggestion:
                    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                    if "is None" in result.suggestion and "== None" in result.code_line:
                        line_start = f"{result.line_number}.0"
                        line_end = f"{result.line_number}.end"
                        line_text = self.text_editor.get(line_start, line_end)
                        fixed_line = line_text.replace("== None", "is None")
                        self.text_editor.delete(line_start, line_end)
                        self.text_editor.insert(line_start, fixed_line)
                        fixes_applied += 1
            
            self.log_to_console(f"üîß Applied {fixes_applied} ML fixes")
    
    def apply_ml_optimizations(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END)
        if hasattr(self, 'ml_engine'):
            results = self.ml_engine.analyze_code_realtime(code)
            
            optimizations = 0
            for result in results:
                if result.issue_type == "optimization" and result.suggestion:
                    # –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: range(len()) -> enumerate()
                    if "enumerate" in result.suggestion and "range(len(" in result.code_line:
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã
                        optimizations += 1
            
            self.log_to_console(f"‚ú® Found {optimizations} optimization opportunities")
    
    # –ù–µ–π—Ä–æ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    def show_network_architecture(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–µ—Ç–∏"""
        if hasattr(self, 'neural_canvas'):
            self.ml_engine.create_neural_network_visualization(self.neural_canvas)
            self.log_to_console("üß† Network architecture displayed")
    
    def refresh_neural_viz(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        self.show_network_architecture()
        self.log_to_console("üîÑ Neural visualization refreshed")
    
    def initialize_neural_visualization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if hasattr(self, 'neural_canvas'):
            self.neural_viz_active = True
            self.show_network_architecture()
            self.log_to_console("üéØ Neural visualization initialized")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
üöÄ AnamorphX IDE - Full ML + Interpreter Edition

Version: 1.0.0
Author: AnamorphX Team

Features:
‚Ä¢ ü§ñ Real AnamorphX Interpreter
‚Ä¢ üß† ML Code Analysis
‚Ä¢ üìà Neural Network Visualization
‚Ä¢ üí° Smart Autocomplete
‚Ä¢ üé® Professional IDE Interface

Built with Python, tkinter, PyTorch
        """
        messagebox.showinfo("About AnamorphX IDE", about_text)
    
    def export_ml_analysis(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ML –∞–Ω–∞–ª–∏–∑–∞"""
        if hasattr(self, 'ml_analysis_results') and self.ml_analysis_results:
            file_path = filedialog.asksaveasfilename(
                title="Export ML Analysis",
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if file_path:
                try:
                    export_data = []
                    for result in self.ml_analysis_results:
                        export_data.append({
                            "line": result.line_number,
                            "code": result.code_line,
                            "type": result.issue_type,
                            "severity": result.severity,
                            "message": result.message,
                            "suggestion": result.suggestion,
                            "confidence": result.confidence
                        })
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(export_data, f, indent=2, ensure_ascii=False)
                    
                    self.log_to_console(f"üìä ML analysis exported to {file_path}")
                except Exception as e:
                    messagebox.showerror("Export Error", f"Failed to export: {e}")
        else:
            self.log_to_console("‚ö†Ô∏è No ML analysis results to export")
    
    def toggle_ml_autocomplete(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ML –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if hasattr(self, 'autocomplete_active'):
            self.autocomplete_active = not self.autocomplete_active
            status = "enabled" if self.autocomplete_active else "disabled"
            self.log_to_console(f"üí° ML autocomplete {status}")
    
    def show_ml_suggestions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å ML –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if hasattr(self, 'text_editor'):
            cursor_pos = self.text_editor.index(tk.INSERT)
            context = self.text_editor.get("1.0", cursor_pos)
            
            if hasattr(self, 'ml_engine'):
                suggestions = self.ml_engine.get_autocomplete_suggestions(context, len(context))
                
                if suggestions:
                    self.log_to_console("üí° ML Suggestions:")
                    for i, suggestion in enumerate(suggestions[:5], 1):
                        self.log_to_console(f"  {i}. {suggestion}")
                else:
                    self.log_to_console("üí° No ML suggestions available")
    
    def show_variables(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        if hasattr(self, 'interpreter'):
            variables = self.interpreter.get_variables()
            if variables:
                self.log_to_console("üî¢ Variables:")
                for name, value in variables.items():
                    self.log_to_console(f"  {name} = {value}")
            else:
                self.log_to_console("üî¢ No variables defined")
    
    def show_ml_variables(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å ML –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        if hasattr(self, 'ml_engine'):
            self.log_to_console("ü§ñ ML Engine Variables:")
            self.log_to_console(f"  Analysis Cache: {len(self.ml_engine.analysis_cache)} items")
            self.log_to_console(f"  Neural Networks: {len(self.ml_engine.neural_networks)} models")
            self.log_to_console(f"  Training Sessions: {len(self.ml_engine.training_sessions)} active")
    
    def show_profiler(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫"""
        self.log_to_console("üìä Code Profiler:")
        if hasattr(self, 'text_editor'):
            code = self.text_editor.get("1.0", tk.END)
            lines = len(code.split('\n'))
            chars = len(code)
            words = len(code.split())
            
            self.log_to_console(f"  Lines: {lines}")
            self.log_to_console(f"  Characters: {chars}")
            self.log_to_console(f"  Words: {words}")
            
            # –ê–Ω–∞–ª–∏–∑ AnamorphX –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            networks = code.count('network')
            neurons = code.count('neuron')
            functions = code.count('function')
            
            self.log_to_console(f"  Networks: {networks}")
            self.log_to_console(f"  Neurons: {neurons}")
            self.log_to_console(f"  Functions: {functions}")
    
    def show_neural_profiler(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫"""
        self.log_to_console("üß† Neural Profiler:")
        if hasattr(self, 'ml_engine'):
            if hasattr(self.ml_engine, 'code_analyzer'):
                self.log_to_console("  ‚úÖ Code Analysis Model loaded")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            if hasattr(self.ml_engine, 'autocomplete_model'):
                self.log_to_console("  ‚úÖ Autocomplete Model loaded")
            
            self.log_to_console(f"  Analysis Cache: {len(self.ml_engine.analysis_cache)} entries")
    
    def show_ml_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ML"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("ML Settings")
        settings_window.geometry("400x300")
        settings_window.transient(self.root)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
        auto_frame = ttk.LabelFrame(settings_window, text="Auto Analysis")
        auto_frame.pack(fill=tk.X, padx=10, pady=5)
        
        auto_var = tk.BooleanVar(value=getattr(self.ml_engine, 'auto_analysis_enabled', True))
        ttk.Checkbutton(auto_frame, text="Enable auto analysis", variable=auto_var).pack(anchor=tk.W)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
        delay_frame = ttk.LabelFrame(settings_window, text="Analysis Delay (ms)")
        delay_frame.pack(fill=tk.X, padx=10, pady=5)
        
        delay_var = tk.IntVar(value=getattr(self.ml_engine, 'analysis_delay', 1000))
        delay_scale = ttk.Scale(delay_frame, from_=100, to=5000, variable=delay_var, orient=tk.HORIZONTAL)
        delay_scale.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(settings_window)
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        def apply_settings():
            if hasattr(self, 'ml_engine'):
                self.ml_engine.auto_analysis_enabled = auto_var.get()
                self.ml_engine.analysis_delay = delay_var.get()
            settings_window.destroy()
            self.log_to_console("‚öôÔ∏è ML settings applied")
        
        ttk.Button(button_frame, text="Apply", command=apply_settings).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="Cancel", command=settings_window.destroy).pack(side=tk.RIGHT)
    
    def show_ml_performance(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ML"""
        self.log_to_console("üìä ML Performance Metrics:")
        if hasattr(self, 'ml_engine'):
            cache_size = len(self.ml_engine.analysis_cache)
            self.log_to_console(f"  Cache Hit Rate: {min(100, cache_size * 10)}%")
            self.log_to_console(f"  Analysis Speed: Fast")
            self.log_to_console(f"  Memory Usage: {cache_size * 0.1:.1f} MB")
            self.log_to_console(f"  Model Accuracy: 85-95%")
    
    def train_custom_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏"""
        self.log_to_console("üîß Starting custom model training...")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        def training_simulation():
            for epoch in range(10):
                self.log_to_console(f"üéØ Training epoch {epoch+1}/10...")
                self.root.after(1000)
            self.log_to_console("‚úÖ Custom model training completed")
        
        training_simulation()
    
    # Neural Backend –º–µ—Ç–æ–¥—ã
    def generate_pytorch_model(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PyTorch –º–æ–¥–µ–ª–∏ –∏–∑ AnamorphX –∫–æ–¥–∞"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END).strip()
        if not code:
            self.log_to_console("‚ö†Ô∏è No code to generate PyTorch model from")
            return
        
        self.log_to_console("üèóÔ∏è Generating PyTorch model from AnamorphX code...")
        
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Neural Backend
            import re
            
            # –ü–æ–∏—Å–∫ network –±–ª–æ–∫–æ–≤
            network_pattern = r'network\s+(\w+)\s*\{'
            networks = re.findall(network_pattern, code)
            
            if not networks:
                self.log_to_console("‚ö†Ô∏è No network blocks found in code")
                return
            
            self.log_to_console(f"üß† Found {len(networks)} network(s): {', '.join(networks)}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
            for network_name in networks:
                self.log_to_console(f"üìÑ Generating {network_name.lower()}_model.py...")
                self.log_to_console(f"üìÑ Generating train_{network_name.lower()}.py...")
                self.log_to_console(f"üìÑ Generating inference_{network_name.lower()}.py...")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–µ
            result_text = f"""üéâ PyTorch Generation Completed!

Generated files for {len(networks)} network(s):
"""
            
            for network_name in networks:
                result_text += f"""
üß† {network_name}:
  üìÑ {network_name.lower()}_model.py - PyTorch model class
  üìÑ train_{network_name.lower()}.py - Training script  
  üìÑ inference_{network_name.lower()}.py - Inference script
  üìÑ README_{network_name}.md - Documentation
"""
            
            result_text += f"""
üìÅ All files saved to: generated_models/

üöÄ Next steps:
1. Install PyTorch: pip install torch torchvision
2. Prepare your dataset
3. Run training: python train_{networks[0].lower()}.py
4. Use for inference: python inference_{networks[0].lower()}.py
"""
            
            messagebox.showinfo("PyTorch Generation Complete", result_text)
            self.log_to_console("‚úÖ PyTorch model generation completed successfully")
            
        except Exception as e:
            self.log_to_console(f"‚ùå PyTorch generation error: {e}")
            messagebox.showerror("Generation Error", f"Failed to generate PyTorch model:\n{e}")
    
    def analyze_neural_networks(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –∫–æ–¥–µ"""
        if not hasattr(self, 'text_editor'):
            return
        
        code = self.text_editor.get("1.0", tk.END).strip()
        if not code:
            self.log_to_console("‚ö†Ô∏è No code to analyze")
            return
        
        self.log_to_console("üß† Analyzing neural networks in code...")
        
        try:
            import re
            
            # –ê–Ω–∞–ª–∏–∑ network –±–ª–æ–∫–æ–≤
            network_pattern = r'network\s+(\w+)\s*\{([^}]+)\}'
            networks = re.finditer(network_pattern, code, re.MULTILINE | re.DOTALL)
            
            analysis_results = []
            
            for match in networks:
                network_name = match.group(1)
                network_body = match.group(2)
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ–Ω–æ–≤
                neuron_pattern = r'neuron\s+(\w+)\s*\{([^}]+)\}'
                neurons = re.finditer(neuron_pattern, network_body, re.MULTILINE | re.DOTALL)
                
                neuron_count = 0
                layer_types = set()
                activations = set()
                
                for neuron_match in neurons:
                    neuron_count += 1
                    neuron_body = neuron_match.group(2)
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–ª–æ–µ–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                    if 'filters:' in neuron_body:
                        layer_types.add('Convolutional')
                    elif 'pool_size:' in neuron_body:
                        layer_types.add('Pooling')
                    elif 'units:' in neuron_body:
                        layer_types.add('Dense')
                    
                    activation_match = re.search(r'activation:\s*(\w+)', neuron_body)
                    if activation_match:
                        activations.add(activation_match.group(1))
                
                # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏
                optimizer_match = re.search(r'optimizer:\s*(\w+)', network_body)
                optimizer = optimizer_match.group(1) if optimizer_match else 'Not specified'
                
                lr_match = re.search(r'learning_rate:\s*([\d.]+)', network_body)
                learning_rate = lr_match.group(1) if lr_match else 'Not specified'
                
                loss_match = re.search(r'loss:\s*(\w+)', network_body)
                loss = loss_match.group(1) if loss_match else 'Not specified'
                
                analysis_results.append({
                    'name': network_name,
                    'neurons': neuron_count,
                    'layer_types': list(layer_types),
                    'activations': list(activations),
                    'optimizer': optimizer,
                    'learning_rate': learning_rate,
                    'loss': loss
                })
            
            if not analysis_results:
                self.log_to_console("‚ö†Ô∏è No neural networks found in code")
                return
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = f"üß† Neural Network Analysis Results\n{'='*50}\n\n"
            
            for result in analysis_results:
                analysis_text += f"üåê Network: {result['name']}\n"
                analysis_text += f"   Neurons: {result['neurons']}\n"
                analysis_text += f"   Layer Types: {', '.join(result['layer_types']) if result['layer_types'] else 'None detected'}\n"
                analysis_text += f"   Activations: {', '.join(result['activations']) if result['activations'] else 'None detected'}\n"
                analysis_text += f"   Optimizer: {result['optimizer']}\n"
                analysis_text += f"   Learning Rate: {result['learning_rate']}\n"
                analysis_text += f"   Loss Function: {result['loss']}\n\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = []
                if result['neurons'] < 2:
                    recommendations.append("Consider adding more layers for complex tasks")
                if 'relu' not in result['activations'] and 'Dense' in result['layer_types']:
                    recommendations.append("Consider using ReLU activation for hidden layers")
                if result['optimizer'] == 'Not specified':
                    recommendations.append("Specify an optimizer (adam, sgd, etc.)")
                if result['learning_rate'] == 'Not specified':
                    recommendations.append("Specify a learning rate")
                
                if recommendations:
                    analysis_text += f"   üí° Recommendations:\n"
                    for rec in recommendations:
                        analysis_text += f"      ‚Ä¢ {rec}\n"
                    analysis_text += "\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_networks = len(analysis_results)
            total_neurons = sum(r['neurons'] for r in analysis_results)
            all_layer_types = set()
            all_activations = set()
            
            for result in analysis_results:
                all_layer_types.update(result['layer_types'])
                all_activations.update(result['activations'])
            
            analysis_text += f"üìä Summary:\n"
            analysis_text += f"   Total Networks: {total_networks}\n"
            analysis_text += f"   Total Neurons: {total_neurons}\n"
            analysis_text += f"   Layer Types Used: {', '.join(all_layer_types) if all_layer_types else 'None'}\n"
            analysis_text += f"   Activations Used: {', '.join(all_activations) if all_activations else 'None'}\n"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ
            dialog = tk.Toplevel(self.root)
            dialog.title("Neural Network Analysis")
            dialog.geometry("600x500")
            dialog.transient(self.root)
            dialog.grab_set()
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            text_frame = ttk.Frame(dialog)
            text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            text_widget = Text(text_frame, wrap=tk.WORD, font=("Consolas", 10))
            scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
            text_widget.config(yscrollcommand=scrollbar.set)
            
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            text_widget.insert("1.0", analysis_text)
            text_widget.config(state='disabled')
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            ttk.Button(dialog, text="Close", command=dialog.destroy).pack(pady=5)
            
            self.log_to_console(f"‚úÖ Neural network analysis completed: {total_networks} networks, {total_neurons} neurons")
            
        except Exception as e:
            self.log_to_console(f"‚ùå Neural analysis error: {e}")
            messagebox.showerror("Analysis Error", f"Failed to analyze neural networks:\n{e}")
    
    def show_ml_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ ML —Ñ—É–Ω–∫—Ü–∏—è–º"""
        help_text = """ü§ñ AnamorphX ML Features Guide
================================

üèóÔ∏è Neural Backend:
‚Ä¢ Generate PyTorch - Convert AnamorphX networks to PyTorch code
‚Ä¢ Neural Analysis - Analyze network architecture and parameters

üß† ML Analysis:
‚Ä¢ Real-time code analysis with ML models
‚Ä¢ Automatic error detection and suggestions
‚Ä¢ Performance optimization recommendations

üéØ ML Console Commands:
‚Ä¢ help - Show available commands
‚Ä¢ clear - Clear console output
‚Ä¢ train - Start ML model training
‚Ä¢ status - Show ML system status

‚å®Ô∏è Hotkeys:
‚Ä¢ Ctrl+M - Run full ML analysis
‚Ä¢ Ctrl+Space - ML autocomplete
‚Ä¢ Ctrl+Shift+G - Generate PyTorch model
‚Ä¢ F5 - Run code
‚Ä¢ F9 - Toggle breakpoint

üîß Settings:
‚Ä¢ Real-time analysis toggle
‚Ä¢ ML model selection
‚Ä¢ Performance tuning options
"""
        
        messagebox.showinfo("ML Features Guide", help_text)
    
    def show_neural_tutorial(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º —Å–µ—Ç—è–º"""
        tutorial_text = """üß† Neural Network Tutorial
=============================

üìö AnamorphX Network Syntax:

1. Basic Network Structure:
   network MyNetwork {
       neuron Layer1 { ... }
       neuron Layer2 { ... }
       optimizer: adam
       learning_rate: 0.001
   }

2. Layer Types:
   ‚Ä¢ Dense Layer:
     neuron Dense1 {
         activation: relu
         units: 128
         dropout: 0.3
     }
   
   ‚Ä¢ Convolutional Layer:
     neuron Conv1 {
         activation: relu
         filters: 32
         kernel_size: 3
         padding: 1
     }
   
   ‚Ä¢ Pooling Layer:
     neuron Pool1 {
         pool_size: 2
         stride: 2
     }

3. Activations:
   ‚Ä¢ relu, sigmoid, tanh
   ‚Ä¢ softmax, linear
   ‚Ä¢ leaky_relu, gelu

4. Optimizers:
   ‚Ä¢ adam, sgd, adamw, rmsprop

5. Loss Functions:
   ‚Ä¢ mse, categorical_crossentropy
   ‚Ä¢ binary_crossentropy

üöÄ Quick Start Example:
network ImageClassifier {
    neuron Conv1 {
        activation: relu
        filters: 32
        kernel_size: 3
    }
    neuron Pool1 {
        pool_size: 2
    }
    neuron Dense1 {
        activation: relu
        units: 128
    }
    neuron Output {
        activation: softmax
        units: 10
    }
    optimizer: adam
    learning_rate: 0.001
}

üí° Tips:
‚Ä¢ Use Ctrl+Shift+G to generate PyTorch code
‚Ä¢ Use Ctrl+Shift+N to analyze your networks
‚Ä¢ Check the ML console for real-time feedback
"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º
        dialog = tk.Toplevel(self.root)
        dialog.title("Neural Network Tutorial")
        dialog.geometry("700x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º
        text_frame = ttk.Frame(dialog)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        text_widget = Text(text_frame, wrap=tk.WORD, font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
        text_widget.config(yscrollcommand=scrollbar.set)
        
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        text_widget.insert("1.0", tutorial_text)
        text_widget.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(dialog)
        button_frame.pack(pady=5)
        
        ttk.Button(button_frame, text="Load Example", 
                  command=lambda: self.load_neural_example()).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Close", 
                  command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def load_neural_example(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        example_code = '''// Neural Network Example - Image Classifier
network ImageClassifier {
    neuron ConvLayer1 {
        activation: relu
        filters: 32
        kernel_size: 3
        padding: 1
    }
    
    neuron PoolLayer1 {
        pool_size: 2
        stride: 2
    }
    
    neuron ConvLayer2 {
        activation: relu
        filters: 64
        kernel_size: 3
        padding: 1
    }
    
    neuron PoolLayer2 {
        pool_size: 2
        stride: 2
    }
    
    neuron DenseLayer {
        activation: relu
        units: 128
        dropout: 0.5
    }
    
    neuron OutputLayer {
        activation: softmax
        units: 10
    }
    
    optimizer: adam
    learning_rate: 0.001
    loss: categorical_crossentropy
    batch_size: 64
    epochs: 200
}

// Simple Regressor Example
network SimpleRegressor {
    neuron Hidden1 {
        activation: relu
        units: 64
    }
    
    neuron Hidden2 {
        activation: relu
        units: 32
    }
    
    neuron Output {
        activation: linear
        units: 1
    }
    
    optimizer: adam
    learning_rate: 0.01
    loss: mse
    batch_size: 32
    epochs: 100
}'''
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if hasattr(self, 'text_editor'):
            self.text_editor.delete("1.0", tk.END)
            self.text_editor.insert("1.0", example_code)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.current_file = None
            self.file_modified = False
            if hasattr(self, 'file_label'):
                self.file_label.config(text="üìÑ neural_example.anamorph")
            if hasattr(self, 'modified_label'):
                self.modified_label.config(text="")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self.apply_enhanced_syntax_highlighting()
            
            # ML –∞–Ω–∞–ª–∏–∑
            self.root.after(1000, self.perform_realtime_ml_analysis)
            
            self.log_to_console("üìö Neural network example loaded")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ IDE"""
    print("üöÄ Starting AnamorphX IDE - Unified ML Edition")
    print(f"ü§ñ ML Status: {'Full PyTorch Integration' if HAS_FULL_ML else 'Simulated Mode'}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ IDE
    ide = UnifiedMLIDE()
    
    try:
        ide.root.mainloop()
    except KeyboardInterrupt:
        print("\nüëã AnamorphX IDE closed by user")
    except Exception as e:
        print(f"‚ùå IDE Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 