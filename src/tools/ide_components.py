"""
IDE Components for AnamorphX

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —è–∑—ã–∫–∞ Anamorph:
- –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
- –¢–µ—Ä–º–∏–Ω–∞–ª/–∫–æ–Ω—Å–æ–ª—å
- –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
- –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import os
import json
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, font, Text, Menu
from tkinter.scrolledtext import ScrolledText
import subprocess
import threading
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, field
from pathlib import Path
import tempfile

from .syntax_highlighter import AnamorphSyntaxHighlighter, THEMES
from ..lexer import AnamorphLexer
from ..parser import AnamorphParser
from ..semantic import SemanticAnalyzer
from ..codegen import PythonCodeGenerator, JavaScriptCodeGenerator


@dataclass
class IDEConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è IDE"""
    theme: str = "dark"
    font_family: str = "Consolas"
    font_size: int = 12
    tab_size: int = 4
    auto_save: bool = True
    auto_save_interval: int = 5000  # –º—Å
    show_line_numbers: bool = True
    word_wrap: bool = False
    syntax_highlighting: bool = True
    auto_complete: bool = True
    bracket_matching: bool = True
    code_folding: bool = True
    minimap: bool = False
    
    def save_to_file(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.__dict__, f, indent=2, ensure_ascii=False)
    
    @classmethod
    def load_from_file(cls, filepath: str) -> 'IDEConfig':
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return cls(**data)
        except (FileNotFoundError, json.JSONDecodeError):
            return cls()


@dataclass
class FileTab:
    """–í–∫–ª–∞–¥–∫–∞ —Ñ–∞–π–ª–∞"""
    filepath: Optional[str] = None
    content: str = ""
    modified: bool = False
    language: str = "anamorph"
    cursor_position: tuple = (1, 0)
    
    @property
    def filename(self) -> str:
        """–ò–º—è —Ñ–∞–π–ª–∞"""
        if self.filepath:
            return os.path.basename(self.filepath)
        return "Untitled"
        
    @property
    def title(self) -> str:
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏"""
        title = self.filename
        if self.modified:
            title += " *"
        return title


@dataclass
class FileInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"""
    path: str
    name: str
    is_directory: bool
    size: Optional[int] = None
    modified: Optional[float] = None


@dataclass 
class ProjectConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    name: str
    root_path: str
    main_file: Optional[str] = None
    build_command: Optional[str] = None
    run_command: Optional[str] = None
    dependencies: List[str] = None
    
    def __post_init__(self):
        if self.dependencies is None:
            self.dependencies = []


class FileExplorer:
    """–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è IDE"""
    
    def __init__(self, parent, on_file_select: Callable[[str], None]):
        self.parent = parent
        self.on_file_select = on_file_select
        self.current_path = os.getcwd()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
        self.tree = ttk.Treeview(parent, columns=('size', 'modified'), show='tree headings')
        self.tree.heading('#0', text='–ò–º—è —Ñ–∞–π–ª–∞')
        self.tree.heading('size', text='–†–∞–∑–º–µ—Ä')
        self.tree.heading('modified', text='–ò–∑–º–µ–Ω–µ–Ω')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(parent, orient='vertical', command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –°–æ–±—ã—Ç–∏—è
        self.tree.bind('<Double-1>', self._on_double_click)
        self.tree.bind('<Button-3>', self._on_right_click)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = Menu(self.tree, tearoff=0)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self._open_file)
        self.context_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self._rename_file)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_file)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª", command=self._new_file)
        self.context_menu.add_command(label="–ù–æ–≤–∞—è –ø–∞–ø–∫–∞", command=self._new_folder)
        
        self.refresh()
    
    def set_path(self, path: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å"""
        self.current_path = path
        self.refresh()
    
    def refresh(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
        try:
            for item in sorted(os.listdir(self.current_path)):
                full_path = os.path.join(self.current_path, item)
                is_dir = os.path.isdir(full_path)
                
                if is_dir:
                    self.tree.insert('', 'end', text=f"üìÅ {item}", values=('', ''))
                else:
                    size = os.path.getsize(full_path)
                    modified = os.path.getmtime(full_path)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                    icon = self._get_file_icon(item)
                    
                    self.tree.insert('', 'end', text=f"{icon} {item}", 
                                   values=(f"{size} –±–∞–π—Ç", modified))
        except PermissionError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
    
    def _get_file_icon(self, filename: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞"""
        ext = os.path.splitext(filename)[1].lower()
        
        icons = {
            '.amph': 'üß†',  # –§–∞–π–ª—ã Anamorph
            '.py': 'üêç',    # Python
            '.js': 'üìú',    # JavaScript
            '.html': 'üåê',  # HTML
            '.css': 'üé®',   # CSS
            '.json': 'üìã',  # JSON
            '.txt': 'üìÑ',   # –¢–µ–∫—Å—Ç
            '.md': 'üìù',    # Markdown
            '.jpg': 'üñºÔ∏è',   # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            '.png': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è',
        }
        
        return icons.get(ext, 'üìÑ')
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        item = self.tree.selection()[0]
        text = self.tree.item(item, 'text')
        filename = text.split(' ', 1)[1]  # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É
        full_path = os.path.join(self.current_path, filename)
        
        if os.path.isdir(full_path):
            self.set_path(full_path)
        else:
            self.on_file_select(full_path)
    
    def _on_right_click(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        self.context_menu.post(event.x_root, event.y_root)
    
    def _open_file(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        selection = self.tree.selection()
        if selection:
            item = selection[0]
            text = self.tree.item(item, 'text')
            filename = text.split(' ', 1)[1]
            full_path = os.path.join(self.current_path, filename)
            
            if not os.path.isdir(full_path):
                self.on_file_select(full_path)
    
    def _rename_file(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _delete_file(self):
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _new_file(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _new_folder(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


class CodeEditor:
    """–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    
    def __init__(self, parent):
        self.parent = parent
        self.current_file = None
        self.is_modified = False
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        self.main_frame = ttk.Frame(parent)
        self.main_frame.pack(fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.text_widget = ScrolledText(
            self.main_frame,
            wrap=tk.NONE,
            font=('Consolas', 12),
            undo=True,
            maxundo=50
        )
        self.text_widget.pack(fill='both', expand=True)
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.highlighter = AnamorphSyntaxHighlighter(THEMES['dark'])
        self._setup_syntax_highlighting()
        
        # –°–æ–±—ã—Ç–∏—è
        self.text_widget.bind('<KeyRelease>', self._on_text_change)
        self.text_widget.bind('<Control-s>', self._save_file)
        self.text_widget.bind('<Control-o>', self._open_file)
        self.text_widget.bind('<Control-n>', self._new_file)
        
        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        self.line_numbers = Text(
            self.main_frame,
            width=4,
            padx=3,
            takefocus=0,
            border=0,
            background='#2D2D2D',
            foreground='#858585',
            state='disabled',
            wrap='none'
        )
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        self.text_widget.bind('<MouseWheel>', self._on_mousewheel)
        self.text_widget.bind('<Button-4>', self._on_mousewheel)
        self.text_widget.bind('<Button-5>', self._on_mousewheel)
    
    def _setup_syntax_highlighting(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        for token_type, style in self.highlighter.theme.styles.items():
            tag_name = f"token_{token_type.value}"
            
            self.text_widget.tag_configure(
                tag_name,
                foreground=style.color,
                background=style.background,
                font=('Consolas', 12, 
                      ('bold' if style.bold else 'normal') + 
                      (' italic' if style.italic else ''))
            )
    
    def _on_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        self.is_modified = True
        self._update_title()
        self._highlight_syntax()
        self._update_line_numbers()
    
    def _highlight_syntax(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        content = self.text_widget.get('1.0', 'end-1c')
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        for tag in self.text_widget.tag_names():
            if tag.startswith('token_'):
                self.text_widget.tag_delete(tag)
        
        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        tokens = self.highlighter.tokenize(content)
        
        for token in tokens:
            if token.type.value in ['whitespace', 'newline']:
                continue
                
            tag_name = f"token_{token.type.value}"
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            start_pos = f"{token.line}.{token.column - 1}"
            end_pos = f"{token.line}.{token.column - 1 + len(token.value)}"
            
            self.text_widget.tag_add(tag_name, start_pos, end_pos)
    
    def _update_line_numbers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""
        content = self.text_widget.get('1.0', 'end-1c')
        lines = content.split('\n')
        line_count = len(lines)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        self.line_numbers.config(state='normal')
        self.line_numbers.delete('1.0', 'end')
        
        for i in range(1, line_count + 1):
            self.line_numbers.insert('end', f"{i:>3}\n")
        
        self.line_numbers.config(state='disabled')
    
    def _update_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title = "–ù–æ–≤—ã–π —Ñ–∞–π–ª"
        if self.current_file:
            title = os.path.basename(self.current_file)
        
        if self.is_modified:
            title += " *"
        
        # TODO: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        pass
    
    def _on_mousewheel(self, event):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        self.line_numbers.yview_scroll(int(-1 * (event.delta / 120)), "units")
    
    def _save_file(self, event=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if not self.current_file:
            self.current_file = filedialog.asksaveasfilename(
                defaultextension=".amph",
                filetypes=[
                    ("Anamorph files", "*.amph"),
                    ("Python files", "*.py"),
                    ("All files", "*.*")
                ]
            )
        
        if self.current_file:
            try:
                content = self.text_widget.get('1.0', 'end-1c')
                with open(self.current_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                self.is_modified = False
                self._update_title()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    def _open_file(self, event=None):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            filetypes=[
                ("Anamorph files", "*.amph"),
                ("Python files", "*.py"),
                ("All files", "*.*")
            ]
        )
        
        if filename:
            self.open_file(filename)
    
    def _new_file(self, event=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if self.is_modified:
            result = messagebox.askyesnocancel(
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?", 
                "–§–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
            )
            
            if result is True:
                self._save_file()
            elif result is None:
                return
        
        self.text_widget.delete('1.0', 'end')
        self.current_file = None
        self.is_modified = False
        self._update_title()
    
    def open_file(self, filename: str):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.text_widget.delete('1.0', 'end')
            self.text_widget.insert('1.0', content)
            
            self.current_file = filename
            self.is_modified = False
            self._update_title()
            self._highlight_syntax()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
    
    def get_content(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        return self.text_widget.get('1.0', 'end-1c')
    
    def set_content(self, content: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        self.text_widget.delete('1.0', 'end')
        self.text_widget.insert('1.0', content)
        self._highlight_syntax()


class TerminalPanel:
    """–¢–µ—Ä–º–∏–Ω–∞–ª/–∫–æ–Ω—Å–æ–ª—å –¥–ª—è IDE"""
    
    def __init__(self, parent):
        self.parent = parent
        self.process = None
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.frame = ttk.Frame(parent)
        self.frame.pack(fill='both', expand=True)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.output_text = ScrolledText(
            self.frame,
            height=10,
            background='black',
            foreground='white',
            font=('Consolas', 10),
            state='disabled'
        )
        self.output_text.pack(fill='both', expand=True)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        self.input_frame = ttk.Frame(self.frame)
        self.input_frame.pack(fill='x', pady=5)
        
        ttk.Label(self.input_frame, text="$").pack(side='left')
        
        self.input_entry = ttk.Entry(self.input_frame)
        self.input_entry.pack(side='left', fill='x', expand=True, padx=5)
        self.input_entry.bind('<Return>', self._execute_command)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ttk.Button(
            self.input_frame,
            text="–í—ã–ø–æ–ª–Ω–∏—Ç—å",
            command=self._execute_command
        ).pack(side='right')
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        self.command_history = []
        self.history_index = -1
        
        self.input_entry.bind('<Up>', self._history_up)
        self.input_entry.bind('<Down>', self._history_down)
    
    def _execute_command(self, event=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        command = self.input_entry.get().strip()
        if not command:
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.command_history.append(command)
        self.history_index = len(self.command_history)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self._append_output(f"$ {command}\n", 'yellow')
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.input_entry.delete(0, 'end')
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._run_command, args=(command,)).start()
    
    def _run_command(self, command: str):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if command == 'clear':
                self._clear_output()
                return
            elif command.startswith('cd '):
                path = command[3:].strip()
                try:
                    os.chdir(path)
                    self._append_output(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤: {os.getcwd()}\n", 'green')
                except Exception as e:
                    self._append_output(f"–û—à–∏–±–∫–∞: {e}\n", 'red')
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                cwd=os.getcwd()
            )
            
            if result.stdout:
                self._append_output(result.stdout, 'white')
            
            if result.stderr:
                self._append_output(result.stderr, 'red')
            
            if result.returncode != 0:
                self._append_output(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}\n", 'red')
                
        except Exception as e:
            self._append_output(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}\n", 'red')
    
    def _append_output(self, text: str, color: str = 'white'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤—ã–≤–æ–¥"""
        self.output_text.config(state='normal')
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏
        if color not in self.output_text.tag_names():
            colors = {
                'white': '#FFFFFF',
                'green': '#00FF00',
                'red': '#FF0000',
                'yellow': '#FFFF00',
                'blue': '#0000FF'
            }
            self.output_text.tag_configure(color, foreground=colors.get(color, '#FFFFFF'))
        
        self.output_text.insert('end', text, color)
        self.output_text.config(state='disabled')
        self.output_text.see('end')  # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    
    def _clear_output(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–≤–æ–¥–∞"""
        self.output_text.config(state='normal')
        self.output_text.delete('1.0', 'end')
        self.output_text.config(state='disabled')
    
    def _history_up(self, event):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ (–≤–≤–µ—Ä—Ö)"""
        if self.command_history and self.history_index > 0:
            self.history_index -= 1
            self.input_entry.delete(0, 'end')
            self.input_entry.insert(0, self.command_history[self.history_index])
    
    def _history_down(self, event):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ (–≤–Ω–∏–∑)"""
        if self.command_history and self.history_index < len(self.command_history) - 1:
            self.history_index += 1
            self.input_entry.delete(0, 'end')
            self.input_entry.insert(0, self.command_history[self.history_index])
        elif self.history_index == len(self.command_history) - 1:
            self.history_index = len(self.command_history)
            self.input_entry.delete(0, 'end')


class AnamorphIDE:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ IDE –¥–ª—è —è–∑—ã–∫–∞ Anamorph"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AnamorphX IDE - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        self.root.geometry("1200x800")
        
        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
        self.current_project: Optional[ProjectConfig] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._create_menu()
        self._create_toolbar()
        self._create_layout()
        self._create_status_bar()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
    
    def _create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = Menu(self.root)
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª", command=self._new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self._open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self._save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self._save_as_file)
        file_menu.add_separator()
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self._open_project)
        file_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self._new_project)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self._on_closing)
        
        # –ü—Ä–∞–≤–∫–∞
        edit_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å", command=self._undo, accelerator="Ctrl+Z")
        edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", command=self._redo, accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self._cut, accelerator="Ctrl+X")
        edit_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self._copy, accelerator="Ctrl+C")
        edit_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self._paste, accelerator="Ctrl+V")
        
        # –í–∏–¥
        view_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        view_menu.add_command(label="–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", command=self._toggle_file_explorer)
        view_menu.add_command(label="–¢–µ—Ä–º–∏–Ω–∞–ª", command=self._toggle_terminal)
        view_menu.add_command(label="–û—Ç–ª–∞–¥—á–∏–∫", command=self._toggle_debugger)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        run_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", menu=run_menu)
        run_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self._run_program, accelerator="F5")
        run_menu.add_command(label="–û—Ç–ª–∞–¥–∫–∞", command=self._debug_program, accelerator="F9")
        run_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self._stop_program)
        
        # –ü–æ–º–æ—â—å
        help_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", command=self._show_docs)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self._show_about)
    
    def _create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(side='top', fill='x', padx=5, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏
        ttk.Button(self.toolbar, text="üìÑ –ù–æ–≤—ã–π", command=self._new_file).pack(side='left', padx=2)
        ttk.Button(self.toolbar, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å", command=self._open_file).pack(side='left', padx=2)
        ttk.Button(self.toolbar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self._save_file).pack(side='left', padx=2)
        
        ttk.Separator(self.toolbar, orient='vertical').pack(side='left', fill='y', padx=5)
        
        ttk.Button(self.toolbar, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫", command=self._run_program).pack(side='left', padx=2)
        ttk.Button(self.toolbar, text="üêõ –û—Ç–ª–∞–¥–∫–∞", command=self._debug_program).pack(side='left', padx=2)
        ttk.Button(self.toolbar, text="‚èπÔ∏è –°—Ç–æ–ø", command=self._stop_program).pack(side='left', padx=2)
        
        ttk.Separator(self.toolbar, orient='vertical').pack(side='left', fill='y', padx=5)
        
        # –í—ã–±–æ—Ä —Ç–µ–º—ã
        ttk.Label(self.toolbar, text="–¢–µ–º–∞:").pack(side='left', padx=5)
        self.theme_var = tk.StringVar(value="dark")
        theme_combo = ttk.Combobox(
            self.toolbar, 
            textvariable=self.theme_var,
            values=list(THEMES.keys()),
            state='readonly',
            width=15
        )
        theme_combo.pack(side='left', padx=2)
        theme_combo.bind('<<ComboboxSelected>>', self._change_theme)
    
    def _create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_paned = ttk.PanedWindow(self.root, orient='horizontal')
        self.main_paned.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)
        self.left_frame = ttk.Frame(self.main_paned, width=250)
        self.main_paned.add(self.left_frame, weight=1)
        
        # –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        ttk.Label(self.left_frame, text="–§–∞–π–ª–æ–≤—ã –º–µ–Ω–µ–¥–∂–µ—Ä", font=('Arial', 10, 'bold')).pack(anchor='w', pady=5)
        self.file_explorer = FileExplorer(self.left_frame, self._on_file_select)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.center_paned = ttk.PanedWindow(self.main_paned, orient='vertical')
        self.main_paned.add(self.center_paned, weight=4)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        self.editor_frame = ttk.Frame(self.center_paned)
        self.center_paned.add(self.editor_frame, weight=3)
        
        self.code_editor = CodeEditor(self.editor_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (—Ç–µ—Ä–º–∏–Ω–∞–ª)
        self.bottom_frame = ttk.Frame(self.center_paned, height=200)
        self.center_paned.add(self.bottom_frame, weight=1)
        
        # Notebook –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        self.bottom_notebook = ttk.Notebook(self.bottom_frame)
        self.bottom_notebook.pack(fill='both', expand=True)
        
        # –¢–µ—Ä–º–∏–Ω–∞–ª
        self.terminal_frame = ttk.Frame(self.bottom_notebook)
        self.bottom_notebook.add(self.terminal_frame, text="–¢–µ—Ä–º–∏–Ω–∞–ª")
        self.terminal = TerminalPanel(self.terminal_frame)
        
        # –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–∞—è)
        self.debug_frame = ttk.Frame(self.bottom_notebook)
        self.bottom_notebook.add(self.debug_frame, text="–û—Ç–ª–∞–¥—á–∏–∫")
        ttk.Label(self.debug_frame, text="–û—Ç–ª–∞–¥—á–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...").pack(pady=20)
        
        # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.output_frame = ttk.Frame(self.bottom_notebook)
        self.bottom_notebook.add(self.output_frame, text="–í—ã–≤–æ–¥")
        
        self.output_text = ScrolledText(
            self.output_frame,
            height=8,
            background='#1E1E1E',
            foreground='#D4D4D4',
            font=('Consolas', 10)
        )
        self.output_text.pack(fill='both', expand=True)
    
    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side='bottom', fill='x')
        
        self.status_label = ttk.Label(self.status_bar, text="–ì–æ—Ç–æ–≤")
        self.status_label.pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        self.cursor_label = ttk.Label(self.status_bar, text="–°—Ç—Ä–æ–∫–∞: 1, –°—Ç–æ–ª–±–µ—Ü: 1")
        self.cursor_label.pack(side='right', padx=5)
    
    def _on_file_select(self, filepath: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        self.code_editor.open_file(filepath)
        self.status_label.config(text=f"–û—Ç–∫—Ä—ã—Ç: {os.path.basename(filepath)}")
    
    def _change_theme(self, event=None):
        """–°–º–µ–Ω–∞ —Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
        theme_name = self.theme_var.get()
        if theme_name in THEMES:
            self.code_editor.highlighter = AnamorphSyntaxHighlighter(THEMES[theme_name])
            self.code_editor._setup_syntax_highlighting()
            self.code_editor._highlight_syntax()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    def _new_file(self):
        self.code_editor._new_file()
    
    def _open_file(self):
        self.code_editor._open_file()
    
    def _save_file(self):
        self.code_editor._save_file()
    
    def _save_as_file(self):
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫"
        pass
    
    def _undo(self):
        try:
            self.code_editor.text_widget.edit_undo()
        except:
            pass
    
    def _redo(self):
        try:
            self.code_editor.text_widget.edit_redo()
        except:
            pass
    
    def _cut(self):
        try:
            self.code_editor.text_widget.event_generate("<<Cut>>")
        except:
            pass
    
    def _copy(self):
        try:
            self.code_editor.text_widget.event_generate("<<Copy>>")
        except:
            pass
    
    def _paste(self):
        try:
            self.code_editor.text_widget.event_generate("<<Paste>>")
        except:
            pass
    
    def _run_program(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        content = self.code_editor.get_content()
        if not content.strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        temp_file = "temp_program.amph"
        try:
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä AnamorphX
            self.output_text.delete('1.0', 'end')
            self.output_text.insert('end', f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...\n")
            
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º
            self.output_text.insert('end', "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É: {e}")
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(temp_file):
                os.remove(temp_file)
    
    def _debug_program(self):
        """–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç–ª–∞–¥—á–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def _stop_program(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    
    def _toggle_file_explorer(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        pass
    
    def _toggle_terminal(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        pass
    
    def _toggle_debugger(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥—á–∏–∫–∞"""
        pass
    
    def _new_project(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def _open_project(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    
    def _show_docs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
        messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ GitHub")
    
    def _show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "AnamorphX IDE v1.0.0\n\n"
            "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
            "–¥–ª—è —è–∑—ã–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Anamorph\n\n"
            "¬© 2024 AnamorphX Development Team"
        )
    
    def _on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.code_editor.is_modified:
            result = messagebox.askyesnocancel(
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                "–§–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?"
            )
            
            if result is True:
                self.code_editor._save_file()
            elif result is None:
                return
        
        self.root.quit()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ IDE"""
        self.root.mainloop()


def launch_ide():
    """–ó–∞–ø—É—Å–∫ AnamorphX IDE"""
    try:
        ide = AnamorphIDE()
        ide.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ IDE: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ IDE
    launch_ide() 